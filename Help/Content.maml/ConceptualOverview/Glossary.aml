<?xml version="1.0" encoding="utf-8"?>
<topic id="b9d52b7b-36b2-419d-8ce8-6ba7d34deee5" revisionNumber="1">
  <developerGlossaryDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <glossary>
      <title>
      For the purposes of this documentation, the following terms, definitions and abbreviations.
    </title>
      <glossaryDiv address="Definitions">
        <title>
        Definitions
      </title>
        <glossaryEntry>
          <terms>
            <term termClass="Message">Message</term>
          </terms>
          <definition>
            <para>
            A message is a self-contained unit of data that may consist of several parts, including a body and headers.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Service">Service</term>
          </terms>
          <definition>
            <para>
            A service is a construct that exposes one or more endpoints, with each endpoint exposing one or more service operations.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Endpoint">Endpoint</term>
          </terms>
          <definition>
            <para>
            An endpoint is a construct at which messages are sent or received (or both). It comprises a location (an address) that defines where messages can be sent, a specification of the communication mechanism (a binding) that described how messages should be sent, and a definition for a set of messages that can be sent or received (or both) at that location (a service contract) that describes what message can be sent.
          </para>
            <para>
            An WCF service is exposed to the world as a collection of endpoints.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Application endpoint">Application endpoint</term>
          </terms>
          <definition>
            <para>
            An endpoint exposed by the application and that corresponds to a service contract implemented by the application.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Infrastructure endpoint">Infrastructure endpoint</term>
          </terms>
          <definition>
            <para>
            An endpoint that is exposed by the infrastructure to facilitate functionality that is needed or provided by the service that does not relate to a service contract. For example, a service might have an infrastructure endpoint that provides metadata information.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Address">Address</term>
          </terms>
          <definition>
            <para>
            An address specifies the location where messages are received. It is specified as a Uniform Resource Identifier (URI). The URI schema part names the transport mechanism to use to reach the address, such as HTTP and TCP. The hierarchical part of the URI contains a unique location whose format is dependent on the transport mechanism.
          </para>
            <para>
            The endpoint address enables you to create unique endpoint addresses for each endpoint in a service, or under certain conditions share an address across endpoints. The following example shows an address using the HTTPS protocol with a non-default port:
            <codeInline>
              HTTPS://cohowinery:8005/ServiceModelSamples/CalculatorService
            </codeInline></para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Binding">Binding</term>
          </terms>
          <definition>
            <para>
            A binding defines how an endpoint communicates to the world. It is constructed of a set of components called binding elements that "stack" one on top of the other to create the communication infrastructure. At the very least, a binding defines the transport (such as HTTP or TCP) and the encoding being used (such as text or binary). A binding can contain binding elements that specify details like the security mechanisms used to secure messages, or the message pattern used by an endpoint. For more information, see     
            <externalLink><linkText>Configuring Services</linkText><linkUri>http://msdn.microsoft.com/en-us/library/ms733830.aspx</linkUri></externalLink></para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Binding element">Binding element</term>
          </terms>
          <definition>
            <para>
            A binding element represents a particular piece of the binding, such as a transport, an encoding, an implementation of an infrastructure-level protocol (such as WS-ReliableMessaging), or any other component of the communication stack.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Behaviors">Behaviors</term>
          </terms>
          <definition>
            <para>
            A behavior is a component that controls various run-time aspects of a service, an endpoint, a particular operation, or a client. Behaviors are grouped according to scope: common behaviors affect all endpoints globally, service behaviors affect only service-related aspects, endpoint behaviors affect only endpoint-related properties, and operation-level behaviors affect particular operations. For example, one service behavior is throttling, which specifies how a service reacts when an excess of messages threaten to overwhelm its handling capabilities. An endpoint behavior, on the other hand, controls only aspects relevant to endpoints, such as how and where to find a security credential.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="System-provided bindings">System-provided bindings</term>
          </terms>
          <definition>
            <para>
            WCF includes a number of system-provided bindings. These are collections of binding elements that are optimized for specific scenarios. For example, the             
            <externalLink><linkText>WSHttpBinding</linkText><linkUri>http://msdn.microsoft.com/en-us/library/system.servicemodel.wshttpbinding.aspx</linkUri></externalLink>
             is designed for interoperability with services that implement various WS-* specifications. These predefined bindings save time by presenting only those options that can be correctly applied to the specific scenario. If a predefined binding does not meet your requirements, you can create your own custom binding.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Configuration versus coding">Configuration versus coding</term>
          </terms>
          <definition>
            <para>
            Control of an application can be done either through coding, through configuration, or through a combination of both. Configuration has the advantage of allowing someone other than the developer (for example, a network administrator) to set client and service parameters after the code is written and without having to recompile. Configuration not only enables you to set values like endpoint addresses, but also allows further control by enabling you to add endpoints, bindings, and behaviors. Coding allows the developer to retain strict control over all components of the service or client, and any settings done through the configuration can be inspected and if needed overridden by the code.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Service operation">Service operation</term>
          </terms>
          <definition>
            <para>
            A service operation is a procedure defined in a service's code that implements the functionality for an operation. This operation is exposed to clients as methods on a WCF client. The method may return a value, and may take an optional number of arguments, or take no arguments, and return no response. For example, an operation that functions as a simple "Hello" can be used as a notification of a client's presence and to begin a series of operations.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Service contract">Service contract</term>
          </terms>
          <definition>
            <para>
            The service contract ties together multiple related operations into a single functional unit. The contract can define service-level settings, such as the namespace of the service, a corresponding callback contract, and other such settings. In most cases, the contract is defined by creating an interface in the programming language of your choice and applying the
            <externalLink><linkText>ServiceContractAttribute</linkText><linkUri>http://msdn.microsoft.com/en-us/library/system.servicemodel.servicecontractattribute.aspx</linkUri></externalLink>
            attribute to the interface. The actual service code results by implementing the interface.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Operation contract">Operation contract</term>
          </terms>
          <definition>
            <para>
            An operation contract defines the parameters and return type of an operation. When creating an interface that defines the service contract, you signify an operation contract by applying the
            <externalLink><linkText>OperationContractAttribute</linkText><linkUri>http://msdn.microsoft.com/en-us/library/system.servicemodel.operationcontractattribute.aspx</linkUri></externalLink>
            attribute to each method definition that is part of the contract. The operations can be modeled as taking a single message and returning a single message, or as taking a set of types and returning a type. In the latter case, the system will determine the format for the messages that need to be exchanged for that operation.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Message contract">Message contract</term>
          </terms>
          <definition>
            <para>
            A message contract describes the format of a message. For example, it declares whether message elements should go in headers versus the body, what level of security should be applied to what elements of the message, and so on.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Fault contract">Fault contract</term>
          </terms>
          <definition>
            <para>
            A fault contract can be associated with a service operation to denote errors that can be returned to the caller. An operation can have zero or more faults associated with it. These errors are SOAP faults that are modeled as exceptions in the programming model.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Data contract">Data contract</term>
          </terms>
          <definition>
            <para>
            The data types a service uses must be described in metadata to enable others to interoperate with the service. The descriptions of the data types are known as the data contract, and the types can be used in any part of a message, for example, as parameters or return types. If the service is using only simple types, there is no need to explicitly use data contracts.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Hosting">Hosting</term>
          </terms>
          <definition>
            <para>
            A service must be hosted in some process. A host is an application that controls the lifetime of the service. Services can be self-hosted or managed by an existing hosting process.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Self-hosted service">Self-hosted service</term>
          </terms>
          <definition>
            <para>
            A self-hosted service is one that runs within a process application that the developer created. The developer controls its lifetime, sets the properties of the service, opens the service (which sets it into a listening mode), and closes the service.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Hosting process">Hosting process</term>
          </terms>
          <definition>
            <para>
            A hosting process is an application that is designed to host services. These include Internet Information Services (IIS), Windows Activation Services (WAS), and Windows Services. In these hosted scenarios, the host controls the lifetime of the service. For example, using IIS you can set up a virtual directory that contains the service assembly and configuration file. When a message is received, IIS starts the service and controls its lifetime.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Instancing">Instancing</term>
          </terms>
          <definition>
            <para>
            A service has an instancing model. There are three instancing models: "single," in which a single CLR object services all the clients; "per call," in which a new CLR object is created to handle each client call; and "per session," in which a set of CLR objects are created, one for each separate session. The choice of an instancing model depends on the application requirements and the expected usage pattern of the service.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Client application">Client application</term>
          </terms>
          <definition>
            <para>
            A client application is a program that exchanges messages with one or more endpoints. The client application begins by creating an instance of a WCF client and calling methods of the WCF client. It is important to note that a single application can be both a client and a service.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Channel">Channel</term>
          </terms>
          <definition>
            <para>
            A channel is a concrete implementation of a binding element. The binding represents the configuration, and the channel is the implementation associated with that configuration. Therefore, there is a channel associated with each binding element. Channels stack on top of each other to create the concrete implementation of the binding: the channel stack.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="WCF client">WCF client</term>
          </terms>
          <definition>
            <para>
            A WCF client is a client-application construct that exposes the service operations as methods (in the .NET Framework programming language of your choice, such as Visual Basic or Visual C#). Any application can host a WCF client, including an application that hosts a service. Therefore, it is possible to create a service that includes WCF clients of other services.
          </para>
            <para>
            A WCF client can be automatically generated by using the
            <externalLink><linkText>ServiceModel Metadata Utility Tool (Svcutil.exe)</linkText><linkUri>http://msdn.microsoft.com/en-us/library/aa347733.aspx</linkUri></externalLink>
            and pointing it at a running service that publishes metadata.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Metadata ">Metadata</term>
          </terms>
          <definition>
            <para>
            The metadata of a service describes the characteristics of the service that an external entity needs to understand to communicate with the service. Metadata can be consumed by the
            <externalLink><linkText>ServiceModel Metadata Utility Tool (Svcutil.exe)</linkText><linkUri>http://msdn.microsoft.com/en-us/library/aa347733.aspx</linkUri></externalLink>
            to generate a WCF client and accompanying configuration that a client application can use to interact with the service.
          </para>
            <para>
            The metadata exposed by the service includes XML schema documents, which define the data contract of the service, and WSDL documents, which describe the methods of the service.
          </para>
            <para>
            When enabled, metadata for the service is automatically generated by WCF by inspecting the service and its endpoints. To publish metadata from a service, you must explicitly enable the metadata behavior.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Security">Security</term>
          </terms>
          <definition>
            <para>
            Security in WCF includes confidentiality (encryption of messages to prevent eavesdropping), integrity (the means for detection of tampering with the message), authentication (the means for validation of servers and clients), and authorization (the control of access to resources). These functions are provided by either leveraging existing security mechanisms, such as TLS over HTTP (also known as HTTPS), or by implementing one or more of the various WS-* security specifications.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Transport security mode">Transport security mode</term>
          </terms>
          <definition>
            <para>
            Security can be provided by one of three modes: transport mode, message security mode, and transport with message credential mode. The transport security mode specifies that confidentiality, integrity, and authentication are provided by the transport layer mechanisms (such as HTTPS). When using a transport like HTTPS, this mode has the advantage of being efficient in its performance, and well understood because of its prevalence on the Internet. The disadvantage is that this kind of security is applied separately on each hop in the communication path, making the communication susceptible to a "man in the middle" attack.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Message security mode">Message security mode</term>
          </terms>
          <definition>
            <para>
            Message security mode specifies that security is provided by implementing one or more of the security specifications, such as the specification named "Web Services Security: SOAP Message Security" (available at
            <externalLink><linkText><![CDATA[http://go.microsoft.com/fwlink/?LinkId=94684]]></linkText><linkUri>http://go.microsoft.com/fwlink/?LinkId=94684</linkUri></externalLink>
            ). Each message contains the necessary mechanisms to provide security during its transit, and to enable the receivers to detect tampering and to decrypt the messages. In this sense, the security is encapsulated within every message, providing end-to-end security across multiple hops. Because security information becomes part of the message, it is also possible to include multiple kinds of credentials with the message (these are referred to as claims). This approach also has the advantage of enabling the message to travel securely over any transport, including multiple transports between its origin and destination. The disadvantage of this approach is the complexity of the cryptographic mechanisms employed, resulting in performance implications.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Transport with message credential security mode">Transport with message credential security mode</term>
          </terms>
          <definition>
            <para>
            This mode uses the transport layer to provide confidentiality, authentication, and integrity of the messages, while each of the messages can contain multiple credentials (claims) required by the receivers of the message.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="AddressSpace">AddressSpace</term>
          </terms>
          <definition>
            <para>
            The collection of information that an<token>OPCUA</token>Server makes visible to its Clients.The primary objective of the <token>OPCUA</token><token>AS</token> is to provide a standard way for servers to represent Objects to clients.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Alarm">Alarm</term>
          </terms>
          <definition>
            <para>
            A type of Event associated with a state condition that typically requires acknowledgement. Alarms are the typical instrument for providing information to a user that something needs the user’s attention.  A record of how the user reacts to this information is required in many cases.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Attribute">Attribute</term>
          </terms>
          <definition>
            <para>
            A primitive characteristic of a Node. All Attributes are defined by <token>OPCUA</token>, and may not be defined by Clients or Servers. Attributes are the only elements in the<token>AS</token>permitted to have data values.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Certificate">Certificate</term>
          </terms>
          <definition>
            <para>A digitally signed data structure that describes capabilities of a Client or Server.</para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Client">Client</term>
          </terms>
          <definition>
            <para>
            A software application that sends Messages to <token>OPCUA</token> Servers conforming to the Services specified in this set of specifications.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Condition">Condition</term>
          </terms>
          <definition>
            <para>A generic term that is an extension to an Event. A Condition represents the conditions of a system or one of its components and always exists in some state.</para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="CommunicationStack">CommunicationStack</term>
          </terms>
          <definition>
            <para>A layered set of software modules between the application and the hardware that provides various functions to encode, encrypt and format a Message for sending, and to decode, decrypt and unpack a Message that was received.</para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="ComplexData">ComplexData</term>
          </terms>
          <definition>
            <para>Data that is composed of elements or more than one primitive data type, such as a structure.</para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="DataTypeDictionary">Data Type Dictionary</term>
          </terms>
          <definition>
            <para>
            The data type dictionary is represented as a Variable of type DataTypeDictionaryType in the Address Space, the description about the data types is contained in its Value attribute.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Discovery">Discovery</term>
          </terms>
          <definition>
            <para>
            The process by which <token>OPCUA</token> Client obtain information about<token>OPCUA</token>Servers, including endpoint and security information.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Event">Event</term>
          </terms>
          <definition>
            <para>A generic term used to describe an occurrence of some significance within a system or system component.</para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="EventNotifier">EventNotifier</term>
          </terms>
          <definition>
            <para>A special Attribute of a Node that signifies that a Client may subscribe to that particular Node to receive Notifications of Event occurrences.</para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="EventType">Event type</term>
          </terms>
          <definition>
            <para>
            EventType is an ObjectType Node that represents the type definition of an Event.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Generic client">Generic client</term>
          </terms>
          <definition>
            <para>Client without any initial knowledge about available nodes class.</para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="InformationModel">Information Model</term>
          </terms>
          <definition>
            <para>
            An organizational framework that defines, characterizes and relates information resources of a given system or set of systems. The core address space model supports the representation of Information Models in the<token>AS</token>. The Information Model describes standardised Nodes of a server’s <token>AS</token>.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Message">Message</term>
          </terms>
          <definition>
            <para>The data unit conveyed between Client and Server that represents a specific Service request or response.</para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Method">Method</term>
          </terms>
          <definition>
            <para>A callable software function.</para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="MonitoredItem">MonitoredItem</term>
          </terms>
          <definition>
            <para>A Client-defined entity in the Server used to monitor Attributes or EventNotifiers for new values or Event occurrences and generate Notifications for them.</para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="NamespaceIndexes">Namespace indexes</term>
          </terms>
          <definition>
            <para>
            The indexes into the NamespaceArray table.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Node">Node</term>
          </terms>
          <definition>
            <para>
            The fundamental component of an <token>AS</token>.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="NodeClass">NodeClass</term>
          </terms>
          <definition>
            <para>
            The class of a Node in an <token>AS</token>. NodeClasses define the metadata for the components of the<token>OPCUA</token>Object Model. They also define constructs, such as Views, that are used to organize the<token>AS</token>.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Notification">Notification</term>
          </terms>
          <definition>
            <para>The generic term for data that announces the detection of an Event or of a changed Attribute value. Notifications are sent in NotificationMessages.</para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="NotificationMessage">NotificationMessage</term>
          </terms>
          <definition>
            <para>A Message published from a Subscription that contains one or more Notifications.</para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Object">Object</term>
          </terms>
          <definition>
            <para>
            A Node that represents a physical or abstract element of a system. Objects are modelled using the <token>OPCUA</token> Object Model. Systems, subsystems and devices are examples of Objects. An Object may be defined as an instance of an ObjectType.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="ObjectInstance">Object Instance</term>
          </terms>
          <definition>
            <para>A synonym for Object. Not all Objects are defined by ObjectTypes.</para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="ObjectType">ObjectType</term>
          </terms>
          <definition>
            <para>A Node that represents the type definition for an Object.</para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Profile">Profile</term>
          </terms>
          <definition>
            <para>
            A specific set of capabilities, to which a Server may claim conformance. Each Server may claim conformance to more than one Profile. Profiles are named groupings of ConformanceUnits. The Servers and Clients in an OPC UA application will provide the names of Profiles that they support. The definition of Profiles is a dynamic activity, in that it is expected that new Profiles will be added in the future.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Program">Program</term>
          </terms>
          <definition>
            <para>An executable Object that, when invoked, immediately returns a response to indicate that execution has started, and then returns intermediate and final results through Subscriptions identified by the Client during invocation.</para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Reference">Reference</term>
          </terms>
          <definition>
            <para>An explicit relationship (a named pointer) from one Node to another. The Node that contains the Reference is the source Node, and the referenced Node is the target Node. All references are defined by ReferenceTypes.</para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="ReferenceType">ReferenceType</term>
          </terms>
          <definition>
            <para>
            A Node that represents the type definition of a Reference. The ReferenceType specifies the semantics of a Reference. The name of a ReferenceType identifies how source Nodes are related to target Nodes and generally reflects an operation between the two, such as “A Contains B”.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="RootNode">RootNode</term>
          </terms>
          <definition>
            <para>
            The beginning or top Node of a hierarchy.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Server">Server</term>
          </terms>
          <definition>
            <para>A software application that implements and exposes the Services specified in this set of specifications.</para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Service">Service</term>
          </terms>
          <definition>
            <para>
            A Client-callable operation in an <token>OPCUA</token> Server. A Service is similar to a method call in a programming language or an operation in a Web services WSDL contract.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="ServiceSet">ServService Set</term>
          </terms>
          <definition>
            <para>A group of related Services.</para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Session">Session</term>
          </terms>
          <definition>
            <para>A logical long-running connection between a Client and a Server. A Session maintains state information between Service calls from the Client to the Server.</para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Subscription">Subscription</term>
          </terms>
          <definition>
            <para>A Client-defined endpoint in the Server, used to return Notifications to the Client. Generic term that describes a set of Nodes selected by the Client (1) that the Server periodically monitors for the existence of some condition, and (2) for which the Server sends Notifications to the Client when the condition is detected.</para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="Variable">Variable</term>
          </terms>
          <definition>
            <para>
            A Variable is a Node that contains a value.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="View">View</term>
          </terms>
          <definition>
            <para>
            A specific subset of the <token>AS</token> that is of interest to the Client.
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="WS-*">WS-*</term>
          </terms>
          <definition>
            <para>Shorthand for the growing set of Web Service (WS) specifications, such as WS-Security, WS-ReliableMessaging, and so on, that are implemented in WCF.</para>
          </definition>
        </glossaryEntry>
      </glossaryDiv>
      <glossaryDiv address="Abbreviations">
        <title>Abbreviations and symbols.</title>
        <glossaryEntry>
          <terms>
            <term termClass="AE">AE</term>
          </terms>
          <definition>
            <para>Alarms and Events</para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="API">API</term>
          </terms>
          <definition>
            <para>Application Programming Interface</para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="COM">COM</term>
          </terms>
          <definition>
            <para>Component Object Model</para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="DA">DA</term>
          </terms>
          <definition>
            <para>Data Access</para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="DCS">DCS</term>
          </terms>
          <definition>
            <para>Distributed Control System</para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="DX">DX</term>
          </terms>
          <definition>
            <para>Data Exchange</para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="HDA">HDA</term>
          </terms>
          <definition>
            <para>Historical Data Access</para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="HMI">HMI</term>
          </terms>
          <definition>
            <para>Human-Machine Interface</para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="LDAP">LDAP</term>
          </terms>
          <definition>
            <para>Lightweight Directory Access Protocol</para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="MES">MES</term>
          </terms>
          <definition>
            <para>Manufacturing Execution System</para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="OPC">OPC</term>
          </terms>
          <definition>
            <para>OPC Foundation (a non-profit industry association)</para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="PLC">PLC</term>
          </terms>
          <definition>
            <para>Programmable Logic Controller</para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="SCADA">SCADA</term>
          </terms>
          <definition>
            <para>Supervisory Control And Data Acquisition</para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="SOAP">SOAP</term>
          </terms>
          <definition>
            <para>Simple Object Access Protocol</para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="UA">UA</term>
          </terms>
          <definition>
            <para>Unified Architecture</para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="UDDI">UDDI</term>
          </terms>
          <definition>
            <para>
            Universal Description, Discovery and Integration
          </para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="UML">UML</term>
          </terms>
          <definition>
            <para>Unified Modelling Language</para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="WSDL">WSDL</term>
          </terms>
          <definition>
            <para>Web Services Definition Language</para>
          </definition>
        </glossaryEntry>
        <glossaryEntry>
          <terms>
            <term termClass="XML">XML</term>
          </terms>
          <definition>
            <para>Extensible Mark-up Language</para>
          </definition>
        </glossaryEntry>
      </glossaryDiv>
    </glossary>
  </developerGlossaryDocument>
</topic>