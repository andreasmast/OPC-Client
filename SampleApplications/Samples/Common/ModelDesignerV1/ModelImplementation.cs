/* ========================================================================
 * Copyright (c) 2005-2013 The OPC Foundation, Inc. All rights reserved.
 *
 * OPC Foundation MIT License 1.00
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * The complete license agreement can be found here:
 * http://opcfoundation.org/License/MIT/1.00/
 * ======================================================================*/

using System;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using System.Xml;
using System.Runtime.Serialization;
using Opc.Ua;

namespace Opc.Ua.Server
{
    #region DataTypeDictionaryType Class
    /// <summary>
    /// Represents the DataTypeDictionaryType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class DataTypeDictionaryType : VariableTypeSource<byte[]>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public DataTypeDictionaryType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.VariableTypes.DataTypeDictionaryType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.DataTypeDictionaryType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.VariableTypes.BaseDataVariableType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new DataTypeDictionaryType FindSource(IServerInternal server)
        {
            DataTypeDictionaryType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.VariableTypes.DataTypeDictionaryType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as DataTypeDictionaryType;

                if (type != null)
                {
                    return type;
                }

                type = new DataTypeDictionaryType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                DataTypeDictionaryType clone = new DataTypeDictionaryType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region DataTypeVersion
        /// <summary>
        /// A description for the DataTypeVersion Property.
        /// </summary>
        public Property<string> DataTypeVersion
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_dataTypeVersion; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_dataTypeVersion != null)
                    {
                        RemoveChild(m_dataTypeVersion);
                    }

                    m_dataTypeVersion = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceDataTypeVersion(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                DataTypeVersion = replacement;

                DataTypeVersion.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.DataTypeVersion, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.DataTypeDictionaryType_DataTypeVersion,
                    null);
            }
        }
        #endregion

        #region NamespaceUri
        /// <summary>
        /// A description for the NamespaceUri Property.
        /// </summary>
        public Property<string> NamespaceUri
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_namespaceUri; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_namespaceUri != null)
                    {
                        RemoveChild(m_namespaceUri);
                    }

                    m_namespaceUri = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceNamespaceUri(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                NamespaceUri = replacement;

                NamespaceUri.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.NamespaceUri, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.DataTypeDictionaryType_NamespaceUri,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                DataTypeDictionaryType type = source as DataTypeDictionaryType;

                if (type != null && type.DataTypeVersion != null)
                {
                    DataTypeVersion = (Property<string>)type.DataTypeVersion.Clone(this);
                    DataTypeVersion.Initialize(type.DataTypeVersion);
                }

                if (type != null && type.NamespaceUri != null)
                {
                    NamespaceUri = (Property<string>)type.NamespaceUri.Clone(this);
                    NamespaceUri.Initialize(type.NamespaceUri);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_dataTypeVersion = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.DataTypeDictionaryType_DataTypeVersion, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.DataTypeVersion, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.DataTypeDictionaryType_DataTypeVersion);

            m_namespaceUri = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.DataTypeDictionaryType_NamespaceUri, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.NamespaceUri, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.DataTypeDictionaryType_NamespaceUri);
        }
        #endregion

        #region Private Fields
        Property<string> m_dataTypeVersion;
        Property<string> m_namespaceUri;
        #endregion
    }
    #endregion

    #region DataTypeDictionary Class
    /// <summary>
    /// Represents an instance of the DataTypeDictionaryType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class DataTypeDictionary : DataVariable<byte[]>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected DataTypeDictionary(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = DataTypeDictionaryType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new DataTypeDictionary Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            DataTypeDictionary instance = new DataTypeDictionary(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new DataTypeDictionary Construct(IServerInternal server)
        {
            DataTypeDictionary instance = new DataTypeDictionary(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                DataTypeDictionary clone = new DataTypeDictionary(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region DataTypeVersion
        /// <summary>
        /// A description for the DataTypeVersion Property.
        /// </summary>
        public Property<string> DataTypeVersion
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_dataTypeVersion; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_dataTypeVersion != null)
                    {
                        RemoveChild(m_dataTypeVersion);
                    }

                    m_dataTypeVersion = value; 
                }
            }
        }

        /// <summary>
        /// Whether the DataTypeVersion node is specified for the node.
        /// </summary>
        public bool DataTypeVersionSpecified
        {
        	get 
            { 
                lock (DataLock)
                {
                    return m_dataTypeVersion != null; 
                }
            }
        }

        /// <summary>
        /// Specifies the optional child.
        /// </summary>
        public void SpecifyDataTypeVersion(Property<string> replacement)
        {
            CheckNodeManagerState();

            lock (DataLock)
            {
                if (DataTypeVersionSpecified)
                {
                    DataTypeVersion = (Property<string>)DeleteChild(m_dataTypeVersion);
                }

                if (replacement != null)
                {       
                    DataTypeVersion = replacement;

                    DataTypeVersion.Create(
                        this.NodeId, 
                        new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                        null,
                        new QualifiedName(Opc.Ua.BrowseNames.DataTypeVersion, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                        Opc.Ua.Variables.DataTypeDictionaryType_DataTypeVersion,
                        null);
                }
            }
        }
        #endregion

        #region NamespaceUri
        /// <summary>
        /// A description for the NamespaceUri Property.
        /// </summary>
        public Property<string> NamespaceUri
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_namespaceUri; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_namespaceUri != null)
                    {
                        RemoveChild(m_namespaceUri);
                    }

                    m_namespaceUri = value; 
                }
            }
        }

        /// <summary>
        /// Whether the NamespaceUri node is specified for the node.
        /// </summary>
        public bool NamespaceUriSpecified
        {
        	get 
            { 
                lock (DataLock)
                {
                    return m_namespaceUri != null; 
                }
            }
        }

        /// <summary>
        /// Specifies the optional child.
        /// </summary>
        public void SpecifyNamespaceUri(Property<string> replacement)
        {
            CheckNodeManagerState();

            lock (DataLock)
            {
                if (NamespaceUriSpecified)
                {
                    NamespaceUri = (Property<string>)DeleteChild(m_namespaceUri);
                }

                if (replacement != null)
                {       
                    NamespaceUri = replacement;

                    NamespaceUri.Create(
                        this.NodeId, 
                        new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                        null,
                        new QualifiedName(Opc.Ua.BrowseNames.NamespaceUri, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                        Opc.Ua.Variables.DataTypeDictionaryType_NamespaceUri,
                        null);
                }
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                DataTypeDictionary instance = source as DataTypeDictionary;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                DataTypeDictionaryType type = source as DataTypeDictionaryType;

                if (type != null && type.DataTypeVersion != null)
                {
                    DataTypeVersion = (Property<string>)type.DataTypeVersion.Clone(this);
                    DataTypeVersion.Initialize(type.DataTypeVersion);
                }
                else if (instance != null && instance.DataTypeVersion != null)
                {
                    DataTypeVersion = (Property<string>)instance.DataTypeVersion.Clone(this);
                    DataTypeVersion.Initialize(instance.DataTypeVersion);
                }

                if (type != null && type.NamespaceUri != null)
                {
                    NamespaceUri = (Property<string>)type.NamespaceUri.Clone(this);
                    NamespaceUri.Initialize(type.NamespaceUri);
                }
                else if (instance != null && instance.NamespaceUri != null)
                {
                    NamespaceUri = (Property<string>)instance.NamespaceUri.Clone(this);
                    NamespaceUri.Initialize(instance.NamespaceUri);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        
        /// <summary cref="NodeSource.CreateChildren" />
        protected override void CreateChildren(object configuration)
        {
            base.CreateChildren(configuration);
                            
            DataTypeVersion = (Property<string>)InitializeOptionalChild(
                new ConstructInstanceDelegate(Property<string>.Construct), 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.DataTypeVersion, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.DataTypeDictionaryType_DataTypeVersion,
                configuration);

            NamespaceUri = (Property<string>)InitializeOptionalChild(
                new ConstructInstanceDelegate(Property<string>.Construct), 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.NamespaceUri, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.DataTypeDictionaryType_NamespaceUri,
                configuration);
        }
        #endregion

        #region Private Fields
        private DataTypeDictionaryType m_typeDefinition;
        Property<string> m_dataTypeVersion;
        Property<string> m_namespaceUri;
        #endregion
    }
    #endregion

    #region DataTypeDescriptionType Class
    /// <summary>
    /// Represents the DataTypeDescriptionType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class DataTypeDescriptionType : VariableTypeSource<string>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public DataTypeDescriptionType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.VariableTypes.DataTypeDescriptionType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.DataTypeDescriptionType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.VariableTypes.BaseDataVariableType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new DataTypeDescriptionType FindSource(IServerInternal server)
        {
            DataTypeDescriptionType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.VariableTypes.DataTypeDescriptionType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as DataTypeDescriptionType;

                if (type != null)
                {
                    return type;
                }

                type = new DataTypeDescriptionType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                DataTypeDescriptionType clone = new DataTypeDescriptionType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region DataTypeVersion
        /// <summary>
        /// A description for the DataTypeVersion Property.
        /// </summary>
        public Property<string> DataTypeVersion
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_dataTypeVersion; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_dataTypeVersion != null)
                    {
                        RemoveChild(m_dataTypeVersion);
                    }

                    m_dataTypeVersion = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceDataTypeVersion(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                DataTypeVersion = replacement;

                DataTypeVersion.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.DataTypeVersion, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.DataTypeDescriptionType_DataTypeVersion,
                    null);
            }
        }
        #endregion

        #region DictionaryFragment
        /// <summary>
        /// A description for the DictionaryFragment Property.
        /// </summary>
        public Property<byte[]> DictionaryFragment
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_dictionaryFragment; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_dictionaryFragment != null)
                    {
                        RemoveChild(m_dictionaryFragment);
                    }

                    m_dictionaryFragment = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceDictionaryFragment(Property<byte[]> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                DictionaryFragment = replacement;

                DictionaryFragment.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.DictionaryFragment, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.DataTypeDescriptionType_DictionaryFragment,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                DataTypeDescriptionType type = source as DataTypeDescriptionType;

                if (type != null && type.DataTypeVersion != null)
                {
                    DataTypeVersion = (Property<string>)type.DataTypeVersion.Clone(this);
                    DataTypeVersion.Initialize(type.DataTypeVersion);
                }

                if (type != null && type.DictionaryFragment != null)
                {
                    DictionaryFragment = (Property<byte[]>)type.DictionaryFragment.Clone(this);
                    DictionaryFragment.Initialize(type.DictionaryFragment);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_dataTypeVersion = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.DataTypeDescriptionType_DataTypeVersion, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.DataTypeVersion, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.DataTypeDescriptionType_DataTypeVersion);

            m_dictionaryFragment = Property<byte[]>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.DataTypeDescriptionType_DictionaryFragment, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.DictionaryFragment, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.DataTypeDescriptionType_DictionaryFragment);
        }
        #endregion

        #region Private Fields
        Property<string> m_dataTypeVersion;
        Property<byte[]> m_dictionaryFragment;
        #endregion
    }
    #endregion

    #region DataTypeDescription Class
    /// <summary>
    /// Represents an instance of the DataTypeDescriptionType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class DataTypeDescription : DataVariable<string>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected DataTypeDescription(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = DataTypeDescriptionType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new DataTypeDescription Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            DataTypeDescription instance = new DataTypeDescription(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new DataTypeDescription Construct(IServerInternal server)
        {
            DataTypeDescription instance = new DataTypeDescription(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                DataTypeDescription clone = new DataTypeDescription(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region DataTypeVersion
        /// <summary>
        /// A description for the DataTypeVersion Property.
        /// </summary>
        public Property<string> DataTypeVersion
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_dataTypeVersion; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_dataTypeVersion != null)
                    {
                        RemoveChild(m_dataTypeVersion);
                    }

                    m_dataTypeVersion = value; 
                }
            }
        }

        /// <summary>
        /// Whether the DataTypeVersion node is specified for the node.
        /// </summary>
        public bool DataTypeVersionSpecified
        {
        	get 
            { 
                lock (DataLock)
                {
                    return m_dataTypeVersion != null; 
                }
            }
        }

        /// <summary>
        /// Specifies the optional child.
        /// </summary>
        public void SpecifyDataTypeVersion(Property<string> replacement)
        {
            CheckNodeManagerState();

            lock (DataLock)
            {
                if (DataTypeVersionSpecified)
                {
                    DataTypeVersion = (Property<string>)DeleteChild(m_dataTypeVersion);
                }

                if (replacement != null)
                {       
                    DataTypeVersion = replacement;

                    DataTypeVersion.Create(
                        this.NodeId, 
                        new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                        null,
                        new QualifiedName(Opc.Ua.BrowseNames.DataTypeVersion, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                        Opc.Ua.Variables.DataTypeDescriptionType_DataTypeVersion,
                        null);
                }
            }
        }
        #endregion

        #region DictionaryFragment
        /// <summary>
        /// A description for the DictionaryFragment Property.
        /// </summary>
        public Property<byte[]> DictionaryFragment
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_dictionaryFragment; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_dictionaryFragment != null)
                    {
                        RemoveChild(m_dictionaryFragment);
                    }

                    m_dictionaryFragment = value; 
                }
            }
        }

        /// <summary>
        /// Whether the DictionaryFragment node is specified for the node.
        /// </summary>
        public bool DictionaryFragmentSpecified
        {
        	get 
            { 
                lock (DataLock)
                {
                    return m_dictionaryFragment != null; 
                }
            }
        }

        /// <summary>
        /// Specifies the optional child.
        /// </summary>
        public void SpecifyDictionaryFragment(Property<byte[]> replacement)
        {
            CheckNodeManagerState();

            lock (DataLock)
            {
                if (DictionaryFragmentSpecified)
                {
                    DictionaryFragment = (Property<byte[]>)DeleteChild(m_dictionaryFragment);
                }

                if (replacement != null)
                {       
                    DictionaryFragment = replacement;

                    DictionaryFragment.Create(
                        this.NodeId, 
                        new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                        null,
                        new QualifiedName(Opc.Ua.BrowseNames.DictionaryFragment, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                        Opc.Ua.Variables.DataTypeDescriptionType_DictionaryFragment,
                        null);
                }
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                DataTypeDescription instance = source as DataTypeDescription;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                DataTypeDescriptionType type = source as DataTypeDescriptionType;

                if (type != null && type.DataTypeVersion != null)
                {
                    DataTypeVersion = (Property<string>)type.DataTypeVersion.Clone(this);
                    DataTypeVersion.Initialize(type.DataTypeVersion);
                }
                else if (instance != null && instance.DataTypeVersion != null)
                {
                    DataTypeVersion = (Property<string>)instance.DataTypeVersion.Clone(this);
                    DataTypeVersion.Initialize(instance.DataTypeVersion);
                }

                if (type != null && type.DictionaryFragment != null)
                {
                    DictionaryFragment = (Property<byte[]>)type.DictionaryFragment.Clone(this);
                    DictionaryFragment.Initialize(type.DictionaryFragment);
                }
                else if (instance != null && instance.DictionaryFragment != null)
                {
                    DictionaryFragment = (Property<byte[]>)instance.DictionaryFragment.Clone(this);
                    DictionaryFragment.Initialize(instance.DictionaryFragment);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        
        /// <summary cref="NodeSource.CreateChildren" />
        protected override void CreateChildren(object configuration)
        {
            base.CreateChildren(configuration);
                            
            DataTypeVersion = (Property<string>)InitializeOptionalChild(
                new ConstructInstanceDelegate(Property<string>.Construct), 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.DataTypeVersion, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.DataTypeDescriptionType_DataTypeVersion,
                configuration);

            DictionaryFragment = (Property<byte[]>)InitializeOptionalChild(
                new ConstructInstanceDelegate(Property<byte[]>.Construct), 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.DictionaryFragment, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.DataTypeDescriptionType_DictionaryFragment,
                configuration);
        }
        #endregion

        #region Private Fields
        private DataTypeDescriptionType m_typeDefinition;
        Property<string> m_dataTypeVersion;
        Property<byte[]> m_dictionaryFragment;
        #endregion
    }
    #endregion

    #region ServerType Class
    /// <summary>
    /// Represents the ServerType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class ServerType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public ServerType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.ServerType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.ServerType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseObjectType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new ServerType FindSource(IServerInternal server)
        {
            ServerType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.ServerType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as ServerType;

                if (type != null)
                {
                    return type;
                }

                type = new ServerType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                ServerType clone = new ServerType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region ServerArray
        /// <summary>
        /// A description for the ServerArray Property.
        /// </summary>
        public Property<IList<string>> ServerArray
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_serverArray; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_serverArray != null)
                    {
                        RemoveChild(m_serverArray);
                    }

                    m_serverArray = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceServerArray(Property<IList<string>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ServerArray = replacement;

                ServerArray.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ServerArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerType_ServerArray,
                    null);
            }
        }
        #endregion

        #region NamespaceArray
        /// <summary>
        /// A description for the NamespaceArray Property.
        /// </summary>
        public Property<IList<string>> NamespaceArray
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_namespaceArray; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_namespaceArray != null)
                    {
                        RemoveChild(m_namespaceArray);
                    }

                    m_namespaceArray = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceNamespaceArray(Property<IList<string>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                NamespaceArray = replacement;

                NamespaceArray.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.NamespaceArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerType_NamespaceArray,
                    null);
            }
        }
        #endregion

        #region ServerStatus
        /// <summary>
        /// A description for the ServerStatus Variable.
        /// </summary>
        public ServerStatus ServerStatus
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_serverStatus; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_serverStatus != null)
                    {
                        RemoveChild(m_serverStatus);
                    }

                    m_serverStatus = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceServerStatus(ServerStatus replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ServerStatus = replacement;

                ServerStatus.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ServerStatus, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerType_ServerStatus,
                    null);
            }
        }
        #endregion

        #region ServiceLevel
        /// <summary>
        /// A description for the ServiceLevel Property.
        /// </summary>
        public Property<byte> ServiceLevel
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_serviceLevel; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_serviceLevel != null)
                    {
                        RemoveChild(m_serviceLevel);
                    }

                    m_serviceLevel = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceServiceLevel(Property<byte> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ServiceLevel = replacement;

                ServiceLevel.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ServiceLevel, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerType_ServiceLevel,
                    null);
            }
        }
        #endregion

        #region Auditing
        /// <summary>
        /// A description for the Auditing Property.
        /// </summary>
        public Property<bool> Auditing
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_auditing; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_auditing != null)
                    {
                        RemoveChild(m_auditing);
                    }

                    m_auditing = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceAuditing(Property<bool> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Auditing = replacement;

                Auditing.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Auditing, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerType_Auditing,
                    null);
            }
        }
        #endregion

        #region ServerCapabilities
        /// <summary>
        /// A description for the ServerCapabilities Object.
        /// </summary>
        public ServerCapabilities ServerCapabilities
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_serverCapabilities; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_serverCapabilities != null)
                    {
                        RemoveChild(m_serverCapabilities);
                    }

                    m_serverCapabilities = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceServerCapabilities(ServerCapabilities replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ServerCapabilities = replacement;

                ServerCapabilities.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ServerCapabilities, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ServerType_ServerCapabilities,
                    null);
            }
        }
        #endregion

        #region ServerDiagnostics
        /// <summary>
        /// A description for the ServerDiagnostics Object.
        /// </summary>
        public ServerDiagnostics ServerDiagnostics
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_serverDiagnostics; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_serverDiagnostics != null)
                    {
                        RemoveChild(m_serverDiagnostics);
                    }

                    m_serverDiagnostics = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceServerDiagnostics(ServerDiagnostics replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ServerDiagnostics = replacement;

                ServerDiagnostics.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ServerDiagnostics, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ServerType_ServerDiagnostics,
                    null);
            }
        }
        #endregion

        #region VendorServerInfo
        /// <summary>
        /// A description for the VendorServerInfo Object.
        /// </summary>
        public VendorServerInfo VendorServerInfo
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_vendorServerInfo; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_vendorServerInfo != null)
                    {
                        RemoveChild(m_vendorServerInfo);
                    }

                    m_vendorServerInfo = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceVendorServerInfo(VendorServerInfo replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                VendorServerInfo = replacement;

                VendorServerInfo.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.VendorServerInfo, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ServerType_VendorServerInfo,
                    null);
            }
        }
        #endregion

        #region ServerRedundancy
        /// <summary>
        /// A description for the ServerRedundancy Object.
        /// </summary>
        public ServerRedundancy ServerRedundancy
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_serverRedundancy; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_serverRedundancy != null)
                    {
                        RemoveChild(m_serverRedundancy);
                    }

                    m_serverRedundancy = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceServerRedundancy(ServerRedundancy replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ServerRedundancy = replacement;

                ServerRedundancy.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ServerRedundancy, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ServerType_ServerRedundancy,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                ServerType type = source as ServerType;

                if (type != null && type.ServerArray != null)
                {
                    ServerArray = (Property<IList<string>>)type.ServerArray.Clone(this);
                    ServerArray.Initialize(type.ServerArray);
                }

                if (type != null && type.NamespaceArray != null)
                {
                    NamespaceArray = (Property<IList<string>>)type.NamespaceArray.Clone(this);
                    NamespaceArray.Initialize(type.NamespaceArray);
                }

                if (type != null && type.ServerStatus != null)
                {
                    ServerStatus = (ServerStatus)type.ServerStatus.Clone(this);
                    ServerStatus.Initialize(type.ServerStatus);
                }

                if (type != null && type.ServiceLevel != null)
                {
                    ServiceLevel = (Property<byte>)type.ServiceLevel.Clone(this);
                    ServiceLevel.Initialize(type.ServiceLevel);
                }

                if (type != null && type.Auditing != null)
                {
                    Auditing = (Property<bool>)type.Auditing.Clone(this);
                    Auditing.Initialize(type.Auditing);
                }

                if (type != null && type.ServerCapabilities != null)
                {
                    ServerCapabilities = (ServerCapabilities)type.ServerCapabilities.Clone(this);
                    ServerCapabilities.Initialize(type.ServerCapabilities);
                }

                if (type != null && type.ServerDiagnostics != null)
                {
                    ServerDiagnostics = (ServerDiagnostics)type.ServerDiagnostics.Clone(this);
                    ServerDiagnostics.Initialize(type.ServerDiagnostics);
                }

                if (type != null && type.VendorServerInfo != null)
                {
                    VendorServerInfo = (VendorServerInfo)type.VendorServerInfo.Clone(this);
                    VendorServerInfo.Initialize(type.VendorServerInfo);
                }

                if (type != null && type.ServerRedundancy != null)
                {
                    ServerRedundancy = (ServerRedundancy)type.ServerRedundancy.Clone(this);
                    ServerRedundancy.Initialize(type.ServerRedundancy);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_serverArray = Property<IList<string>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ServerType_ServerArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ServerArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerType_ServerArray);

            m_namespaceArray = Property<IList<string>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ServerType_NamespaceArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.NamespaceArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerType_NamespaceArray);

            m_serverStatus = ServerStatus.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ServerType_ServerStatus, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ServerStatus, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerType_ServerStatus);

            m_serviceLevel = Property<byte>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ServerType_ServiceLevel, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ServiceLevel, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerType_ServiceLevel);

            m_auditing = Property<bool>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ServerType_Auditing, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Auditing, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerType_Auditing);

            m_serverCapabilities = ServerCapabilities.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ServerType_ServerCapabilities, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ServerCapabilities, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ServerType_ServerCapabilities);

            m_serverDiagnostics = ServerDiagnostics.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ServerType_ServerDiagnostics, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ServerDiagnostics, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ServerType_ServerDiagnostics);

            m_vendorServerInfo = VendorServerInfo.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ServerType_VendorServerInfo, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.VendorServerInfo, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ServerType_VendorServerInfo);

            m_serverRedundancy = ServerRedundancy.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ServerType_ServerRedundancy, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ServerRedundancy, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ServerType_ServerRedundancy);
        }
        #endregion

        #region Private Fields
        Property<IList<string>> m_serverArray;
        Property<IList<string>> m_namespaceArray;
        ServerStatus m_serverStatus;
        Property<byte> m_serviceLevel;
        Property<bool> m_auditing;
        ServerCapabilities m_serverCapabilities;
        ServerDiagnostics m_serverDiagnostics;
        VendorServerInfo m_vendorServerInfo;
        ServerRedundancy m_serverRedundancy;
        #endregion
    }
    #endregion

    #region ServerObject Class
    /// <summary>
    /// Represents an instance of the ServerType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class ServerObject : ObjectSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected ServerObject(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = ServerType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new ServerObject Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            ServerObject instance = new ServerObject(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new ServerObject Construct(IServerInternal server)
        {
            ServerObject instance = new ServerObject(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                ServerObject clone = new ServerObject(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region ServerArray
        /// <summary>
        /// A description for the ServerArray Property.
        /// </summary>
        public Property<IList<string>> ServerArray
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_serverArray; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_serverArray != null)
                    {
                        RemoveChild(m_serverArray);
                    }

                    m_serverArray = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceServerArray(Property<IList<string>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ServerArray = replacement;

                ServerArray.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ServerArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerType_ServerArray,
                    null);
            }
        }
        #endregion

        #region NamespaceArray
        /// <summary>
        /// A description for the NamespaceArray Property.
        /// </summary>
        public Property<IList<string>> NamespaceArray
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_namespaceArray; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_namespaceArray != null)
                    {
                        RemoveChild(m_namespaceArray);
                    }

                    m_namespaceArray = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceNamespaceArray(Property<IList<string>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                NamespaceArray = replacement;

                NamespaceArray.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.NamespaceArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerType_NamespaceArray,
                    null);
            }
        }
        #endregion

        #region ServerStatus
        /// <summary>
        /// A description for the ServerStatus Variable.
        /// </summary>
        public ServerStatus ServerStatus
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_serverStatus; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_serverStatus != null)
                    {
                        RemoveChild(m_serverStatus);
                    }

                    m_serverStatus = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceServerStatus(ServerStatus replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ServerStatus = replacement;

                ServerStatus.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ServerStatus, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerType_ServerStatus,
                    null);
            }
        }
        #endregion

        #region ServiceLevel
        /// <summary>
        /// A description for the ServiceLevel Property.
        /// </summary>
        public Property<byte> ServiceLevel
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_serviceLevel; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_serviceLevel != null)
                    {
                        RemoveChild(m_serviceLevel);
                    }

                    m_serviceLevel = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceServiceLevel(Property<byte> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ServiceLevel = replacement;

                ServiceLevel.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ServiceLevel, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerType_ServiceLevel,
                    null);
            }
        }
        #endregion

        #region Auditing
        /// <summary>
        /// A description for the Auditing Property.
        /// </summary>
        public Property<bool> Auditing
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_auditing; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_auditing != null)
                    {
                        RemoveChild(m_auditing);
                    }

                    m_auditing = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceAuditing(Property<bool> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Auditing = replacement;

                Auditing.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Auditing, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerType_Auditing,
                    null);
            }
        }
        #endregion

        #region ServerCapabilities
        /// <summary>
        /// A description for the ServerCapabilities Object.
        /// </summary>
        public ServerCapabilities ServerCapabilities
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_serverCapabilities; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_serverCapabilities != null)
                    {
                        RemoveChild(m_serverCapabilities);
                    }

                    m_serverCapabilities = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceServerCapabilities(ServerCapabilities replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ServerCapabilities = replacement;

                ServerCapabilities.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ServerCapabilities, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ServerType_ServerCapabilities,
                    null);
            }
        }
        #endregion

        #region ServerDiagnostics
        /// <summary>
        /// A description for the ServerDiagnostics Object.
        /// </summary>
        public ServerDiagnostics ServerDiagnostics
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_serverDiagnostics; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_serverDiagnostics != null)
                    {
                        RemoveChild(m_serverDiagnostics);
                    }

                    m_serverDiagnostics = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceServerDiagnostics(ServerDiagnostics replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ServerDiagnostics = replacement;

                ServerDiagnostics.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ServerDiagnostics, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ServerType_ServerDiagnostics,
                    null);
            }
        }
        #endregion

        #region VendorServerInfo
        /// <summary>
        /// A description for the VendorServerInfo Object.
        /// </summary>
        public VendorServerInfo VendorServerInfo
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_vendorServerInfo; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_vendorServerInfo != null)
                    {
                        RemoveChild(m_vendorServerInfo);
                    }

                    m_vendorServerInfo = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceVendorServerInfo(VendorServerInfo replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                VendorServerInfo = replacement;

                VendorServerInfo.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.VendorServerInfo, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ServerType_VendorServerInfo,
                    null);
            }
        }
        #endregion

        #region ServerRedundancy
        /// <summary>
        /// A description for the ServerRedundancy Object.
        /// </summary>
        public ServerRedundancy ServerRedundancy
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_serverRedundancy; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_serverRedundancy != null)
                    {
                        RemoveChild(m_serverRedundancy);
                    }

                    m_serverRedundancy = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceServerRedundancy(ServerRedundancy replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ServerRedundancy = replacement;

                ServerRedundancy.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ServerRedundancy, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ServerType_ServerRedundancy,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                ServerObject instance = source as ServerObject;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                ServerType type = source as ServerType;

                if (type != null && type.ServerArray != null)
                {
                    ServerArray = (Property<IList<string>>)type.ServerArray.Clone(this);
                    ServerArray.Initialize(type.ServerArray);
                }
                else if (instance != null && instance.ServerArray != null)
                {
                    ServerArray = (Property<IList<string>>)instance.ServerArray.Clone(this);
                    ServerArray.Initialize(instance.ServerArray);
                }

                if (type != null && type.NamespaceArray != null)
                {
                    NamespaceArray = (Property<IList<string>>)type.NamespaceArray.Clone(this);
                    NamespaceArray.Initialize(type.NamespaceArray);
                }
                else if (instance != null && instance.NamespaceArray != null)
                {
                    NamespaceArray = (Property<IList<string>>)instance.NamespaceArray.Clone(this);
                    NamespaceArray.Initialize(instance.NamespaceArray);
                }

                if (type != null && type.ServerStatus != null)
                {
                    ServerStatus = (ServerStatus)type.ServerStatus.Clone(this);
                    ServerStatus.Initialize(type.ServerStatus);
                }
                else if (instance != null && instance.ServerStatus != null)
                {
                    ServerStatus = (ServerStatus)instance.ServerStatus.Clone(this);
                    ServerStatus.Initialize(instance.ServerStatus);
                }

                if (type != null && type.ServiceLevel != null)
                {
                    ServiceLevel = (Property<byte>)type.ServiceLevel.Clone(this);
                    ServiceLevel.Initialize(type.ServiceLevel);
                }
                else if (instance != null && instance.ServiceLevel != null)
                {
                    ServiceLevel = (Property<byte>)instance.ServiceLevel.Clone(this);
                    ServiceLevel.Initialize(instance.ServiceLevel);
                }

                if (type != null && type.Auditing != null)
                {
                    Auditing = (Property<bool>)type.Auditing.Clone(this);
                    Auditing.Initialize(type.Auditing);
                }
                else if (instance != null && instance.Auditing != null)
                {
                    Auditing = (Property<bool>)instance.Auditing.Clone(this);
                    Auditing.Initialize(instance.Auditing);
                }

                if (type != null && type.ServerCapabilities != null)
                {
                    ServerCapabilities = (ServerCapabilities)type.ServerCapabilities.Clone(this);
                    ServerCapabilities.Initialize(type.ServerCapabilities);
                }
                else if (instance != null && instance.ServerCapabilities != null)
                {
                    ServerCapabilities = (ServerCapabilities)instance.ServerCapabilities.Clone(this);
                    ServerCapabilities.Initialize(instance.ServerCapabilities);
                }

                if (type != null && type.ServerDiagnostics != null)
                {
                    ServerDiagnostics = (ServerDiagnostics)type.ServerDiagnostics.Clone(this);
                    ServerDiagnostics.Initialize(type.ServerDiagnostics);
                }
                else if (instance != null && instance.ServerDiagnostics != null)
                {
                    ServerDiagnostics = (ServerDiagnostics)instance.ServerDiagnostics.Clone(this);
                    ServerDiagnostics.Initialize(instance.ServerDiagnostics);
                }

                if (type != null && type.VendorServerInfo != null)
                {
                    VendorServerInfo = (VendorServerInfo)type.VendorServerInfo.Clone(this);
                    VendorServerInfo.Initialize(type.VendorServerInfo);
                }
                else if (instance != null && instance.VendorServerInfo != null)
                {
                    VendorServerInfo = (VendorServerInfo)instance.VendorServerInfo.Clone(this);
                    VendorServerInfo.Initialize(instance.VendorServerInfo);
                }

                if (type != null && type.ServerRedundancy != null)
                {
                    ServerRedundancy = (ServerRedundancy)type.ServerRedundancy.Clone(this);
                    ServerRedundancy.Initialize(type.ServerRedundancy);
                }
                else if (instance != null && instance.ServerRedundancy != null)
                {
                    ServerRedundancy = (ServerRedundancy)instance.ServerRedundancy.Clone(this);
                    ServerRedundancy.Initialize(instance.ServerRedundancy);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_serverArray = Property<IList<string>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ServerArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerType_ServerArray);

            m_namespaceArray = Property<IList<string>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.NamespaceArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerType_NamespaceArray);

            m_serverStatus = ServerStatus.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ServerStatus, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerType_ServerStatus);

            m_serviceLevel = Property<byte>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ServiceLevel, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerType_ServiceLevel);

            m_auditing = Property<bool>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Auditing, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerType_Auditing);

            m_serverCapabilities = ServerCapabilities.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ServerCapabilities, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ServerType_ServerCapabilities);

            m_serverDiagnostics = ServerDiagnostics.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ServerDiagnostics, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ServerType_ServerDiagnostics);

            m_vendorServerInfo = VendorServerInfo.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.VendorServerInfo, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ServerType_VendorServerInfo);

            m_serverRedundancy = ServerRedundancy.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ServerRedundancy, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ServerType_ServerRedundancy);
        }
        #endregion

        #region Private Fields
        private ServerType m_typeDefinition;
        Property<IList<string>> m_serverArray;
        Property<IList<string>> m_namespaceArray;
        ServerStatus m_serverStatus;
        Property<byte> m_serviceLevel;
        Property<bool> m_auditing;
        ServerCapabilities m_serverCapabilities;
        ServerDiagnostics m_serverDiagnostics;
        VendorServerInfo m_vendorServerInfo;
        ServerRedundancy m_serverRedundancy;
        #endregion
    }
    #endregion

    #region ServerCapabilitiesType Class
    /// <summary>
    /// Represents the ServerCapabilitiesType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class ServerCapabilitiesType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public ServerCapabilitiesType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.ServerCapabilitiesType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.ServerCapabilitiesType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseObjectType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new ServerCapabilitiesType FindSource(IServerInternal server)
        {
            ServerCapabilitiesType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.ServerCapabilitiesType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as ServerCapabilitiesType;

                if (type != null)
                {
                    return type;
                }

                type = new ServerCapabilitiesType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                ServerCapabilitiesType clone = new ServerCapabilitiesType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region ServerProfileArray
        /// <summary>
        /// A description for the ServerProfileArray Property.
        /// </summary>
        public Property<IList<string>> ServerProfileArray
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_serverProfileArray; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_serverProfileArray != null)
                    {
                        RemoveChild(m_serverProfileArray);
                    }

                    m_serverProfileArray = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceServerProfileArray(Property<IList<string>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ServerProfileArray = replacement;

                ServerProfileArray.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ServerProfileArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerCapabilitiesType_ServerProfileArray,
                    null);
            }
        }
        #endregion

        #region LocaleIdArray
        /// <summary>
        /// A description for the LocaleIdArray Property.
        /// </summary>
        public Property<IList<string>> LocaleIdArray
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_localeIdArray; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_localeIdArray != null)
                    {
                        RemoveChild(m_localeIdArray);
                    }

                    m_localeIdArray = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceLocaleIdArray(Property<IList<string>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                LocaleIdArray = replacement;

                LocaleIdArray.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.LocaleIdArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerCapabilitiesType_LocaleIdArray,
                    null);
            }
        }
        #endregion

        #region MinSupportedSampleRate
        /// <summary>
        /// A description for the MinSupportedSampleRate Property.
        /// </summary>
        public Property<double> MinSupportedSampleRate
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_minSupportedSampleRate; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_minSupportedSampleRate != null)
                    {
                        RemoveChild(m_minSupportedSampleRate);
                    }

                    m_minSupportedSampleRate = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceMinSupportedSampleRate(Property<double> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                MinSupportedSampleRate = replacement;

                MinSupportedSampleRate.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.MinSupportedSampleRate, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerCapabilitiesType_MinSupportedSampleRate,
                    null);
            }
        }
        #endregion

        #region MaxBrowseContinuationPoints
        /// <summary>
        /// A description for the MaxBrowseContinuationPoints Property.
        /// </summary>
        public Property<ushort> MaxBrowseContinuationPoints
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_maxBrowseContinuationPoints; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_maxBrowseContinuationPoints != null)
                    {
                        RemoveChild(m_maxBrowseContinuationPoints);
                    }

                    m_maxBrowseContinuationPoints = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceMaxBrowseContinuationPoints(Property<ushort> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                MaxBrowseContinuationPoints = replacement;

                MaxBrowseContinuationPoints.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.MaxBrowseContinuationPoints, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerCapabilitiesType_MaxBrowseContinuationPoints,
                    null);
            }
        }
        #endregion

        #region MaxQueryContinuationPoints
        /// <summary>
        /// A description for the MaxQueryContinuationPoints Property.
        /// </summary>
        public Property<ushort> MaxQueryContinuationPoints
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_maxQueryContinuationPoints; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_maxQueryContinuationPoints != null)
                    {
                        RemoveChild(m_maxQueryContinuationPoints);
                    }

                    m_maxQueryContinuationPoints = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceMaxQueryContinuationPoints(Property<ushort> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                MaxQueryContinuationPoints = replacement;

                MaxQueryContinuationPoints.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.MaxQueryContinuationPoints, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerCapabilitiesType_MaxQueryContinuationPoints,
                    null);
            }
        }
        #endregion

        #region MaxHistoryContinuationPoints
        /// <summary>
        /// A description for the MaxHistoryContinuationPoints Property.
        /// </summary>
        public Property<ushort> MaxHistoryContinuationPoints
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_maxHistoryContinuationPoints; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_maxHistoryContinuationPoints != null)
                    {
                        RemoveChild(m_maxHistoryContinuationPoints);
                    }

                    m_maxHistoryContinuationPoints = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceMaxHistoryContinuationPoints(Property<ushort> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                MaxHistoryContinuationPoints = replacement;

                MaxHistoryContinuationPoints.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.MaxHistoryContinuationPoints, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerCapabilitiesType_MaxHistoryContinuationPoints,
                    null);
            }
        }
        #endregion

        #region SoftwareCertificates
        /// <summary>
        /// A description for the SoftwareCertificates Property.
        /// </summary>
        public Property<IList<SoftwareCertificate>> SoftwareCertificates
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_softwareCertificates; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_softwareCertificates != null)
                    {
                        RemoveChild(m_softwareCertificates);
                    }

                    m_softwareCertificates = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSoftwareCertificates(Property<IList<SoftwareCertificate>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SoftwareCertificates = replacement;

                SoftwareCertificates.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SoftwareCertificates, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerCapabilitiesType_SoftwareCertificates,
                    null);
            }
        }
        #endregion

        #region ModellingRules
        /// <summary>
        /// A description for the ModellingRules Object.
        /// </summary>
        public Folder ModellingRules
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_modellingRules; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_modellingRules != null)
                    {
                        RemoveChild(m_modellingRules);
                    }

                    m_modellingRules = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceModellingRules(Folder replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ModellingRules = replacement;

                ModellingRules.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ModellingRules, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ServerCapabilitiesType_ModellingRules,
                    null);
            }
        }
        #endregion

        #region AggregateFunctions
        /// <summary>
        /// A description for the AggregateFunctions Object.
        /// </summary>
        public Folder AggregateFunctions
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_aggregateFunctions; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_aggregateFunctions != null)
                    {
                        RemoveChild(m_aggregateFunctions);
                    }

                    m_aggregateFunctions = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceAggregateFunctions(Folder replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                AggregateFunctions = replacement;

                AggregateFunctions.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.AggregateFunctions, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ServerCapabilitiesType_AggregateFunctions,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                ServerCapabilitiesType type = source as ServerCapabilitiesType;

                if (type != null && type.ServerProfileArray != null)
                {
                    ServerProfileArray = (Property<IList<string>>)type.ServerProfileArray.Clone(this);
                    ServerProfileArray.Initialize(type.ServerProfileArray);
                }

                if (type != null && type.LocaleIdArray != null)
                {
                    LocaleIdArray = (Property<IList<string>>)type.LocaleIdArray.Clone(this);
                    LocaleIdArray.Initialize(type.LocaleIdArray);
                }

                if (type != null && type.MinSupportedSampleRate != null)
                {
                    MinSupportedSampleRate = (Property<double>)type.MinSupportedSampleRate.Clone(this);
                    MinSupportedSampleRate.Initialize(type.MinSupportedSampleRate);
                }

                if (type != null && type.MaxBrowseContinuationPoints != null)
                {
                    MaxBrowseContinuationPoints = (Property<ushort>)type.MaxBrowseContinuationPoints.Clone(this);
                    MaxBrowseContinuationPoints.Initialize(type.MaxBrowseContinuationPoints);
                }

                if (type != null && type.MaxQueryContinuationPoints != null)
                {
                    MaxQueryContinuationPoints = (Property<ushort>)type.MaxQueryContinuationPoints.Clone(this);
                    MaxQueryContinuationPoints.Initialize(type.MaxQueryContinuationPoints);
                }

                if (type != null && type.MaxHistoryContinuationPoints != null)
                {
                    MaxHistoryContinuationPoints = (Property<ushort>)type.MaxHistoryContinuationPoints.Clone(this);
                    MaxHistoryContinuationPoints.Initialize(type.MaxHistoryContinuationPoints);
                }

                if (type != null && type.SoftwareCertificates != null)
                {
                    SoftwareCertificates = (Property<IList<SoftwareCertificate>>)type.SoftwareCertificates.Clone(this);
                    SoftwareCertificates.Initialize(type.SoftwareCertificates);
                }

                if (type != null && type.ModellingRules != null)
                {
                    ModellingRules = (Folder)type.ModellingRules.Clone(this);
                    ModellingRules.Initialize(type.ModellingRules);
                }

                if (type != null && type.AggregateFunctions != null)
                {
                    AggregateFunctions = (Folder)type.AggregateFunctions.Clone(this);
                    AggregateFunctions.Initialize(type.AggregateFunctions);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_serverProfileArray = Property<IList<string>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ServerCapabilitiesType_ServerProfileArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ServerProfileArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerCapabilitiesType_ServerProfileArray);

            m_localeIdArray = Property<IList<string>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ServerCapabilitiesType_LocaleIdArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.LocaleIdArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerCapabilitiesType_LocaleIdArray);

            m_minSupportedSampleRate = Property<double>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ServerCapabilitiesType_MinSupportedSampleRate, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.MinSupportedSampleRate, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerCapabilitiesType_MinSupportedSampleRate);

            m_maxBrowseContinuationPoints = Property<ushort>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ServerCapabilitiesType_MaxBrowseContinuationPoints, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.MaxBrowseContinuationPoints, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerCapabilitiesType_MaxBrowseContinuationPoints);

            m_maxQueryContinuationPoints = Property<ushort>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ServerCapabilitiesType_MaxQueryContinuationPoints, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.MaxQueryContinuationPoints, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerCapabilitiesType_MaxQueryContinuationPoints);

            m_maxHistoryContinuationPoints = Property<ushort>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ServerCapabilitiesType_MaxHistoryContinuationPoints, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.MaxHistoryContinuationPoints, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerCapabilitiesType_MaxHistoryContinuationPoints);

            m_softwareCertificates = Property<IList<SoftwareCertificate>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ServerCapabilitiesType_SoftwareCertificates, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SoftwareCertificates, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerCapabilitiesType_SoftwareCertificates);

            m_modellingRules = Folder.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ServerCapabilitiesType_ModellingRules, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ModellingRules, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ServerCapabilitiesType_ModellingRules);

            m_aggregateFunctions = Folder.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ServerCapabilitiesType_AggregateFunctions, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.AggregateFunctions, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ServerCapabilitiesType_AggregateFunctions);
        }
        #endregion

        #region Private Fields
        Property<IList<string>> m_serverProfileArray;
        Property<IList<string>> m_localeIdArray;
        Property<double> m_minSupportedSampleRate;
        Property<ushort> m_maxBrowseContinuationPoints;
        Property<ushort> m_maxQueryContinuationPoints;
        Property<ushort> m_maxHistoryContinuationPoints;
        Property<IList<SoftwareCertificate>> m_softwareCertificates;
        Folder m_modellingRules;
        Folder m_aggregateFunctions;
        #endregion
    }
    #endregion

    #region ServerCapabilities Class
    /// <summary>
    /// Represents an instance of the ServerCapabilitiesType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class ServerCapabilities : ObjectSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected ServerCapabilities(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = ServerCapabilitiesType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new ServerCapabilities Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            ServerCapabilities instance = new ServerCapabilities(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new ServerCapabilities Construct(IServerInternal server)
        {
            ServerCapabilities instance = new ServerCapabilities(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                ServerCapabilities clone = new ServerCapabilities(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region ServerProfileArray
        /// <summary>
        /// A description for the ServerProfileArray Property.
        /// </summary>
        public Property<IList<string>> ServerProfileArray
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_serverProfileArray; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_serverProfileArray != null)
                    {
                        RemoveChild(m_serverProfileArray);
                    }

                    m_serverProfileArray = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceServerProfileArray(Property<IList<string>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ServerProfileArray = replacement;

                ServerProfileArray.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ServerProfileArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerCapabilitiesType_ServerProfileArray,
                    null);
            }
        }
        #endregion

        #region LocaleIdArray
        /// <summary>
        /// A description for the LocaleIdArray Property.
        /// </summary>
        public Property<IList<string>> LocaleIdArray
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_localeIdArray; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_localeIdArray != null)
                    {
                        RemoveChild(m_localeIdArray);
                    }

                    m_localeIdArray = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceLocaleIdArray(Property<IList<string>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                LocaleIdArray = replacement;

                LocaleIdArray.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.LocaleIdArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerCapabilitiesType_LocaleIdArray,
                    null);
            }
        }
        #endregion

        #region MinSupportedSampleRate
        /// <summary>
        /// A description for the MinSupportedSampleRate Property.
        /// </summary>
        public Property<double> MinSupportedSampleRate
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_minSupportedSampleRate; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_minSupportedSampleRate != null)
                    {
                        RemoveChild(m_minSupportedSampleRate);
                    }

                    m_minSupportedSampleRate = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceMinSupportedSampleRate(Property<double> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                MinSupportedSampleRate = replacement;

                MinSupportedSampleRate.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.MinSupportedSampleRate, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerCapabilitiesType_MinSupportedSampleRate,
                    null);
            }
        }
        #endregion

        #region MaxBrowseContinuationPoints
        /// <summary>
        /// A description for the MaxBrowseContinuationPoints Property.
        /// </summary>
        public Property<ushort> MaxBrowseContinuationPoints
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_maxBrowseContinuationPoints; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_maxBrowseContinuationPoints != null)
                    {
                        RemoveChild(m_maxBrowseContinuationPoints);
                    }

                    m_maxBrowseContinuationPoints = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceMaxBrowseContinuationPoints(Property<ushort> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                MaxBrowseContinuationPoints = replacement;

                MaxBrowseContinuationPoints.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.MaxBrowseContinuationPoints, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerCapabilitiesType_MaxBrowseContinuationPoints,
                    null);
            }
        }
        #endregion

        #region MaxQueryContinuationPoints
        /// <summary>
        /// A description for the MaxQueryContinuationPoints Property.
        /// </summary>
        public Property<ushort> MaxQueryContinuationPoints
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_maxQueryContinuationPoints; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_maxQueryContinuationPoints != null)
                    {
                        RemoveChild(m_maxQueryContinuationPoints);
                    }

                    m_maxQueryContinuationPoints = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceMaxQueryContinuationPoints(Property<ushort> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                MaxQueryContinuationPoints = replacement;

                MaxQueryContinuationPoints.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.MaxQueryContinuationPoints, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerCapabilitiesType_MaxQueryContinuationPoints,
                    null);
            }
        }
        #endregion

        #region MaxHistoryContinuationPoints
        /// <summary>
        /// A description for the MaxHistoryContinuationPoints Property.
        /// </summary>
        public Property<ushort> MaxHistoryContinuationPoints
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_maxHistoryContinuationPoints; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_maxHistoryContinuationPoints != null)
                    {
                        RemoveChild(m_maxHistoryContinuationPoints);
                    }

                    m_maxHistoryContinuationPoints = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceMaxHistoryContinuationPoints(Property<ushort> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                MaxHistoryContinuationPoints = replacement;

                MaxHistoryContinuationPoints.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.MaxHistoryContinuationPoints, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerCapabilitiesType_MaxHistoryContinuationPoints,
                    null);
            }
        }
        #endregion

        #region SoftwareCertificates
        /// <summary>
        /// A description for the SoftwareCertificates Property.
        /// </summary>
        public Property<IList<SoftwareCertificate>> SoftwareCertificates
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_softwareCertificates; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_softwareCertificates != null)
                    {
                        RemoveChild(m_softwareCertificates);
                    }

                    m_softwareCertificates = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSoftwareCertificates(Property<IList<SoftwareCertificate>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SoftwareCertificates = replacement;

                SoftwareCertificates.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SoftwareCertificates, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerCapabilitiesType_SoftwareCertificates,
                    null);
            }
        }
        #endregion

        #region ModellingRules
        /// <summary>
        /// A description for the ModellingRules Object.
        /// </summary>
        public Folder ModellingRules
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_modellingRules; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_modellingRules != null)
                    {
                        RemoveChild(m_modellingRules);
                    }

                    m_modellingRules = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceModellingRules(Folder replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ModellingRules = replacement;

                ModellingRules.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ModellingRules, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ServerCapabilitiesType_ModellingRules,
                    null);
            }
        }
        #endregion

        #region AggregateFunctions
        /// <summary>
        /// A description for the AggregateFunctions Object.
        /// </summary>
        public Folder AggregateFunctions
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_aggregateFunctions; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_aggregateFunctions != null)
                    {
                        RemoveChild(m_aggregateFunctions);
                    }

                    m_aggregateFunctions = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceAggregateFunctions(Folder replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                AggregateFunctions = replacement;

                AggregateFunctions.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.AggregateFunctions, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ServerCapabilitiesType_AggregateFunctions,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                ServerCapabilities instance = source as ServerCapabilities;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                ServerCapabilitiesType type = source as ServerCapabilitiesType;

                if (type != null && type.ServerProfileArray != null)
                {
                    ServerProfileArray = (Property<IList<string>>)type.ServerProfileArray.Clone(this);
                    ServerProfileArray.Initialize(type.ServerProfileArray);
                }
                else if (instance != null && instance.ServerProfileArray != null)
                {
                    ServerProfileArray = (Property<IList<string>>)instance.ServerProfileArray.Clone(this);
                    ServerProfileArray.Initialize(instance.ServerProfileArray);
                }

                if (type != null && type.LocaleIdArray != null)
                {
                    LocaleIdArray = (Property<IList<string>>)type.LocaleIdArray.Clone(this);
                    LocaleIdArray.Initialize(type.LocaleIdArray);
                }
                else if (instance != null && instance.LocaleIdArray != null)
                {
                    LocaleIdArray = (Property<IList<string>>)instance.LocaleIdArray.Clone(this);
                    LocaleIdArray.Initialize(instance.LocaleIdArray);
                }

                if (type != null && type.MinSupportedSampleRate != null)
                {
                    MinSupportedSampleRate = (Property<double>)type.MinSupportedSampleRate.Clone(this);
                    MinSupportedSampleRate.Initialize(type.MinSupportedSampleRate);
                }
                else if (instance != null && instance.MinSupportedSampleRate != null)
                {
                    MinSupportedSampleRate = (Property<double>)instance.MinSupportedSampleRate.Clone(this);
                    MinSupportedSampleRate.Initialize(instance.MinSupportedSampleRate);
                }

                if (type != null && type.MaxBrowseContinuationPoints != null)
                {
                    MaxBrowseContinuationPoints = (Property<ushort>)type.MaxBrowseContinuationPoints.Clone(this);
                    MaxBrowseContinuationPoints.Initialize(type.MaxBrowseContinuationPoints);
                }
                else if (instance != null && instance.MaxBrowseContinuationPoints != null)
                {
                    MaxBrowseContinuationPoints = (Property<ushort>)instance.MaxBrowseContinuationPoints.Clone(this);
                    MaxBrowseContinuationPoints.Initialize(instance.MaxBrowseContinuationPoints);
                }

                if (type != null && type.MaxQueryContinuationPoints != null)
                {
                    MaxQueryContinuationPoints = (Property<ushort>)type.MaxQueryContinuationPoints.Clone(this);
                    MaxQueryContinuationPoints.Initialize(type.MaxQueryContinuationPoints);
                }
                else if (instance != null && instance.MaxQueryContinuationPoints != null)
                {
                    MaxQueryContinuationPoints = (Property<ushort>)instance.MaxQueryContinuationPoints.Clone(this);
                    MaxQueryContinuationPoints.Initialize(instance.MaxQueryContinuationPoints);
                }

                if (type != null && type.MaxHistoryContinuationPoints != null)
                {
                    MaxHistoryContinuationPoints = (Property<ushort>)type.MaxHistoryContinuationPoints.Clone(this);
                    MaxHistoryContinuationPoints.Initialize(type.MaxHistoryContinuationPoints);
                }
                else if (instance != null && instance.MaxHistoryContinuationPoints != null)
                {
                    MaxHistoryContinuationPoints = (Property<ushort>)instance.MaxHistoryContinuationPoints.Clone(this);
                    MaxHistoryContinuationPoints.Initialize(instance.MaxHistoryContinuationPoints);
                }

                if (type != null && type.SoftwareCertificates != null)
                {
                    SoftwareCertificates = (Property<IList<SoftwareCertificate>>)type.SoftwareCertificates.Clone(this);
                    SoftwareCertificates.Initialize(type.SoftwareCertificates);
                }
                else if (instance != null && instance.SoftwareCertificates != null)
                {
                    SoftwareCertificates = (Property<IList<SoftwareCertificate>>)instance.SoftwareCertificates.Clone(this);
                    SoftwareCertificates.Initialize(instance.SoftwareCertificates);
                }

                if (type != null && type.ModellingRules != null)
                {
                    ModellingRules = (Folder)type.ModellingRules.Clone(this);
                    ModellingRules.Initialize(type.ModellingRules);
                }
                else if (instance != null && instance.ModellingRules != null)
                {
                    ModellingRules = (Folder)instance.ModellingRules.Clone(this);
                    ModellingRules.Initialize(instance.ModellingRules);
                }

                if (type != null && type.AggregateFunctions != null)
                {
                    AggregateFunctions = (Folder)type.AggregateFunctions.Clone(this);
                    AggregateFunctions.Initialize(type.AggregateFunctions);
                }
                else if (instance != null && instance.AggregateFunctions != null)
                {
                    AggregateFunctions = (Folder)instance.AggregateFunctions.Clone(this);
                    AggregateFunctions.Initialize(instance.AggregateFunctions);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_serverProfileArray = Property<IList<string>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ServerProfileArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerCapabilitiesType_ServerProfileArray);

            m_localeIdArray = Property<IList<string>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.LocaleIdArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerCapabilitiesType_LocaleIdArray);

            m_minSupportedSampleRate = Property<double>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.MinSupportedSampleRate, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerCapabilitiesType_MinSupportedSampleRate);

            m_maxBrowseContinuationPoints = Property<ushort>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.MaxBrowseContinuationPoints, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerCapabilitiesType_MaxBrowseContinuationPoints);

            m_maxQueryContinuationPoints = Property<ushort>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.MaxQueryContinuationPoints, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerCapabilitiesType_MaxQueryContinuationPoints);

            m_maxHistoryContinuationPoints = Property<ushort>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.MaxHistoryContinuationPoints, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerCapabilitiesType_MaxHistoryContinuationPoints);

            m_softwareCertificates = Property<IList<SoftwareCertificate>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.SoftwareCertificates, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerCapabilitiesType_SoftwareCertificates);

            m_modellingRules = Folder.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ModellingRules, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ServerCapabilitiesType_ModellingRules);

            m_aggregateFunctions = Folder.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.AggregateFunctions, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ServerCapabilitiesType_AggregateFunctions);
        }
        #endregion

        #region Private Fields
        private ServerCapabilitiesType m_typeDefinition;
        Property<IList<string>> m_serverProfileArray;
        Property<IList<string>> m_localeIdArray;
        Property<double> m_minSupportedSampleRate;
        Property<ushort> m_maxBrowseContinuationPoints;
        Property<ushort> m_maxQueryContinuationPoints;
        Property<ushort> m_maxHistoryContinuationPoints;
        Property<IList<SoftwareCertificate>> m_softwareCertificates;
        Folder m_modellingRules;
        Folder m_aggregateFunctions;
        #endregion
    }
    #endregion

    #region ServerDiagnosticsType Class
    /// <summary>
    /// Represents the ServerDiagnosticsType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class ServerDiagnosticsType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public ServerDiagnosticsType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.ServerDiagnosticsType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.ServerDiagnosticsType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseObjectType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new ServerDiagnosticsType FindSource(IServerInternal server)
        {
            ServerDiagnosticsType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.ServerDiagnosticsType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as ServerDiagnosticsType;

                if (type != null)
                {
                    return type;
                }

                type = new ServerDiagnosticsType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                ServerDiagnosticsType clone = new ServerDiagnosticsType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region ServerDiagnosticsSummary
        /// <summary>
        /// A description for the ServerDiagnosticsSummary Variable.
        /// </summary>
        public ServerDiagnosticsSummary ServerDiagnosticsSummary
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_serverDiagnosticsSummary; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_serverDiagnosticsSummary != null)
                    {
                        RemoveChild(m_serverDiagnosticsSummary);
                    }

                    m_serverDiagnosticsSummary = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceServerDiagnosticsSummary(ServerDiagnosticsSummary replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ServerDiagnosticsSummary = replacement;

                ServerDiagnosticsSummary.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ServerDiagnosticsSummary, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerDiagnosticsType_ServerDiagnosticsSummary,
                    null);
            }
        }
        #endregion

        #region SamplingRateDiagnosticsArray
        /// <summary>
        /// A description for the SamplingRateDiagnosticsArray Variable.
        /// </summary>
        public SamplingRateDiagnosticsArray SamplingRateDiagnosticsArray
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_samplingRateDiagnosticsArray; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_samplingRateDiagnosticsArray != null)
                    {
                        RemoveChild(m_samplingRateDiagnosticsArray);
                    }

                    m_samplingRateDiagnosticsArray = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSamplingRateDiagnosticsArray(SamplingRateDiagnosticsArray replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SamplingRateDiagnosticsArray = replacement;

                SamplingRateDiagnosticsArray.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SamplingRateDiagnosticsArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerDiagnosticsType_SamplingRateDiagnosticsArray,
                    null);
            }
        }
        #endregion

        #region SubscriptionDiagnosticsArray
        /// <summary>
        /// A description for the SubscriptionDiagnosticsArray Variable.
        /// </summary>
        public SubscriptionDiagnosticsArray SubscriptionDiagnosticsArray
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_subscriptionDiagnosticsArray; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_subscriptionDiagnosticsArray != null)
                    {
                        RemoveChild(m_subscriptionDiagnosticsArray);
                    }

                    m_subscriptionDiagnosticsArray = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSubscriptionDiagnosticsArray(SubscriptionDiagnosticsArray replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SubscriptionDiagnosticsArray = replacement;

                SubscriptionDiagnosticsArray.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SubscriptionDiagnosticsArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerDiagnosticsType_SubscriptionDiagnosticsArray,
                    null);
            }
        }
        #endregion

        #region SessionsDiagnosticsSummary
        /// <summary>
        /// A description for the SessionsDiagnosticsSummary Object.
        /// </summary>
        public SessionsDiagnosticsSummary SessionsDiagnosticsSummary
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_sessionsDiagnosticsSummary; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_sessionsDiagnosticsSummary != null)
                    {
                        RemoveChild(m_sessionsDiagnosticsSummary);
                    }

                    m_sessionsDiagnosticsSummary = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSessionsDiagnosticsSummary(SessionsDiagnosticsSummary replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SessionsDiagnosticsSummary = replacement;

                SessionsDiagnosticsSummary.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SessionsDiagnosticsSummary, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ServerDiagnosticsType_SessionsDiagnosticsSummary,
                    null);
            }
        }
        #endregion

        #region EnabledFlag
        /// <summary>
        /// A description for the EnabledFlag Property.
        /// </summary>
        public Property<bool> EnabledFlag
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_enabledFlag; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_enabledFlag != null)
                    {
                        RemoveChild(m_enabledFlag);
                    }

                    m_enabledFlag = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceEnabledFlag(Property<bool> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                EnabledFlag = replacement;

                EnabledFlag.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.EnabledFlag, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerDiagnosticsType_EnabledFlag,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                ServerDiagnosticsType type = source as ServerDiagnosticsType;

                if (type != null && type.ServerDiagnosticsSummary != null)
                {
                    ServerDiagnosticsSummary = (ServerDiagnosticsSummary)type.ServerDiagnosticsSummary.Clone(this);
                    ServerDiagnosticsSummary.Initialize(type.ServerDiagnosticsSummary);
                }

                if (type != null && type.SamplingRateDiagnosticsArray != null)
                {
                    SamplingRateDiagnosticsArray = (SamplingRateDiagnosticsArray)type.SamplingRateDiagnosticsArray.Clone(this);
                    SamplingRateDiagnosticsArray.Initialize(type.SamplingRateDiagnosticsArray);
                }

                if (type != null && type.SubscriptionDiagnosticsArray != null)
                {
                    SubscriptionDiagnosticsArray = (SubscriptionDiagnosticsArray)type.SubscriptionDiagnosticsArray.Clone(this);
                    SubscriptionDiagnosticsArray.Initialize(type.SubscriptionDiagnosticsArray);
                }

                if (type != null && type.SessionsDiagnosticsSummary != null)
                {
                    SessionsDiagnosticsSummary = (SessionsDiagnosticsSummary)type.SessionsDiagnosticsSummary.Clone(this);
                    SessionsDiagnosticsSummary.Initialize(type.SessionsDiagnosticsSummary);
                }

                if (type != null && type.EnabledFlag != null)
                {
                    EnabledFlag = (Property<bool>)type.EnabledFlag.Clone(this);
                    EnabledFlag.Initialize(type.EnabledFlag);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_serverDiagnosticsSummary = ServerDiagnosticsSummary.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ServerDiagnosticsType_ServerDiagnosticsSummary, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ServerDiagnosticsSummary, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerDiagnosticsType_ServerDiagnosticsSummary);

            m_samplingRateDiagnosticsArray = SamplingRateDiagnosticsArray.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ServerDiagnosticsType_SamplingRateDiagnosticsArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SamplingRateDiagnosticsArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerDiagnosticsType_SamplingRateDiagnosticsArray);

            m_subscriptionDiagnosticsArray = SubscriptionDiagnosticsArray.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ServerDiagnosticsType_SubscriptionDiagnosticsArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SubscriptionDiagnosticsArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerDiagnosticsType_SubscriptionDiagnosticsArray);

            m_sessionsDiagnosticsSummary = SessionsDiagnosticsSummary.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ServerDiagnosticsType_SessionsDiagnosticsSummary, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SessionsDiagnosticsSummary, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ServerDiagnosticsType_SessionsDiagnosticsSummary);

            m_enabledFlag = Property<bool>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ServerDiagnosticsType_EnabledFlag, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.EnabledFlag, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerDiagnosticsType_EnabledFlag);
        }
        #endregion

        #region Private Fields
        ServerDiagnosticsSummary m_serverDiagnosticsSummary;
        SamplingRateDiagnosticsArray m_samplingRateDiagnosticsArray;
        SubscriptionDiagnosticsArray m_subscriptionDiagnosticsArray;
        SessionsDiagnosticsSummary m_sessionsDiagnosticsSummary;
        Property<bool> m_enabledFlag;
        #endregion
    }
    #endregion

    #region ServerDiagnostics Class
    /// <summary>
    /// Represents an instance of the ServerDiagnosticsType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class ServerDiagnostics : ObjectSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected ServerDiagnostics(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = ServerDiagnosticsType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new ServerDiagnostics Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            ServerDiagnostics instance = new ServerDiagnostics(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new ServerDiagnostics Construct(IServerInternal server)
        {
            ServerDiagnostics instance = new ServerDiagnostics(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                ServerDiagnostics clone = new ServerDiagnostics(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region ServerDiagnosticsSummary
        /// <summary>
        /// A description for the ServerDiagnosticsSummary Variable.
        /// </summary>
        public ServerDiagnosticsSummary ServerDiagnosticsSummary
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_serverDiagnosticsSummary; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_serverDiagnosticsSummary != null)
                    {
                        RemoveChild(m_serverDiagnosticsSummary);
                    }

                    m_serverDiagnosticsSummary = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceServerDiagnosticsSummary(ServerDiagnosticsSummary replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ServerDiagnosticsSummary = replacement;

                ServerDiagnosticsSummary.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ServerDiagnosticsSummary, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerDiagnosticsType_ServerDiagnosticsSummary,
                    null);
            }
        }
        #endregion

        #region SamplingRateDiagnosticsArray
        /// <summary>
        /// A description for the SamplingRateDiagnosticsArray Variable.
        /// </summary>
        public SamplingRateDiagnosticsArray SamplingRateDiagnosticsArray
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_samplingRateDiagnosticsArray; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_samplingRateDiagnosticsArray != null)
                    {
                        RemoveChild(m_samplingRateDiagnosticsArray);
                    }

                    m_samplingRateDiagnosticsArray = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSamplingRateDiagnosticsArray(SamplingRateDiagnosticsArray replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SamplingRateDiagnosticsArray = replacement;

                SamplingRateDiagnosticsArray.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SamplingRateDiagnosticsArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerDiagnosticsType_SamplingRateDiagnosticsArray,
                    null);
            }
        }
        #endregion

        #region SubscriptionDiagnosticsArray
        /// <summary>
        /// A description for the SubscriptionDiagnosticsArray Variable.
        /// </summary>
        public SubscriptionDiagnosticsArray SubscriptionDiagnosticsArray
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_subscriptionDiagnosticsArray; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_subscriptionDiagnosticsArray != null)
                    {
                        RemoveChild(m_subscriptionDiagnosticsArray);
                    }

                    m_subscriptionDiagnosticsArray = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSubscriptionDiagnosticsArray(SubscriptionDiagnosticsArray replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SubscriptionDiagnosticsArray = replacement;

                SubscriptionDiagnosticsArray.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SubscriptionDiagnosticsArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerDiagnosticsType_SubscriptionDiagnosticsArray,
                    null);
            }
        }
        #endregion

        #region SessionsDiagnosticsSummary
        /// <summary>
        /// A description for the SessionsDiagnosticsSummary Object.
        /// </summary>
        public SessionsDiagnosticsSummary SessionsDiagnosticsSummary
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_sessionsDiagnosticsSummary; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_sessionsDiagnosticsSummary != null)
                    {
                        RemoveChild(m_sessionsDiagnosticsSummary);
                    }

                    m_sessionsDiagnosticsSummary = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSessionsDiagnosticsSummary(SessionsDiagnosticsSummary replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SessionsDiagnosticsSummary = replacement;

                SessionsDiagnosticsSummary.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SessionsDiagnosticsSummary, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ServerDiagnosticsType_SessionsDiagnosticsSummary,
                    null);
            }
        }
        #endregion

        #region EnabledFlag
        /// <summary>
        /// A description for the EnabledFlag Property.
        /// </summary>
        public Property<bool> EnabledFlag
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_enabledFlag; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_enabledFlag != null)
                    {
                        RemoveChild(m_enabledFlag);
                    }

                    m_enabledFlag = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceEnabledFlag(Property<bool> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                EnabledFlag = replacement;

                EnabledFlag.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.EnabledFlag, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerDiagnosticsType_EnabledFlag,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                ServerDiagnostics instance = source as ServerDiagnostics;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                ServerDiagnosticsType type = source as ServerDiagnosticsType;

                if (type != null && type.ServerDiagnosticsSummary != null)
                {
                    ServerDiagnosticsSummary = (ServerDiagnosticsSummary)type.ServerDiagnosticsSummary.Clone(this);
                    ServerDiagnosticsSummary.Initialize(type.ServerDiagnosticsSummary);
                }
                else if (instance != null && instance.ServerDiagnosticsSummary != null)
                {
                    ServerDiagnosticsSummary = (ServerDiagnosticsSummary)instance.ServerDiagnosticsSummary.Clone(this);
                    ServerDiagnosticsSummary.Initialize(instance.ServerDiagnosticsSummary);
                }

                if (type != null && type.SamplingRateDiagnosticsArray != null)
                {
                    SamplingRateDiagnosticsArray = (SamplingRateDiagnosticsArray)type.SamplingRateDiagnosticsArray.Clone(this);
                    SamplingRateDiagnosticsArray.Initialize(type.SamplingRateDiagnosticsArray);
                }
                else if (instance != null && instance.SamplingRateDiagnosticsArray != null)
                {
                    SamplingRateDiagnosticsArray = (SamplingRateDiagnosticsArray)instance.SamplingRateDiagnosticsArray.Clone(this);
                    SamplingRateDiagnosticsArray.Initialize(instance.SamplingRateDiagnosticsArray);
                }

                if (type != null && type.SubscriptionDiagnosticsArray != null)
                {
                    SubscriptionDiagnosticsArray = (SubscriptionDiagnosticsArray)type.SubscriptionDiagnosticsArray.Clone(this);
                    SubscriptionDiagnosticsArray.Initialize(type.SubscriptionDiagnosticsArray);
                }
                else if (instance != null && instance.SubscriptionDiagnosticsArray != null)
                {
                    SubscriptionDiagnosticsArray = (SubscriptionDiagnosticsArray)instance.SubscriptionDiagnosticsArray.Clone(this);
                    SubscriptionDiagnosticsArray.Initialize(instance.SubscriptionDiagnosticsArray);
                }

                if (type != null && type.SessionsDiagnosticsSummary != null)
                {
                    SessionsDiagnosticsSummary = (SessionsDiagnosticsSummary)type.SessionsDiagnosticsSummary.Clone(this);
                    SessionsDiagnosticsSummary.Initialize(type.SessionsDiagnosticsSummary);
                }
                else if (instance != null && instance.SessionsDiagnosticsSummary != null)
                {
                    SessionsDiagnosticsSummary = (SessionsDiagnosticsSummary)instance.SessionsDiagnosticsSummary.Clone(this);
                    SessionsDiagnosticsSummary.Initialize(instance.SessionsDiagnosticsSummary);
                }

                if (type != null && type.EnabledFlag != null)
                {
                    EnabledFlag = (Property<bool>)type.EnabledFlag.Clone(this);
                    EnabledFlag.Initialize(type.EnabledFlag);
                }
                else if (instance != null && instance.EnabledFlag != null)
                {
                    EnabledFlag = (Property<bool>)instance.EnabledFlag.Clone(this);
                    EnabledFlag.Initialize(instance.EnabledFlag);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_serverDiagnosticsSummary = ServerDiagnosticsSummary.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ServerDiagnosticsSummary, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerDiagnosticsType_ServerDiagnosticsSummary);

            m_samplingRateDiagnosticsArray = SamplingRateDiagnosticsArray.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.SamplingRateDiagnosticsArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerDiagnosticsType_SamplingRateDiagnosticsArray);

            m_subscriptionDiagnosticsArray = SubscriptionDiagnosticsArray.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.SubscriptionDiagnosticsArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerDiagnosticsType_SubscriptionDiagnosticsArray);

            m_sessionsDiagnosticsSummary = SessionsDiagnosticsSummary.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.SessionsDiagnosticsSummary, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ServerDiagnosticsType_SessionsDiagnosticsSummary);

            m_enabledFlag = Property<bool>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.EnabledFlag, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerDiagnosticsType_EnabledFlag);
        }
        #endregion

        #region Private Fields
        private ServerDiagnosticsType m_typeDefinition;
        ServerDiagnosticsSummary m_serverDiagnosticsSummary;
        SamplingRateDiagnosticsArray m_samplingRateDiagnosticsArray;
        SubscriptionDiagnosticsArray m_subscriptionDiagnosticsArray;
        SessionsDiagnosticsSummary m_sessionsDiagnosticsSummary;
        Property<bool> m_enabledFlag;
        #endregion
    }
    #endregion

    #region SessionsDiagnosticsSummaryType Class
    /// <summary>
    /// Represents the SessionsDiagnosticsSummaryType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class SessionsDiagnosticsSummaryType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public SessionsDiagnosticsSummaryType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.SessionsDiagnosticsSummaryType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.SessionsDiagnosticsSummaryType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseObjectType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new SessionsDiagnosticsSummaryType FindSource(IServerInternal server)
        {
            SessionsDiagnosticsSummaryType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.SessionsDiagnosticsSummaryType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as SessionsDiagnosticsSummaryType;

                if (type != null)
                {
                    return type;
                }

                type = new SessionsDiagnosticsSummaryType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                SessionsDiagnosticsSummaryType clone = new SessionsDiagnosticsSummaryType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region SessionDiagnosticsArray
        /// <summary>
        /// A description for the SessionDiagnosticsArray Variable.
        /// </summary>
        public SessionDiagnosticsArray SessionDiagnosticsArray
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_sessionDiagnosticsArray; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_sessionDiagnosticsArray != null)
                    {
                        RemoveChild(m_sessionDiagnosticsArray);
                    }

                    m_sessionDiagnosticsArray = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSessionDiagnosticsArray(SessionDiagnosticsArray replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SessionDiagnosticsArray = replacement;

                SessionDiagnosticsArray.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SessionDiagnosticsArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionsDiagnosticsSummaryType_SessionDiagnosticsArray,
                    null);
            }
        }
        #endregion

        #region SessionSecurityDiagnosticsArray
        /// <summary>
        /// A description for the SessionSecurityDiagnosticsArray Variable.
        /// </summary>
        public SessionSecurityDiagnosticsArray SessionSecurityDiagnosticsArray
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_sessionSecurityDiagnosticsArray; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_sessionSecurityDiagnosticsArray != null)
                    {
                        RemoveChild(m_sessionSecurityDiagnosticsArray);
                    }

                    m_sessionSecurityDiagnosticsArray = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSessionSecurityDiagnosticsArray(SessionSecurityDiagnosticsArray replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SessionSecurityDiagnosticsArray = replacement;

                SessionSecurityDiagnosticsArray.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SessionSecurityDiagnosticsArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionsDiagnosticsSummaryType_SessionSecurityDiagnosticsArray,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                SessionsDiagnosticsSummaryType type = source as SessionsDiagnosticsSummaryType;

                if (type != null && type.SessionDiagnosticsArray != null)
                {
                    SessionDiagnosticsArray = (SessionDiagnosticsArray)type.SessionDiagnosticsArray.Clone(this);
                    SessionDiagnosticsArray.Initialize(type.SessionDiagnosticsArray);
                }

                if (type != null && type.SessionSecurityDiagnosticsArray != null)
                {
                    SessionSecurityDiagnosticsArray = (SessionSecurityDiagnosticsArray)type.SessionSecurityDiagnosticsArray.Clone(this);
                    SessionSecurityDiagnosticsArray.Initialize(type.SessionSecurityDiagnosticsArray);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_sessionDiagnosticsArray = SessionDiagnosticsArray.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionsDiagnosticsSummaryType_SessionDiagnosticsArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SessionDiagnosticsArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionsDiagnosticsSummaryType_SessionDiagnosticsArray);

            m_sessionSecurityDiagnosticsArray = SessionSecurityDiagnosticsArray.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionsDiagnosticsSummaryType_SessionSecurityDiagnosticsArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SessionSecurityDiagnosticsArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionsDiagnosticsSummaryType_SessionSecurityDiagnosticsArray);
        }
        #endregion

        #region Private Fields
        SessionDiagnosticsArray m_sessionDiagnosticsArray;
        SessionSecurityDiagnosticsArray m_sessionSecurityDiagnosticsArray;
        #endregion
    }
    #endregion

    #region SessionsDiagnosticsSummary Class
    /// <summary>
    /// Represents an instance of the SessionsDiagnosticsSummaryType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class SessionsDiagnosticsSummary : ObjectSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected SessionsDiagnosticsSummary(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = SessionsDiagnosticsSummaryType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new SessionsDiagnosticsSummary Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            SessionsDiagnosticsSummary instance = new SessionsDiagnosticsSummary(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new SessionsDiagnosticsSummary Construct(IServerInternal server)
        {
            SessionsDiagnosticsSummary instance = new SessionsDiagnosticsSummary(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                SessionsDiagnosticsSummary clone = new SessionsDiagnosticsSummary(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region SessionDiagnosticsArray
        /// <summary>
        /// A description for the SessionDiagnosticsArray Variable.
        /// </summary>
        public SessionDiagnosticsArray SessionDiagnosticsArray
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_sessionDiagnosticsArray; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_sessionDiagnosticsArray != null)
                    {
                        RemoveChild(m_sessionDiagnosticsArray);
                    }

                    m_sessionDiagnosticsArray = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSessionDiagnosticsArray(SessionDiagnosticsArray replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SessionDiagnosticsArray = replacement;

                SessionDiagnosticsArray.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SessionDiagnosticsArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionsDiagnosticsSummaryType_SessionDiagnosticsArray,
                    null);
            }
        }
        #endregion

        #region SessionSecurityDiagnosticsArray
        /// <summary>
        /// A description for the SessionSecurityDiagnosticsArray Variable.
        /// </summary>
        public SessionSecurityDiagnosticsArray SessionSecurityDiagnosticsArray
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_sessionSecurityDiagnosticsArray; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_sessionSecurityDiagnosticsArray != null)
                    {
                        RemoveChild(m_sessionSecurityDiagnosticsArray);
                    }

                    m_sessionSecurityDiagnosticsArray = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSessionSecurityDiagnosticsArray(SessionSecurityDiagnosticsArray replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SessionSecurityDiagnosticsArray = replacement;

                SessionSecurityDiagnosticsArray.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SessionSecurityDiagnosticsArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionsDiagnosticsSummaryType_SessionSecurityDiagnosticsArray,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                SessionsDiagnosticsSummary instance = source as SessionsDiagnosticsSummary;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                SessionsDiagnosticsSummaryType type = source as SessionsDiagnosticsSummaryType;

                if (type != null && type.SessionDiagnosticsArray != null)
                {
                    SessionDiagnosticsArray = (SessionDiagnosticsArray)type.SessionDiagnosticsArray.Clone(this);
                    SessionDiagnosticsArray.Initialize(type.SessionDiagnosticsArray);
                }
                else if (instance != null && instance.SessionDiagnosticsArray != null)
                {
                    SessionDiagnosticsArray = (SessionDiagnosticsArray)instance.SessionDiagnosticsArray.Clone(this);
                    SessionDiagnosticsArray.Initialize(instance.SessionDiagnosticsArray);
                }

                if (type != null && type.SessionSecurityDiagnosticsArray != null)
                {
                    SessionSecurityDiagnosticsArray = (SessionSecurityDiagnosticsArray)type.SessionSecurityDiagnosticsArray.Clone(this);
                    SessionSecurityDiagnosticsArray.Initialize(type.SessionSecurityDiagnosticsArray);
                }
                else if (instance != null && instance.SessionSecurityDiagnosticsArray != null)
                {
                    SessionSecurityDiagnosticsArray = (SessionSecurityDiagnosticsArray)instance.SessionSecurityDiagnosticsArray.Clone(this);
                    SessionSecurityDiagnosticsArray.Initialize(instance.SessionSecurityDiagnosticsArray);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_sessionDiagnosticsArray = SessionDiagnosticsArray.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.SessionDiagnosticsArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionsDiagnosticsSummaryType_SessionDiagnosticsArray);

            m_sessionSecurityDiagnosticsArray = SessionSecurityDiagnosticsArray.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.SessionSecurityDiagnosticsArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionsDiagnosticsSummaryType_SessionSecurityDiagnosticsArray);
        }
        #endregion

        #region Private Fields
        private SessionsDiagnosticsSummaryType m_typeDefinition;
        SessionDiagnosticsArray m_sessionDiagnosticsArray;
        SessionSecurityDiagnosticsArray m_sessionSecurityDiagnosticsArray;
        #endregion
    }
    #endregion

    #region SessionDiagnosticsObjectType Class
    /// <summary>
    /// Represents the SessionDiagnosticsObjectType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class SessionDiagnosticsObjectType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public SessionDiagnosticsObjectType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.SessionDiagnosticsObjectType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.SessionDiagnosticsObjectType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseObjectType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new SessionDiagnosticsObjectType FindSource(IServerInternal server)
        {
            SessionDiagnosticsObjectType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.SessionDiagnosticsObjectType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as SessionDiagnosticsObjectType;

                if (type != null)
                {
                    return type;
                }

                type = new SessionDiagnosticsObjectType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                SessionDiagnosticsObjectType clone = new SessionDiagnosticsObjectType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region SessionDiagnostics
        /// <summary>
        /// A description for the SessionDiagnostics Variable.
        /// </summary>
        public SessionDiagnosticsVariable SessionDiagnostics
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_sessionDiagnostics; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_sessionDiagnostics != null)
                    {
                        RemoveChild(m_sessionDiagnostics);
                    }

                    m_sessionDiagnostics = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSessionDiagnostics(SessionDiagnosticsVariable replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SessionDiagnostics = replacement;

                SessionDiagnostics.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SessionDiagnostics, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsObjectType_SessionDiagnostics,
                    null);
            }
        }
        #endregion

        #region SessionSecurityDiagnostics
        /// <summary>
        /// A description for the SessionSecurityDiagnostics Variable.
        /// </summary>
        public SessionSecurityDiagnostics SessionSecurityDiagnostics
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_sessionSecurityDiagnostics; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_sessionSecurityDiagnostics != null)
                    {
                        RemoveChild(m_sessionSecurityDiagnostics);
                    }

                    m_sessionSecurityDiagnostics = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSessionSecurityDiagnostics(SessionSecurityDiagnostics replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SessionSecurityDiagnostics = replacement;

                SessionSecurityDiagnostics.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SessionSecurityDiagnostics, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsObjectType_SessionSecurityDiagnostics,
                    null);
            }
        }
        #endregion

        #region SubscriptionDiagnosticsArray
        /// <summary>
        /// A description for the SubscriptionDiagnosticsArray Variable.
        /// </summary>
        public SubscriptionDiagnosticsArray SubscriptionDiagnosticsArray
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_subscriptionDiagnosticsArray; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_subscriptionDiagnosticsArray != null)
                    {
                        RemoveChild(m_subscriptionDiagnosticsArray);
                    }

                    m_subscriptionDiagnosticsArray = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSubscriptionDiagnosticsArray(SubscriptionDiagnosticsArray replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SubscriptionDiagnosticsArray = replacement;

                SubscriptionDiagnosticsArray.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SubscriptionDiagnosticsArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsObjectType_SubscriptionDiagnosticsArray,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                SessionDiagnosticsObjectType type = source as SessionDiagnosticsObjectType;

                if (type != null && type.SessionDiagnostics != null)
                {
                    SessionDiagnostics = (SessionDiagnosticsVariable)type.SessionDiagnostics.Clone(this);
                    SessionDiagnostics.Initialize(type.SessionDiagnostics);
                }

                if (type != null && type.SessionSecurityDiagnostics != null)
                {
                    SessionSecurityDiagnostics = (SessionSecurityDiagnostics)type.SessionSecurityDiagnostics.Clone(this);
                    SessionSecurityDiagnostics.Initialize(type.SessionSecurityDiagnostics);
                }

                if (type != null && type.SubscriptionDiagnosticsArray != null)
                {
                    SubscriptionDiagnosticsArray = (SubscriptionDiagnosticsArray)type.SubscriptionDiagnosticsArray.Clone(this);
                    SubscriptionDiagnosticsArray.Initialize(type.SubscriptionDiagnosticsArray);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_sessionDiagnostics = SessionDiagnosticsVariable.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsObjectType_SessionDiagnostics, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SessionDiagnostics, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsObjectType_SessionDiagnostics);

            m_sessionSecurityDiagnostics = SessionSecurityDiagnostics.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsObjectType_SessionSecurityDiagnostics, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SessionSecurityDiagnostics, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsObjectType_SessionSecurityDiagnostics);

            m_subscriptionDiagnosticsArray = SubscriptionDiagnosticsArray.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsObjectType_SubscriptionDiagnosticsArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SubscriptionDiagnosticsArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsObjectType_SubscriptionDiagnosticsArray);
        }
        #endregion

        #region Private Fields
        SessionDiagnosticsVariable m_sessionDiagnostics;
        SessionSecurityDiagnostics m_sessionSecurityDiagnostics;
        SubscriptionDiagnosticsArray m_subscriptionDiagnosticsArray;
        #endregion
    }
    #endregion

    #region SessionDiagnosticsObject Class
    /// <summary>
    /// Represents an instance of the SessionDiagnosticsObjectType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class SessionDiagnosticsObject : ObjectSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected SessionDiagnosticsObject(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = SessionDiagnosticsObjectType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new SessionDiagnosticsObject Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            SessionDiagnosticsObject instance = new SessionDiagnosticsObject(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new SessionDiagnosticsObject Construct(IServerInternal server)
        {
            SessionDiagnosticsObject instance = new SessionDiagnosticsObject(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                SessionDiagnosticsObject clone = new SessionDiagnosticsObject(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region SessionDiagnostics
        /// <summary>
        /// A description for the SessionDiagnostics Variable.
        /// </summary>
        public SessionDiagnosticsVariable SessionDiagnostics
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_sessionDiagnostics; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_sessionDiagnostics != null)
                    {
                        RemoveChild(m_sessionDiagnostics);
                    }

                    m_sessionDiagnostics = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSessionDiagnostics(SessionDiagnosticsVariable replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SessionDiagnostics = replacement;

                SessionDiagnostics.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SessionDiagnostics, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsObjectType_SessionDiagnostics,
                    null);
            }
        }
        #endregion

        #region SessionSecurityDiagnostics
        /// <summary>
        /// A description for the SessionSecurityDiagnostics Variable.
        /// </summary>
        public SessionSecurityDiagnostics SessionSecurityDiagnostics
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_sessionSecurityDiagnostics; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_sessionSecurityDiagnostics != null)
                    {
                        RemoveChild(m_sessionSecurityDiagnostics);
                    }

                    m_sessionSecurityDiagnostics = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSessionSecurityDiagnostics(SessionSecurityDiagnostics replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SessionSecurityDiagnostics = replacement;

                SessionSecurityDiagnostics.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SessionSecurityDiagnostics, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsObjectType_SessionSecurityDiagnostics,
                    null);
            }
        }
        #endregion

        #region SubscriptionDiagnosticsArray
        /// <summary>
        /// A description for the SubscriptionDiagnosticsArray Variable.
        /// </summary>
        public SubscriptionDiagnosticsArray SubscriptionDiagnosticsArray
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_subscriptionDiagnosticsArray; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_subscriptionDiagnosticsArray != null)
                    {
                        RemoveChild(m_subscriptionDiagnosticsArray);
                    }

                    m_subscriptionDiagnosticsArray = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSubscriptionDiagnosticsArray(SubscriptionDiagnosticsArray replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SubscriptionDiagnosticsArray = replacement;

                SubscriptionDiagnosticsArray.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SubscriptionDiagnosticsArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsObjectType_SubscriptionDiagnosticsArray,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                SessionDiagnosticsObject instance = source as SessionDiagnosticsObject;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                SessionDiagnosticsObjectType type = source as SessionDiagnosticsObjectType;

                if (type != null && type.SessionDiagnostics != null)
                {
                    SessionDiagnostics = (SessionDiagnosticsVariable)type.SessionDiagnostics.Clone(this);
                    SessionDiagnostics.Initialize(type.SessionDiagnostics);
                }
                else if (instance != null && instance.SessionDiagnostics != null)
                {
                    SessionDiagnostics = (SessionDiagnosticsVariable)instance.SessionDiagnostics.Clone(this);
                    SessionDiagnostics.Initialize(instance.SessionDiagnostics);
                }

                if (type != null && type.SessionSecurityDiagnostics != null)
                {
                    SessionSecurityDiagnostics = (SessionSecurityDiagnostics)type.SessionSecurityDiagnostics.Clone(this);
                    SessionSecurityDiagnostics.Initialize(type.SessionSecurityDiagnostics);
                }
                else if (instance != null && instance.SessionSecurityDiagnostics != null)
                {
                    SessionSecurityDiagnostics = (SessionSecurityDiagnostics)instance.SessionSecurityDiagnostics.Clone(this);
                    SessionSecurityDiagnostics.Initialize(instance.SessionSecurityDiagnostics);
                }

                if (type != null && type.SubscriptionDiagnosticsArray != null)
                {
                    SubscriptionDiagnosticsArray = (SubscriptionDiagnosticsArray)type.SubscriptionDiagnosticsArray.Clone(this);
                    SubscriptionDiagnosticsArray.Initialize(type.SubscriptionDiagnosticsArray);
                }
                else if (instance != null && instance.SubscriptionDiagnosticsArray != null)
                {
                    SubscriptionDiagnosticsArray = (SubscriptionDiagnosticsArray)instance.SubscriptionDiagnosticsArray.Clone(this);
                    SubscriptionDiagnosticsArray.Initialize(instance.SubscriptionDiagnosticsArray);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_sessionDiagnostics = SessionDiagnosticsVariable.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.SessionDiagnostics, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsObjectType_SessionDiagnostics);

            m_sessionSecurityDiagnostics = SessionSecurityDiagnostics.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.SessionSecurityDiagnostics, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsObjectType_SessionSecurityDiagnostics);

            m_subscriptionDiagnosticsArray = SubscriptionDiagnosticsArray.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.SubscriptionDiagnosticsArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsObjectType_SubscriptionDiagnosticsArray);
        }
        #endregion

        #region Private Fields
        private SessionDiagnosticsObjectType m_typeDefinition;
        SessionDiagnosticsVariable m_sessionDiagnostics;
        SessionSecurityDiagnostics m_sessionSecurityDiagnostics;
        SubscriptionDiagnosticsArray m_subscriptionDiagnosticsArray;
        #endregion
    }
    #endregion

    #region VendorServerInfoType Class
    /// <summary>
    /// Represents the VendorServerInfoType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class VendorServerInfoType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public VendorServerInfoType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.VendorServerInfoType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.VendorServerInfoType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseObjectType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new VendorServerInfoType FindSource(IServerInternal server)
        {
            VendorServerInfoType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.VendorServerInfoType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as VendorServerInfoType;

                if (type != null)
                {
                    return type;
                }

                type = new VendorServerInfoType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                VendorServerInfoType clone = new VendorServerInfoType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                VendorServerInfoType type = source as VendorServerInfoType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endregion

    #region VendorServerInfo Class
    /// <summary>
    /// Represents an instance of the VendorServerInfoType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class VendorServerInfo : ObjectSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected VendorServerInfo(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = VendorServerInfoType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new VendorServerInfo Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            VendorServerInfo instance = new VendorServerInfo(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new VendorServerInfo Construct(IServerInternal server)
        {
            VendorServerInfo instance = new VendorServerInfo(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                VendorServerInfo clone = new VendorServerInfo(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                VendorServerInfo instance = source as VendorServerInfo;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                VendorServerInfoType type = source as VendorServerInfoType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private VendorServerInfoType m_typeDefinition;
        #endregion
    }
    #endregion

    #region ServerRedundancyType Class
    /// <summary>
    /// Represents the ServerRedundancyType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class ServerRedundancyType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public ServerRedundancyType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.ServerRedundancyType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.ServerRedundancyType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseObjectType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new ServerRedundancyType FindSource(IServerInternal server)
        {
            ServerRedundancyType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.ServerRedundancyType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as ServerRedundancyType;

                if (type != null)
                {
                    return type;
                }

                type = new ServerRedundancyType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                ServerRedundancyType clone = new ServerRedundancyType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region RedundancySupport
        /// <summary>
        /// A description for the RedundancySupport Property.
        /// </summary>
        public Property<RedundancySupport> RedundancySupport
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_redundancySupport; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_redundancySupport != null)
                    {
                        RemoveChild(m_redundancySupport);
                    }

                    m_redundancySupport = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceRedundancySupport(Property<RedundancySupport> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                RedundancySupport = replacement;

                RedundancySupport.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.RedundancySupport, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerRedundancyType_RedundancySupport,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                ServerRedundancyType type = source as ServerRedundancyType;

                if (type != null && type.RedundancySupport != null)
                {
                    RedundancySupport = (Property<RedundancySupport>)type.RedundancySupport.Clone(this);
                    RedundancySupport.Initialize(type.RedundancySupport);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_redundancySupport = Property<RedundancySupport>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ServerRedundancyType_RedundancySupport, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.RedundancySupport, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerRedundancyType_RedundancySupport);
        }
        #endregion

        #region Private Fields
        Property<RedundancySupport> m_redundancySupport;
        #endregion
    }
    #endregion

    #region ServerRedundancy Class
    /// <summary>
    /// Represents an instance of the ServerRedundancyType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class ServerRedundancy : ObjectSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected ServerRedundancy(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = ServerRedundancyType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new ServerRedundancy Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            ServerRedundancy instance = new ServerRedundancy(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new ServerRedundancy Construct(IServerInternal server)
        {
            ServerRedundancy instance = new ServerRedundancy(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                ServerRedundancy clone = new ServerRedundancy(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region RedundancySupport
        /// <summary>
        /// A description for the RedundancySupport Property.
        /// </summary>
        public Property<RedundancySupport> RedundancySupport
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_redundancySupport; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_redundancySupport != null)
                    {
                        RemoveChild(m_redundancySupport);
                    }

                    m_redundancySupport = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceRedundancySupport(Property<RedundancySupport> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                RedundancySupport = replacement;

                RedundancySupport.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.RedundancySupport, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerRedundancyType_RedundancySupport,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                ServerRedundancy instance = source as ServerRedundancy;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                ServerRedundancyType type = source as ServerRedundancyType;

                if (type != null && type.RedundancySupport != null)
                {
                    RedundancySupport = (Property<RedundancySupport>)type.RedundancySupport.Clone(this);
                    RedundancySupport.Initialize(type.RedundancySupport);
                }
                else if (instance != null && instance.RedundancySupport != null)
                {
                    RedundancySupport = (Property<RedundancySupport>)instance.RedundancySupport.Clone(this);
                    RedundancySupport.Initialize(instance.RedundancySupport);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_redundancySupport = Property<RedundancySupport>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.RedundancySupport, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerRedundancyType_RedundancySupport);
        }
        #endregion

        #region Private Fields
        private ServerRedundancyType m_typeDefinition;
        Property<RedundancySupport> m_redundancySupport;
        #endregion
    }
    #endregion

    #region TransparentRedundancyType Class
    /// <summary>
    /// Represents the TransparentRedundancyType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class TransparentRedundancyType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public TransparentRedundancyType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.TransparentRedundancyType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.TransparentRedundancyType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.ServerRedundancyType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new TransparentRedundancyType FindSource(IServerInternal server)
        {
            TransparentRedundancyType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.TransparentRedundancyType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as TransparentRedundancyType;

                if (type != null)
                {
                    return type;
                }

                type = new TransparentRedundancyType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                TransparentRedundancyType clone = new TransparentRedundancyType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region CurrentServerId
        /// <summary>
        /// A description for the CurrentServerId Property.
        /// </summary>
        public Property<string> CurrentServerId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_currentServerId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_currentServerId != null)
                    {
                        RemoveChild(m_currentServerId);
                    }

                    m_currentServerId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCurrentServerId(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CurrentServerId = replacement;

                CurrentServerId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CurrentServerId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.TransparentRedundancyType_CurrentServerId,
                    null);
            }
        }
        #endregion

        #region RedundantServerArray
        /// <summary>
        /// A description for the RedundantServerArray Property.
        /// </summary>
        public Property<IList<RedundantServerDataType>> RedundantServerArray
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_redundantServerArray; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_redundantServerArray != null)
                    {
                        RemoveChild(m_redundantServerArray);
                    }

                    m_redundantServerArray = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceRedundantServerArray(Property<IList<RedundantServerDataType>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                RedundantServerArray = replacement;

                RedundantServerArray.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.RedundantServerArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.TransparentRedundancyType_RedundantServerArray,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                TransparentRedundancyType type = source as TransparentRedundancyType;

                if (type != null && type.CurrentServerId != null)
                {
                    CurrentServerId = (Property<string>)type.CurrentServerId.Clone(this);
                    CurrentServerId.Initialize(type.CurrentServerId);
                }

                if (type != null && type.RedundantServerArray != null)
                {
                    RedundantServerArray = (Property<IList<RedundantServerDataType>>)type.RedundantServerArray.Clone(this);
                    RedundantServerArray.Initialize(type.RedundantServerArray);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_currentServerId = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.TransparentRedundancyType_CurrentServerId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.CurrentServerId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.TransparentRedundancyType_CurrentServerId);

            m_redundantServerArray = Property<IList<RedundantServerDataType>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.TransparentRedundancyType_RedundantServerArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.RedundantServerArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.TransparentRedundancyType_RedundantServerArray);
        }
        #endregion

        #region Private Fields
        Property<string> m_currentServerId;
        Property<IList<RedundantServerDataType>> m_redundantServerArray;
        #endregion
    }
    #endregion

    #region TransparentRedundancy Class
    /// <summary>
    /// Represents an instance of the TransparentRedundancyType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class TransparentRedundancy : ServerRedundancy
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected TransparentRedundancy(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = TransparentRedundancyType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new TransparentRedundancy Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            TransparentRedundancy instance = new TransparentRedundancy(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new TransparentRedundancy Construct(IServerInternal server)
        {
            TransparentRedundancy instance = new TransparentRedundancy(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                TransparentRedundancy clone = new TransparentRedundancy(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region CurrentServerId
        /// <summary>
        /// A description for the CurrentServerId Property.
        /// </summary>
        public Property<string> CurrentServerId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_currentServerId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_currentServerId != null)
                    {
                        RemoveChild(m_currentServerId);
                    }

                    m_currentServerId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCurrentServerId(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CurrentServerId = replacement;

                CurrentServerId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CurrentServerId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.TransparentRedundancyType_CurrentServerId,
                    null);
            }
        }
        #endregion

        #region RedundantServerArray
        /// <summary>
        /// A description for the RedundantServerArray Property.
        /// </summary>
        public Property<IList<RedundantServerDataType>> RedundantServerArray
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_redundantServerArray; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_redundantServerArray != null)
                    {
                        RemoveChild(m_redundantServerArray);
                    }

                    m_redundantServerArray = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceRedundantServerArray(Property<IList<RedundantServerDataType>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                RedundantServerArray = replacement;

                RedundantServerArray.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.RedundantServerArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.TransparentRedundancyType_RedundantServerArray,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                TransparentRedundancy instance = source as TransparentRedundancy;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                TransparentRedundancyType type = source as TransparentRedundancyType;

                if (type != null && type.CurrentServerId != null)
                {
                    CurrentServerId = (Property<string>)type.CurrentServerId.Clone(this);
                    CurrentServerId.Initialize(type.CurrentServerId);
                }
                else if (instance != null && instance.CurrentServerId != null)
                {
                    CurrentServerId = (Property<string>)instance.CurrentServerId.Clone(this);
                    CurrentServerId.Initialize(instance.CurrentServerId);
                }

                if (type != null && type.RedundantServerArray != null)
                {
                    RedundantServerArray = (Property<IList<RedundantServerDataType>>)type.RedundantServerArray.Clone(this);
                    RedundantServerArray.Initialize(type.RedundantServerArray);
                }
                else if (instance != null && instance.RedundantServerArray != null)
                {
                    RedundantServerArray = (Property<IList<RedundantServerDataType>>)instance.RedundantServerArray.Clone(this);
                    RedundantServerArray.Initialize(instance.RedundantServerArray);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_currentServerId = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.CurrentServerId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.TransparentRedundancyType_CurrentServerId);

            m_redundantServerArray = Property<IList<RedundantServerDataType>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.RedundantServerArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.TransparentRedundancyType_RedundantServerArray);
        }
        #endregion

        #region Private Fields
        private TransparentRedundancyType m_typeDefinition;
        Property<string> m_currentServerId;
        Property<IList<RedundantServerDataType>> m_redundantServerArray;
        #endregion
    }
    #endregion

    #region NonTransparentRedundancyType Class
    /// <summary>
    /// Represents the NonTransparentRedundancyType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class NonTransparentRedundancyType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public NonTransparentRedundancyType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.NonTransparentRedundancyType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.NonTransparentRedundancyType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.ServerRedundancyType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new NonTransparentRedundancyType FindSource(IServerInternal server)
        {
            NonTransparentRedundancyType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.NonTransparentRedundancyType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as NonTransparentRedundancyType;

                if (type != null)
                {
                    return type;
                }

                type = new NonTransparentRedundancyType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                NonTransparentRedundancyType clone = new NonTransparentRedundancyType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region ServerUriArray
        /// <summary>
        /// A description for the ServerUriArray Property.
        /// </summary>
        public Property<IList<string>> ServerUriArray
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_serverUriArray; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_serverUriArray != null)
                    {
                        RemoveChild(m_serverUriArray);
                    }

                    m_serverUriArray = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceServerUriArray(Property<IList<string>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ServerUriArray = replacement;

                ServerUriArray.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ServerUriArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.NonTransparentRedundancyType_ServerUriArray,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                NonTransparentRedundancyType type = source as NonTransparentRedundancyType;

                if (type != null && type.ServerUriArray != null)
                {
                    ServerUriArray = (Property<IList<string>>)type.ServerUriArray.Clone(this);
                    ServerUriArray.Initialize(type.ServerUriArray);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_serverUriArray = Property<IList<string>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.NonTransparentRedundancyType_ServerUriArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ServerUriArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.NonTransparentRedundancyType_ServerUriArray);
        }
        #endregion

        #region Private Fields
        Property<IList<string>> m_serverUriArray;
        #endregion
    }
    #endregion

    #region NonTransparentRedundancy Class
    /// <summary>
    /// Represents an instance of the NonTransparentRedundancyType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class NonTransparentRedundancy : ServerRedundancy
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected NonTransparentRedundancy(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = NonTransparentRedundancyType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new NonTransparentRedundancy Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            NonTransparentRedundancy instance = new NonTransparentRedundancy(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new NonTransparentRedundancy Construct(IServerInternal server)
        {
            NonTransparentRedundancy instance = new NonTransparentRedundancy(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                NonTransparentRedundancy clone = new NonTransparentRedundancy(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region ServerUriArray
        /// <summary>
        /// A description for the ServerUriArray Property.
        /// </summary>
        public Property<IList<string>> ServerUriArray
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_serverUriArray; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_serverUriArray != null)
                    {
                        RemoveChild(m_serverUriArray);
                    }

                    m_serverUriArray = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceServerUriArray(Property<IList<string>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ServerUriArray = replacement;

                ServerUriArray.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ServerUriArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.NonTransparentRedundancyType_ServerUriArray,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                NonTransparentRedundancy instance = source as NonTransparentRedundancy;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                NonTransparentRedundancyType type = source as NonTransparentRedundancyType;

                if (type != null && type.ServerUriArray != null)
                {
                    ServerUriArray = (Property<IList<string>>)type.ServerUriArray.Clone(this);
                    ServerUriArray.Initialize(type.ServerUriArray);
                }
                else if (instance != null && instance.ServerUriArray != null)
                {
                    ServerUriArray = (Property<IList<string>>)instance.ServerUriArray.Clone(this);
                    ServerUriArray.Initialize(instance.ServerUriArray);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_serverUriArray = Property<IList<string>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ServerUriArray, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.NonTransparentRedundancyType_ServerUriArray);
        }
        #endregion

        #region Private Fields
        private NonTransparentRedundancyType m_typeDefinition;
        Property<IList<string>> m_serverUriArray;
        #endregion
    }
    #endregion

    #region BaseEventType Class
    /// <summary>
    /// Represents the BaseEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class BaseEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public BaseEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.BaseEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.BaseEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseObjectType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new BaseEventType FindSource(IServerInternal server)
        {
            BaseEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.BaseEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as BaseEventType;

                if (type != null)
                {
                    return type;
                }

                type = new BaseEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                BaseEventType clone = new BaseEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region EventId
        /// <summary>
        /// A globally unique identifier for the event.
        /// </summary>
        public Property<byte[]> EventId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_eventId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_eventId != null)
                    {
                        RemoveChild(m_eventId);
                    }

                    m_eventId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceEventId(Property<byte[]> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                EventId = replacement;

                EventId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.EventId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.BaseEventType_EventId,
                    null);
            }
        }
        #endregion

        #region EventType
        /// <summary>
        /// The identifier for the event type.
        /// </summary>
        public Property<NodeId> EventType
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_eventType; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_eventType != null)
                    {
                        RemoveChild(m_eventType);
                    }

                    m_eventType = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceEventType(Property<NodeId> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                EventType = replacement;

                EventType.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.EventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.BaseEventType_EventType,
                    null);
            }
        }
        #endregion

        #region SourceNode
        /// <summary>
        /// The source of the event.
        /// </summary>
        public Property<NodeId> SourceNode
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_sourceNode; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_sourceNode != null)
                    {
                        RemoveChild(m_sourceNode);
                    }

                    m_sourceNode = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSourceNode(Property<NodeId> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SourceNode = replacement;

                SourceNode.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SourceNode, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.BaseEventType_SourceNode,
                    null);
            }
        }
        #endregion

        #region SourceName
        /// <summary>
        /// A description of the source of the event.
        /// </summary>
        public Property<string> SourceName
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_sourceName; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_sourceName != null)
                    {
                        RemoveChild(m_sourceName);
                    }

                    m_sourceName = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSourceName(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SourceName = replacement;

                SourceName.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SourceName, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.BaseEventType_SourceName,
                    null);
            }
        }
        #endregion

        #region Time
        /// <summary>
        /// When the event occurred.
        /// </summary>
        public Property<DateTime> Time
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_time; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_time != null)
                    {
                        RemoveChild(m_time);
                    }

                    m_time = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceTime(Property<DateTime> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Time = replacement;

                Time.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Time, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.BaseEventType_Time,
                    null);
            }
        }
        #endregion

        #region ReceiveTime
        /// <summary>
        /// When the server received the event from the underlying system.
        /// </summary>
        public Property<DateTime> ReceiveTime
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_receiveTime; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_receiveTime != null)
                    {
                        RemoveChild(m_receiveTime);
                    }

                    m_receiveTime = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceReceiveTime(Property<DateTime> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ReceiveTime = replacement;

                ReceiveTime.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ReceiveTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.BaseEventType_ReceiveTime,
                    null);
            }
        }
        #endregion

        #region Message
        /// <summary>
        /// A localized description of the event.
        /// </summary>
        public Property<LocalizedText> Message
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_message; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_message != null)
                    {
                        RemoveChild(m_message);
                    }

                    m_message = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceMessage(Property<LocalizedText> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Message = replacement;

                Message.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Message, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.BaseEventType_Message,
                    null);
            }
        }
        #endregion

        #region Severity
        /// <summary>
        /// Indicates how urgent an event is.
        /// </summary>
        public Property<ushort> Severity
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_severity; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_severity != null)
                    {
                        RemoveChild(m_severity);
                    }

                    m_severity = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSeverity(Property<ushort> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Severity = replacement;

                Severity.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Severity, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.BaseEventType_Severity,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                BaseEventType type = source as BaseEventType;

                if (type != null && type.EventId != null)
                {
                    EventId = (Property<byte[]>)type.EventId.Clone(this);
                    EventId.Initialize(type.EventId);
                }

                if (type != null && type.EventType != null)
                {
                    EventType = (Property<NodeId>)type.EventType.Clone(this);
                    EventType.Initialize(type.EventType);
                }

                if (type != null && type.SourceNode != null)
                {
                    SourceNode = (Property<NodeId>)type.SourceNode.Clone(this);
                    SourceNode.Initialize(type.SourceNode);
                }

                if (type != null && type.SourceName != null)
                {
                    SourceName = (Property<string>)type.SourceName.Clone(this);
                    SourceName.Initialize(type.SourceName);
                }

                if (type != null && type.Time != null)
                {
                    Time = (Property<DateTime>)type.Time.Clone(this);
                    Time.Initialize(type.Time);
                }

                if (type != null && type.ReceiveTime != null)
                {
                    ReceiveTime = (Property<DateTime>)type.ReceiveTime.Clone(this);
                    ReceiveTime.Initialize(type.ReceiveTime);
                }

                if (type != null && type.Message != null)
                {
                    Message = (Property<LocalizedText>)type.Message.Clone(this);
                    Message.Initialize(type.Message);
                }

                if (type != null && type.Severity != null)
                {
                    Severity = (Property<ushort>)type.Severity.Clone(this);
                    Severity.Initialize(type.Severity);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_eventId = Property<byte[]>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.BaseEventType_EventId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.EventId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.BaseEventType_EventId);

            m_eventType = Property<NodeId>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.BaseEventType_EventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.EventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.BaseEventType_EventType);

            m_sourceNode = Property<NodeId>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.BaseEventType_SourceNode, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SourceNode, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.BaseEventType_SourceNode);

            m_sourceName = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.BaseEventType_SourceName, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SourceName, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.BaseEventType_SourceName);

            m_time = Property<DateTime>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.BaseEventType_Time, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Time, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.BaseEventType_Time);

            m_receiveTime = Property<DateTime>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.BaseEventType_ReceiveTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ReceiveTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.BaseEventType_ReceiveTime);

            m_message = Property<LocalizedText>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.BaseEventType_Message, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Message, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.BaseEventType_Message);

            m_severity = Property<ushort>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.BaseEventType_Severity, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Severity, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.BaseEventType_Severity);
        }
        #endregion

        #region Private Fields
        Property<byte[]> m_eventId;
        Property<NodeId> m_eventType;
        Property<NodeId> m_sourceNode;
        Property<string> m_sourceName;
        Property<DateTime> m_time;
        Property<DateTime> m_receiveTime;
        Property<LocalizedText> m_message;
        Property<ushort> m_severity;
        #endregion
    }
    #endregion

    #region BaseEvent Class
    /// <summary>
    /// Represents an instance of the BaseEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class BaseEvent : ObjectSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected BaseEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = BaseEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new BaseEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            BaseEvent instance = new BaseEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new BaseEvent Construct(IServerInternal server)
        {
            BaseEvent instance = new BaseEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                BaseEvent clone = new BaseEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region EventId
        /// <summary>
        /// A globally unique identifier for the event.
        /// </summary>
        public Property<byte[]> EventId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_eventId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_eventId != null)
                    {
                        RemoveChild(m_eventId);
                    }

                    m_eventId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceEventId(Property<byte[]> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                EventId = replacement;

                EventId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.EventId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.BaseEventType_EventId,
                    null);
            }
        }
        #endregion

        #region EventType
        /// <summary>
        /// The identifier for the event type.
        /// </summary>
        public Property<NodeId> EventType
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_eventType; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_eventType != null)
                    {
                        RemoveChild(m_eventType);
                    }

                    m_eventType = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceEventType(Property<NodeId> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                EventType = replacement;

                EventType.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.EventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.BaseEventType_EventType,
                    null);
            }
        }
        #endregion

        #region SourceNode
        /// <summary>
        /// The source of the event.
        /// </summary>
        public Property<NodeId> SourceNode
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_sourceNode; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_sourceNode != null)
                    {
                        RemoveChild(m_sourceNode);
                    }

                    m_sourceNode = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSourceNode(Property<NodeId> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SourceNode = replacement;

                SourceNode.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SourceNode, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.BaseEventType_SourceNode,
                    null);
            }
        }
        #endregion

        #region SourceName
        /// <summary>
        /// A description of the source of the event.
        /// </summary>
        public Property<string> SourceName
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_sourceName; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_sourceName != null)
                    {
                        RemoveChild(m_sourceName);
                    }

                    m_sourceName = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSourceName(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SourceName = replacement;

                SourceName.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SourceName, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.BaseEventType_SourceName,
                    null);
            }
        }
        #endregion

        #region Time
        /// <summary>
        /// When the event occurred.
        /// </summary>
        public Property<DateTime> Time
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_time; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_time != null)
                    {
                        RemoveChild(m_time);
                    }

                    m_time = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceTime(Property<DateTime> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Time = replacement;

                Time.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Time, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.BaseEventType_Time,
                    null);
            }
        }
        #endregion

        #region ReceiveTime
        /// <summary>
        /// When the server received the event from the underlying system.
        /// </summary>
        public Property<DateTime> ReceiveTime
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_receiveTime; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_receiveTime != null)
                    {
                        RemoveChild(m_receiveTime);
                    }

                    m_receiveTime = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceReceiveTime(Property<DateTime> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ReceiveTime = replacement;

                ReceiveTime.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ReceiveTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.BaseEventType_ReceiveTime,
                    null);
            }
        }
        #endregion

        #region Message
        /// <summary>
        /// A localized description of the event.
        /// </summary>
        public Property<LocalizedText> Message
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_message; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_message != null)
                    {
                        RemoveChild(m_message);
                    }

                    m_message = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceMessage(Property<LocalizedText> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Message = replacement;

                Message.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Message, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.BaseEventType_Message,
                    null);
            }
        }
        #endregion

        #region Severity
        /// <summary>
        /// Indicates how urgent an event is.
        /// </summary>
        public Property<ushort> Severity
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_severity; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_severity != null)
                    {
                        RemoveChild(m_severity);
                    }

                    m_severity = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSeverity(Property<ushort> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Severity = replacement;

                Severity.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Severity, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.BaseEventType_Severity,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                BaseEvent instance = source as BaseEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                BaseEventType type = source as BaseEventType;

                if (type != null && type.EventId != null)
                {
                    EventId = (Property<byte[]>)type.EventId.Clone(this);
                    EventId.Initialize(type.EventId);
                }
                else if (instance != null && instance.EventId != null)
                {
                    EventId = (Property<byte[]>)instance.EventId.Clone(this);
                    EventId.Initialize(instance.EventId);
                }

                if (type != null && type.EventType != null)
                {
                    EventType = (Property<NodeId>)type.EventType.Clone(this);
                    EventType.Initialize(type.EventType);
                }
                else if (instance != null && instance.EventType != null)
                {
                    EventType = (Property<NodeId>)instance.EventType.Clone(this);
                    EventType.Initialize(instance.EventType);
                }

                if (type != null && type.SourceNode != null)
                {
                    SourceNode = (Property<NodeId>)type.SourceNode.Clone(this);
                    SourceNode.Initialize(type.SourceNode);
                }
                else if (instance != null && instance.SourceNode != null)
                {
                    SourceNode = (Property<NodeId>)instance.SourceNode.Clone(this);
                    SourceNode.Initialize(instance.SourceNode);
                }

                if (type != null && type.SourceName != null)
                {
                    SourceName = (Property<string>)type.SourceName.Clone(this);
                    SourceName.Initialize(type.SourceName);
                }
                else if (instance != null && instance.SourceName != null)
                {
                    SourceName = (Property<string>)instance.SourceName.Clone(this);
                    SourceName.Initialize(instance.SourceName);
                }

                if (type != null && type.Time != null)
                {
                    Time = (Property<DateTime>)type.Time.Clone(this);
                    Time.Initialize(type.Time);
                }
                else if (instance != null && instance.Time != null)
                {
                    Time = (Property<DateTime>)instance.Time.Clone(this);
                    Time.Initialize(instance.Time);
                }

                if (type != null && type.ReceiveTime != null)
                {
                    ReceiveTime = (Property<DateTime>)type.ReceiveTime.Clone(this);
                    ReceiveTime.Initialize(type.ReceiveTime);
                }
                else if (instance != null && instance.ReceiveTime != null)
                {
                    ReceiveTime = (Property<DateTime>)instance.ReceiveTime.Clone(this);
                    ReceiveTime.Initialize(instance.ReceiveTime);
                }

                if (type != null && type.Message != null)
                {
                    Message = (Property<LocalizedText>)type.Message.Clone(this);
                    Message.Initialize(type.Message);
                }
                else if (instance != null && instance.Message != null)
                {
                    Message = (Property<LocalizedText>)instance.Message.Clone(this);
                    Message.Initialize(instance.Message);
                }

                if (type != null && type.Severity != null)
                {
                    Severity = (Property<ushort>)type.Severity.Clone(this);
                    Severity.Initialize(type.Severity);
                }
                else if (instance != null && instance.Severity != null)
                {
                    Severity = (Property<ushort>)instance.Severity.Clone(this);
                    Severity.Initialize(instance.Severity);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_eventId = Property<byte[]>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.EventId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.BaseEventType_EventId);

            m_eventType = Property<NodeId>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.EventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.BaseEventType_EventType);

            m_sourceNode = Property<NodeId>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.SourceNode, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.BaseEventType_SourceNode);

            m_sourceName = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.SourceName, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.BaseEventType_SourceName);

            m_time = Property<DateTime>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Time, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.BaseEventType_Time);

            m_receiveTime = Property<DateTime>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ReceiveTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.BaseEventType_ReceiveTime);

            m_message = Property<LocalizedText>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Message, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.BaseEventType_Message);

            m_severity = Property<ushort>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Severity, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.BaseEventType_Severity);
        }
        #endregion

        #region Private Fields
        private BaseEventType m_typeDefinition;
        Property<byte[]> m_eventId;
        Property<NodeId> m_eventType;
        Property<NodeId> m_sourceNode;
        Property<string> m_sourceName;
        Property<DateTime> m_time;
        Property<DateTime> m_receiveTime;
        Property<LocalizedText> m_message;
        Property<ushort> m_severity;
        #endregion
    }
    #endregion

    #region EventQueueOverflowEventType Class
    /// <summary>
    /// Represents the EventQueueOverflowEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class EventQueueOverflowEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public EventQueueOverflowEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.EventQueueOverflowEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.EventQueueOverflowEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new EventQueueOverflowEventType FindSource(IServerInternal server)
        {
            EventQueueOverflowEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.EventQueueOverflowEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as EventQueueOverflowEventType;

                if (type != null)
                {
                    return type;
                }

                type = new EventQueueOverflowEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                EventQueueOverflowEventType clone = new EventQueueOverflowEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                EventQueueOverflowEventType type = source as EventQueueOverflowEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endregion

    #region EventQueueOverflowEvent Class
    /// <summary>
    /// Represents an instance of the EventQueueOverflowEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class EventQueueOverflowEvent : BaseEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected EventQueueOverflowEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = EventQueueOverflowEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new EventQueueOverflowEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            EventQueueOverflowEvent instance = new EventQueueOverflowEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new EventQueueOverflowEvent Construct(IServerInternal server)
        {
            EventQueueOverflowEvent instance = new EventQueueOverflowEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                EventQueueOverflowEvent clone = new EventQueueOverflowEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                EventQueueOverflowEvent instance = source as EventQueueOverflowEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                EventQueueOverflowEventType type = source as EventQueueOverflowEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private EventQueueOverflowEventType m_typeDefinition;
        #endregion
    }
    #endregion

    #region AuditEventType Class
    /// <summary>
    /// Represents the AuditEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AuditEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AuditEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AuditEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AuditEventType FindSource(IServerInternal server)
        {
            AuditEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AuditEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AuditEventType;

                if (type != null)
                {
                    return type;
                }

                type = new AuditEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditEventType clone = new AuditEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region ActionTimeStamp
        /// <summary>
        /// A description for the ActionTimeStamp Property.
        /// </summary>
        public Property<DateTime> ActionTimeStamp
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_actionTimeStamp; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_actionTimeStamp != null)
                    {
                        RemoveChild(m_actionTimeStamp);
                    }

                    m_actionTimeStamp = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceActionTimeStamp(Property<DateTime> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ActionTimeStamp = replacement;

                ActionTimeStamp.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ActionTimeStamp, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditEventType_ActionTimeStamp,
                    null);
            }
        }
        #endregion

        #region Status
        /// <summary>
        /// A description for the Status Property.
        /// </summary>
        public Property<bool> Status
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_status; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_status != null)
                    {
                        RemoveChild(m_status);
                    }

                    m_status = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceStatus(Property<bool> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Status = replacement;

                Status.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Status, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditEventType_Status,
                    null);
            }
        }
        #endregion

        #region ServerId
        /// <summary>
        /// A description for the ServerId Property.
        /// </summary>
        public Property<string> ServerId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_serverId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_serverId != null)
                    {
                        RemoveChild(m_serverId);
                    }

                    m_serverId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceServerId(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ServerId = replacement;

                ServerId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ServerId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditEventType_ServerId,
                    null);
            }
        }
        #endregion

        #region ClientAuditEntryId
        /// <summary>
        /// A description for the ClientAuditEntryId Property.
        /// </summary>
        public Property<string> ClientAuditEntryId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_clientAuditEntryId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_clientAuditEntryId != null)
                    {
                        RemoveChild(m_clientAuditEntryId);
                    }

                    m_clientAuditEntryId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceClientAuditEntryId(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ClientAuditEntryId = replacement;

                ClientAuditEntryId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ClientAuditEntryId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditEventType_ClientAuditEntryId,
                    null);
            }
        }
        #endregion

        #region ClientUserId
        /// <summary>
        /// A description for the ClientUserId Property.
        /// </summary>
        public Property<string> ClientUserId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_clientUserId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_clientUserId != null)
                    {
                        RemoveChild(m_clientUserId);
                    }

                    m_clientUserId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceClientUserId(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ClientUserId = replacement;

                ClientUserId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ClientUserId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditEventType_ClientUserId,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AuditEventType type = source as AuditEventType;

                if (type != null && type.ActionTimeStamp != null)
                {
                    ActionTimeStamp = (Property<DateTime>)type.ActionTimeStamp.Clone(this);
                    ActionTimeStamp.Initialize(type.ActionTimeStamp);
                }

                if (type != null && type.Status != null)
                {
                    Status = (Property<bool>)type.Status.Clone(this);
                    Status.Initialize(type.Status);
                }

                if (type != null && type.ServerId != null)
                {
                    ServerId = (Property<string>)type.ServerId.Clone(this);
                    ServerId.Initialize(type.ServerId);
                }

                if (type != null && type.ClientAuditEntryId != null)
                {
                    ClientAuditEntryId = (Property<string>)type.ClientAuditEntryId.Clone(this);
                    ClientAuditEntryId.Initialize(type.ClientAuditEntryId);
                }

                if (type != null && type.ClientUserId != null)
                {
                    ClientUserId = (Property<string>)type.ClientUserId.Clone(this);
                    ClientUserId.Initialize(type.ClientUserId);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_actionTimeStamp = Property<DateTime>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditEventType_ActionTimeStamp, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ActionTimeStamp, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditEventType_ActionTimeStamp);

            m_status = Property<bool>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditEventType_Status, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Status, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditEventType_Status);

            m_serverId = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditEventType_ServerId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ServerId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditEventType_ServerId);

            m_clientAuditEntryId = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditEventType_ClientAuditEntryId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ClientAuditEntryId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditEventType_ClientAuditEntryId);

            m_clientUserId = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditEventType_ClientUserId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ClientUserId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditEventType_ClientUserId);
        }
        #endregion

        #region Private Fields
        Property<DateTime> m_actionTimeStamp;
        Property<bool> m_status;
        Property<string> m_serverId;
        Property<string> m_clientAuditEntryId;
        Property<string> m_clientUserId;
        #endregion
    }
    #endregion

    #region AuditEvent Class
    /// <summary>
    /// Represents an instance of the AuditEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditEvent : BaseEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AuditEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AuditEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AuditEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AuditEvent instance = new AuditEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AuditEvent Construct(IServerInternal server)
        {
            AuditEvent instance = new AuditEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditEvent clone = new AuditEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region ActionTimeStamp
        /// <summary>
        /// A description for the ActionTimeStamp Property.
        /// </summary>
        public Property<DateTime> ActionTimeStamp
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_actionTimeStamp; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_actionTimeStamp != null)
                    {
                        RemoveChild(m_actionTimeStamp);
                    }

                    m_actionTimeStamp = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceActionTimeStamp(Property<DateTime> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ActionTimeStamp = replacement;

                ActionTimeStamp.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ActionTimeStamp, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditEventType_ActionTimeStamp,
                    null);
            }
        }
        #endregion

        #region Status
        /// <summary>
        /// A description for the Status Property.
        /// </summary>
        public Property<bool> Status
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_status; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_status != null)
                    {
                        RemoveChild(m_status);
                    }

                    m_status = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceStatus(Property<bool> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Status = replacement;

                Status.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Status, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditEventType_Status,
                    null);
            }
        }
        #endregion

        #region ServerId
        /// <summary>
        /// A description for the ServerId Property.
        /// </summary>
        public Property<string> ServerId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_serverId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_serverId != null)
                    {
                        RemoveChild(m_serverId);
                    }

                    m_serverId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceServerId(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ServerId = replacement;

                ServerId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ServerId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditEventType_ServerId,
                    null);
            }
        }
        #endregion

        #region ClientAuditEntryId
        /// <summary>
        /// A description for the ClientAuditEntryId Property.
        /// </summary>
        public Property<string> ClientAuditEntryId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_clientAuditEntryId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_clientAuditEntryId != null)
                    {
                        RemoveChild(m_clientAuditEntryId);
                    }

                    m_clientAuditEntryId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceClientAuditEntryId(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ClientAuditEntryId = replacement;

                ClientAuditEntryId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ClientAuditEntryId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditEventType_ClientAuditEntryId,
                    null);
            }
        }
        #endregion

        #region ClientUserId
        /// <summary>
        /// A description for the ClientUserId Property.
        /// </summary>
        public Property<string> ClientUserId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_clientUserId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_clientUserId != null)
                    {
                        RemoveChild(m_clientUserId);
                    }

                    m_clientUserId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceClientUserId(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ClientUserId = replacement;

                ClientUserId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ClientUserId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditEventType_ClientUserId,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AuditEvent instance = source as AuditEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AuditEventType type = source as AuditEventType;

                if (type != null && type.ActionTimeStamp != null)
                {
                    ActionTimeStamp = (Property<DateTime>)type.ActionTimeStamp.Clone(this);
                    ActionTimeStamp.Initialize(type.ActionTimeStamp);
                }
                else if (instance != null && instance.ActionTimeStamp != null)
                {
                    ActionTimeStamp = (Property<DateTime>)instance.ActionTimeStamp.Clone(this);
                    ActionTimeStamp.Initialize(instance.ActionTimeStamp);
                }

                if (type != null && type.Status != null)
                {
                    Status = (Property<bool>)type.Status.Clone(this);
                    Status.Initialize(type.Status);
                }
                else if (instance != null && instance.Status != null)
                {
                    Status = (Property<bool>)instance.Status.Clone(this);
                    Status.Initialize(instance.Status);
                }

                if (type != null && type.ServerId != null)
                {
                    ServerId = (Property<string>)type.ServerId.Clone(this);
                    ServerId.Initialize(type.ServerId);
                }
                else if (instance != null && instance.ServerId != null)
                {
                    ServerId = (Property<string>)instance.ServerId.Clone(this);
                    ServerId.Initialize(instance.ServerId);
                }

                if (type != null && type.ClientAuditEntryId != null)
                {
                    ClientAuditEntryId = (Property<string>)type.ClientAuditEntryId.Clone(this);
                    ClientAuditEntryId.Initialize(type.ClientAuditEntryId);
                }
                else if (instance != null && instance.ClientAuditEntryId != null)
                {
                    ClientAuditEntryId = (Property<string>)instance.ClientAuditEntryId.Clone(this);
                    ClientAuditEntryId.Initialize(instance.ClientAuditEntryId);
                }

                if (type != null && type.ClientUserId != null)
                {
                    ClientUserId = (Property<string>)type.ClientUserId.Clone(this);
                    ClientUserId.Initialize(type.ClientUserId);
                }
                else if (instance != null && instance.ClientUserId != null)
                {
                    ClientUserId = (Property<string>)instance.ClientUserId.Clone(this);
                    ClientUserId.Initialize(instance.ClientUserId);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_actionTimeStamp = Property<DateTime>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ActionTimeStamp, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditEventType_ActionTimeStamp);

            m_status = Property<bool>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Status, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditEventType_Status);

            m_serverId = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ServerId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditEventType_ServerId);

            m_clientAuditEntryId = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ClientAuditEntryId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditEventType_ClientAuditEntryId);

            m_clientUserId = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ClientUserId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditEventType_ClientUserId);
        }
        #endregion

        #region Private Fields
        private AuditEventType m_typeDefinition;
        Property<DateTime> m_actionTimeStamp;
        Property<bool> m_status;
        Property<string> m_serverId;
        Property<string> m_clientAuditEntryId;
        Property<string> m_clientUserId;
        #endregion
    }
    #endregion

    #region AuditSecurityEventType Class
    /// <summary>
    /// Represents the AuditSecurityEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditSecurityEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AuditSecurityEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AuditSecurityEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AuditSecurityEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AuditEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AuditSecurityEventType FindSource(IServerInternal server)
        {
            AuditSecurityEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AuditSecurityEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AuditSecurityEventType;

                if (type != null)
                {
                    return type;
                }

                type = new AuditSecurityEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditSecurityEventType clone = new AuditSecurityEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AuditSecurityEventType type = source as AuditSecurityEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endregion

    #region AuditSecurityEvent Class
    /// <summary>
    /// Represents an instance of the AuditSecurityEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditSecurityEvent : AuditEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AuditSecurityEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AuditSecurityEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AuditSecurityEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AuditSecurityEvent instance = new AuditSecurityEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AuditSecurityEvent Construct(IServerInternal server)
        {
            AuditSecurityEvent instance = new AuditSecurityEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditSecurityEvent clone = new AuditSecurityEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AuditSecurityEvent instance = source as AuditSecurityEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AuditSecurityEventType type = source as AuditSecurityEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private AuditSecurityEventType m_typeDefinition;
        #endregion
    }
    #endregion

    #region AuditChannelEventType Class
    /// <summary>
    /// Represents the AuditChannelEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditChannelEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AuditChannelEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AuditChannelEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AuditChannelEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AuditSecurityEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AuditChannelEventType FindSource(IServerInternal server)
        {
            AuditChannelEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AuditChannelEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AuditChannelEventType;

                if (type != null)
                {
                    return type;
                }

                type = new AuditChannelEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditChannelEventType clone = new AuditChannelEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region SecureChannelId
        /// <summary>
        /// A description for the SecureChannelId Property.
        /// </summary>
        public Property<string> SecureChannelId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_secureChannelId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_secureChannelId != null)
                    {
                        RemoveChild(m_secureChannelId);
                    }

                    m_secureChannelId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSecureChannelId(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SecureChannelId = replacement;

                SecureChannelId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SecureChannelId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditChannelEventType_SecureChannelId,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AuditChannelEventType type = source as AuditChannelEventType;

                if (type != null && type.SecureChannelId != null)
                {
                    SecureChannelId = (Property<string>)type.SecureChannelId.Clone(this);
                    SecureChannelId.Initialize(type.SecureChannelId);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_secureChannelId = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditChannelEventType_SecureChannelId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SecureChannelId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditChannelEventType_SecureChannelId);
        }
        #endregion

        #region Private Fields
        Property<string> m_secureChannelId;
        #endregion
    }
    #endregion

    #region AuditChannelEvent Class
    /// <summary>
    /// Represents an instance of the AuditChannelEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditChannelEvent : AuditSecurityEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AuditChannelEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AuditChannelEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AuditChannelEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AuditChannelEvent instance = new AuditChannelEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AuditChannelEvent Construct(IServerInternal server)
        {
            AuditChannelEvent instance = new AuditChannelEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditChannelEvent clone = new AuditChannelEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region SecureChannelId
        /// <summary>
        /// A description for the SecureChannelId Property.
        /// </summary>
        public Property<string> SecureChannelId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_secureChannelId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_secureChannelId != null)
                    {
                        RemoveChild(m_secureChannelId);
                    }

                    m_secureChannelId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSecureChannelId(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SecureChannelId = replacement;

                SecureChannelId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SecureChannelId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditChannelEventType_SecureChannelId,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AuditChannelEvent instance = source as AuditChannelEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AuditChannelEventType type = source as AuditChannelEventType;

                if (type != null && type.SecureChannelId != null)
                {
                    SecureChannelId = (Property<string>)type.SecureChannelId.Clone(this);
                    SecureChannelId.Initialize(type.SecureChannelId);
                }
                else if (instance != null && instance.SecureChannelId != null)
                {
                    SecureChannelId = (Property<string>)instance.SecureChannelId.Clone(this);
                    SecureChannelId.Initialize(instance.SecureChannelId);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_secureChannelId = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.SecureChannelId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditChannelEventType_SecureChannelId);
        }
        #endregion

        #region Private Fields
        private AuditChannelEventType m_typeDefinition;
        Property<string> m_secureChannelId;
        #endregion
    }
    #endregion

    #region AuditOpenSecureChannelEventType Class
    /// <summary>
    /// Represents the AuditOpenSecureChannelEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditOpenSecureChannelEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AuditOpenSecureChannelEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AuditOpenSecureChannelEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AuditOpenSecureChannelEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AuditChannelEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AuditOpenSecureChannelEventType FindSource(IServerInternal server)
        {
            AuditOpenSecureChannelEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AuditOpenSecureChannelEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AuditOpenSecureChannelEventType;

                if (type != null)
                {
                    return type;
                }

                type = new AuditOpenSecureChannelEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditOpenSecureChannelEventType clone = new AuditOpenSecureChannelEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region ClientCertificate
        /// <summary>
        /// A description for the ClientCertificate Property.
        /// </summary>
        public Property<byte[]> ClientCertificate
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_clientCertificate; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_clientCertificate != null)
                    {
                        RemoveChild(m_clientCertificate);
                    }

                    m_clientCertificate = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceClientCertificate(Property<byte[]> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ClientCertificate = replacement;

                ClientCertificate.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ClientCertificate, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditOpenSecureChannelEventType_ClientCertificate,
                    null);
            }
        }
        #endregion

        #region ClientCertificateThumbprint
        /// <summary>
        /// A description for the ClientCertificateThumbprint Property.
        /// </summary>
        public Property<string> ClientCertificateThumbprint
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_clientCertificateThumbprint; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_clientCertificateThumbprint != null)
                    {
                        RemoveChild(m_clientCertificateThumbprint);
                    }

                    m_clientCertificateThumbprint = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceClientCertificateThumbprint(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ClientCertificateThumbprint = replacement;

                ClientCertificateThumbprint.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ClientCertificateThumbprint, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditOpenSecureChannelEventType_ClientCertificateThumbprint,
                    null);
            }
        }
        #endregion

        #region RequestType
        /// <summary>
        /// A description for the RequestType Property.
        /// </summary>
        public Property<SecurityTokenRequestType> RequestType
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_requestType; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_requestType != null)
                    {
                        RemoveChild(m_requestType);
                    }

                    m_requestType = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceRequestType(Property<SecurityTokenRequestType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                RequestType = replacement;

                RequestType.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.RequestType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditOpenSecureChannelEventType_RequestType,
                    null);
            }
        }
        #endregion

        #region SecurityPolicyUri
        /// <summary>
        /// A description for the SecurityPolicyUri Property.
        /// </summary>
        public Property<string> SecurityPolicyUri
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_securityPolicyUri; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_securityPolicyUri != null)
                    {
                        RemoveChild(m_securityPolicyUri);
                    }

                    m_securityPolicyUri = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSecurityPolicyUri(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SecurityPolicyUri = replacement;

                SecurityPolicyUri.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SecurityPolicyUri, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditOpenSecureChannelEventType_SecurityPolicyUri,
                    null);
            }
        }
        #endregion

        #region SecurityMode
        /// <summary>
        /// A description for the SecurityMode Property.
        /// </summary>
        public Property<MessageSecurityMode> SecurityMode
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_securityMode; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_securityMode != null)
                    {
                        RemoveChild(m_securityMode);
                    }

                    m_securityMode = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSecurityMode(Property<MessageSecurityMode> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SecurityMode = replacement;

                SecurityMode.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SecurityMode, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditOpenSecureChannelEventType_SecurityMode,
                    null);
            }
        }
        #endregion

        #region RequestedLifetime
        /// <summary>
        /// A description for the RequestedLifetime Property.
        /// </summary>
        public Property<double> RequestedLifetime
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_requestedLifetime; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_requestedLifetime != null)
                    {
                        RemoveChild(m_requestedLifetime);
                    }

                    m_requestedLifetime = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceRequestedLifetime(Property<double> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                RequestedLifetime = replacement;

                RequestedLifetime.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.RequestedLifetime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditOpenSecureChannelEventType_RequestedLifetime,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AuditOpenSecureChannelEventType type = source as AuditOpenSecureChannelEventType;

                if (type != null && type.ClientCertificate != null)
                {
                    ClientCertificate = (Property<byte[]>)type.ClientCertificate.Clone(this);
                    ClientCertificate.Initialize(type.ClientCertificate);
                }

                if (type != null && type.ClientCertificateThumbprint != null)
                {
                    ClientCertificateThumbprint = (Property<string>)type.ClientCertificateThumbprint.Clone(this);
                    ClientCertificateThumbprint.Initialize(type.ClientCertificateThumbprint);
                }

                if (type != null && type.RequestType != null)
                {
                    RequestType = (Property<SecurityTokenRequestType>)type.RequestType.Clone(this);
                    RequestType.Initialize(type.RequestType);
                }

                if (type != null && type.SecurityPolicyUri != null)
                {
                    SecurityPolicyUri = (Property<string>)type.SecurityPolicyUri.Clone(this);
                    SecurityPolicyUri.Initialize(type.SecurityPolicyUri);
                }

                if (type != null && type.SecurityMode != null)
                {
                    SecurityMode = (Property<MessageSecurityMode>)type.SecurityMode.Clone(this);
                    SecurityMode.Initialize(type.SecurityMode);
                }

                if (type != null && type.RequestedLifetime != null)
                {
                    RequestedLifetime = (Property<double>)type.RequestedLifetime.Clone(this);
                    RequestedLifetime.Initialize(type.RequestedLifetime);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_clientCertificate = Property<byte[]>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditOpenSecureChannelEventType_ClientCertificate, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ClientCertificate, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditOpenSecureChannelEventType_ClientCertificate);

            m_clientCertificateThumbprint = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditOpenSecureChannelEventType_ClientCertificateThumbprint, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ClientCertificateThumbprint, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditOpenSecureChannelEventType_ClientCertificateThumbprint);

            m_requestType = Property<SecurityTokenRequestType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditOpenSecureChannelEventType_RequestType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.RequestType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditOpenSecureChannelEventType_RequestType);

            m_securityPolicyUri = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditOpenSecureChannelEventType_SecurityPolicyUri, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SecurityPolicyUri, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditOpenSecureChannelEventType_SecurityPolicyUri);

            m_securityMode = Property<MessageSecurityMode>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditOpenSecureChannelEventType_SecurityMode, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SecurityMode, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditOpenSecureChannelEventType_SecurityMode);

            m_requestedLifetime = Property<double>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditOpenSecureChannelEventType_RequestedLifetime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.RequestedLifetime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditOpenSecureChannelEventType_RequestedLifetime);
        }
        #endregion

        #region Private Fields
        Property<byte[]> m_clientCertificate;
        Property<string> m_clientCertificateThumbprint;
        Property<SecurityTokenRequestType> m_requestType;
        Property<string> m_securityPolicyUri;
        Property<MessageSecurityMode> m_securityMode;
        Property<double> m_requestedLifetime;
        #endregion
    }
    #endregion

    #region AuditOpenSecureChannelEvent Class
    /// <summary>
    /// Represents an instance of the AuditOpenSecureChannelEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditOpenSecureChannelEvent : AuditChannelEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AuditOpenSecureChannelEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AuditOpenSecureChannelEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AuditOpenSecureChannelEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AuditOpenSecureChannelEvent instance = new AuditOpenSecureChannelEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AuditOpenSecureChannelEvent Construct(IServerInternal server)
        {
            AuditOpenSecureChannelEvent instance = new AuditOpenSecureChannelEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditOpenSecureChannelEvent clone = new AuditOpenSecureChannelEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region ClientCertificate
        /// <summary>
        /// A description for the ClientCertificate Property.
        /// </summary>
        public Property<byte[]> ClientCertificate
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_clientCertificate; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_clientCertificate != null)
                    {
                        RemoveChild(m_clientCertificate);
                    }

                    m_clientCertificate = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceClientCertificate(Property<byte[]> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ClientCertificate = replacement;

                ClientCertificate.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ClientCertificate, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditOpenSecureChannelEventType_ClientCertificate,
                    null);
            }
        }
        #endregion

        #region ClientCertificateThumbprint
        /// <summary>
        /// A description for the ClientCertificateThumbprint Property.
        /// </summary>
        public Property<string> ClientCertificateThumbprint
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_clientCertificateThumbprint; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_clientCertificateThumbprint != null)
                    {
                        RemoveChild(m_clientCertificateThumbprint);
                    }

                    m_clientCertificateThumbprint = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceClientCertificateThumbprint(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ClientCertificateThumbprint = replacement;

                ClientCertificateThumbprint.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ClientCertificateThumbprint, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditOpenSecureChannelEventType_ClientCertificateThumbprint,
                    null);
            }
        }
        #endregion

        #region RequestType
        /// <summary>
        /// A description for the RequestType Property.
        /// </summary>
        public Property<SecurityTokenRequestType> RequestType
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_requestType; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_requestType != null)
                    {
                        RemoveChild(m_requestType);
                    }

                    m_requestType = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceRequestType(Property<SecurityTokenRequestType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                RequestType = replacement;

                RequestType.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.RequestType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditOpenSecureChannelEventType_RequestType,
                    null);
            }
        }
        #endregion

        #region SecurityPolicyUri
        /// <summary>
        /// A description for the SecurityPolicyUri Property.
        /// </summary>
        public Property<string> SecurityPolicyUri
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_securityPolicyUri; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_securityPolicyUri != null)
                    {
                        RemoveChild(m_securityPolicyUri);
                    }

                    m_securityPolicyUri = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSecurityPolicyUri(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SecurityPolicyUri = replacement;

                SecurityPolicyUri.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SecurityPolicyUri, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditOpenSecureChannelEventType_SecurityPolicyUri,
                    null);
            }
        }
        #endregion

        #region SecurityMode
        /// <summary>
        /// A description for the SecurityMode Property.
        /// </summary>
        public Property<MessageSecurityMode> SecurityMode
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_securityMode; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_securityMode != null)
                    {
                        RemoveChild(m_securityMode);
                    }

                    m_securityMode = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSecurityMode(Property<MessageSecurityMode> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SecurityMode = replacement;

                SecurityMode.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SecurityMode, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditOpenSecureChannelEventType_SecurityMode,
                    null);
            }
        }
        #endregion

        #region RequestedLifetime
        /// <summary>
        /// A description for the RequestedLifetime Property.
        /// </summary>
        public Property<double> RequestedLifetime
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_requestedLifetime; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_requestedLifetime != null)
                    {
                        RemoveChild(m_requestedLifetime);
                    }

                    m_requestedLifetime = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceRequestedLifetime(Property<double> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                RequestedLifetime = replacement;

                RequestedLifetime.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.RequestedLifetime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditOpenSecureChannelEventType_RequestedLifetime,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AuditOpenSecureChannelEvent instance = source as AuditOpenSecureChannelEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AuditOpenSecureChannelEventType type = source as AuditOpenSecureChannelEventType;

                if (type != null && type.ClientCertificate != null)
                {
                    ClientCertificate = (Property<byte[]>)type.ClientCertificate.Clone(this);
                    ClientCertificate.Initialize(type.ClientCertificate);
                }
                else if (instance != null && instance.ClientCertificate != null)
                {
                    ClientCertificate = (Property<byte[]>)instance.ClientCertificate.Clone(this);
                    ClientCertificate.Initialize(instance.ClientCertificate);
                }

                if (type != null && type.ClientCertificateThumbprint != null)
                {
                    ClientCertificateThumbprint = (Property<string>)type.ClientCertificateThumbprint.Clone(this);
                    ClientCertificateThumbprint.Initialize(type.ClientCertificateThumbprint);
                }
                else if (instance != null && instance.ClientCertificateThumbprint != null)
                {
                    ClientCertificateThumbprint = (Property<string>)instance.ClientCertificateThumbprint.Clone(this);
                    ClientCertificateThumbprint.Initialize(instance.ClientCertificateThumbprint);
                }

                if (type != null && type.RequestType != null)
                {
                    RequestType = (Property<SecurityTokenRequestType>)type.RequestType.Clone(this);
                    RequestType.Initialize(type.RequestType);
                }
                else if (instance != null && instance.RequestType != null)
                {
                    RequestType = (Property<SecurityTokenRequestType>)instance.RequestType.Clone(this);
                    RequestType.Initialize(instance.RequestType);
                }

                if (type != null && type.SecurityPolicyUri != null)
                {
                    SecurityPolicyUri = (Property<string>)type.SecurityPolicyUri.Clone(this);
                    SecurityPolicyUri.Initialize(type.SecurityPolicyUri);
                }
                else if (instance != null && instance.SecurityPolicyUri != null)
                {
                    SecurityPolicyUri = (Property<string>)instance.SecurityPolicyUri.Clone(this);
                    SecurityPolicyUri.Initialize(instance.SecurityPolicyUri);
                }

                if (type != null && type.SecurityMode != null)
                {
                    SecurityMode = (Property<MessageSecurityMode>)type.SecurityMode.Clone(this);
                    SecurityMode.Initialize(type.SecurityMode);
                }
                else if (instance != null && instance.SecurityMode != null)
                {
                    SecurityMode = (Property<MessageSecurityMode>)instance.SecurityMode.Clone(this);
                    SecurityMode.Initialize(instance.SecurityMode);
                }

                if (type != null && type.RequestedLifetime != null)
                {
                    RequestedLifetime = (Property<double>)type.RequestedLifetime.Clone(this);
                    RequestedLifetime.Initialize(type.RequestedLifetime);
                }
                else if (instance != null && instance.RequestedLifetime != null)
                {
                    RequestedLifetime = (Property<double>)instance.RequestedLifetime.Clone(this);
                    RequestedLifetime.Initialize(instance.RequestedLifetime);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_clientCertificate = Property<byte[]>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ClientCertificate, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditOpenSecureChannelEventType_ClientCertificate);

            m_clientCertificateThumbprint = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ClientCertificateThumbprint, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditOpenSecureChannelEventType_ClientCertificateThumbprint);

            m_requestType = Property<SecurityTokenRequestType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.RequestType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditOpenSecureChannelEventType_RequestType);

            m_securityPolicyUri = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.SecurityPolicyUri, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditOpenSecureChannelEventType_SecurityPolicyUri);

            m_securityMode = Property<MessageSecurityMode>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.SecurityMode, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditOpenSecureChannelEventType_SecurityMode);

            m_requestedLifetime = Property<double>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.RequestedLifetime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditOpenSecureChannelEventType_RequestedLifetime);
        }
        #endregion

        #region Private Fields
        private AuditOpenSecureChannelEventType m_typeDefinition;
        Property<byte[]> m_clientCertificate;
        Property<string> m_clientCertificateThumbprint;
        Property<SecurityTokenRequestType> m_requestType;
        Property<string> m_securityPolicyUri;
        Property<MessageSecurityMode> m_securityMode;
        Property<double> m_requestedLifetime;
        #endregion
    }
    #endregion

    #region AuditSessionEventType Class
    /// <summary>
    /// Represents the AuditSessionEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditSessionEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AuditSessionEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AuditSessionEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AuditSessionEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AuditEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AuditSessionEventType FindSource(IServerInternal server)
        {
            AuditSessionEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AuditSessionEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AuditSessionEventType;

                if (type != null)
                {
                    return type;
                }

                type = new AuditSessionEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditSessionEventType clone = new AuditSessionEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region SessionId
        /// <summary>
        /// A description for the SessionId Property.
        /// </summary>
        public Property<NodeId> SessionId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_sessionId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_sessionId != null)
                    {
                        RemoveChild(m_sessionId);
                    }

                    m_sessionId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSessionId(Property<NodeId> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SessionId = replacement;

                SessionId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SessionId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditSessionEventType_SessionId,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AuditSessionEventType type = source as AuditSessionEventType;

                if (type != null && type.SessionId != null)
                {
                    SessionId = (Property<NodeId>)type.SessionId.Clone(this);
                    SessionId.Initialize(type.SessionId);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_sessionId = Property<NodeId>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditSessionEventType_SessionId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SessionId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditSessionEventType_SessionId);
        }
        #endregion

        #region Private Fields
        Property<NodeId> m_sessionId;
        #endregion
    }
    #endregion

    #region AuditSessionEvent Class
    /// <summary>
    /// Represents an instance of the AuditSessionEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditSessionEvent : AuditEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AuditSessionEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AuditSessionEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AuditSessionEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AuditSessionEvent instance = new AuditSessionEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AuditSessionEvent Construct(IServerInternal server)
        {
            AuditSessionEvent instance = new AuditSessionEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditSessionEvent clone = new AuditSessionEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region SessionId
        /// <summary>
        /// A description for the SessionId Property.
        /// </summary>
        public Property<NodeId> SessionId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_sessionId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_sessionId != null)
                    {
                        RemoveChild(m_sessionId);
                    }

                    m_sessionId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSessionId(Property<NodeId> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SessionId = replacement;

                SessionId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SessionId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditSessionEventType_SessionId,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AuditSessionEvent instance = source as AuditSessionEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AuditSessionEventType type = source as AuditSessionEventType;

                if (type != null && type.SessionId != null)
                {
                    SessionId = (Property<NodeId>)type.SessionId.Clone(this);
                    SessionId.Initialize(type.SessionId);
                }
                else if (instance != null && instance.SessionId != null)
                {
                    SessionId = (Property<NodeId>)instance.SessionId.Clone(this);
                    SessionId.Initialize(instance.SessionId);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_sessionId = Property<NodeId>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.SessionId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditSessionEventType_SessionId);
        }
        #endregion

        #region Private Fields
        private AuditSessionEventType m_typeDefinition;
        Property<NodeId> m_sessionId;
        #endregion
    }
    #endregion

    #region AuditCreateSessionEventType Class
    /// <summary>
    /// Represents the AuditCreateSessionEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditCreateSessionEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AuditCreateSessionEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AuditCreateSessionEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AuditCreateSessionEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AuditSessionEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AuditCreateSessionEventType FindSource(IServerInternal server)
        {
            AuditCreateSessionEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AuditCreateSessionEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AuditCreateSessionEventType;

                if (type != null)
                {
                    return type;
                }

                type = new AuditCreateSessionEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditCreateSessionEventType clone = new AuditCreateSessionEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region SecureChannelId
        /// <summary>
        /// A description for the SecureChannelId Property.
        /// </summary>
        public Property<string> SecureChannelId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_secureChannelId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_secureChannelId != null)
                    {
                        RemoveChild(m_secureChannelId);
                    }

                    m_secureChannelId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSecureChannelId(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SecureChannelId = replacement;

                SecureChannelId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SecureChannelId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditCreateSessionEventType_SecureChannelId,
                    null);
            }
        }
        #endregion

        #region ClientCertificate
        /// <summary>
        /// A description for the ClientCertificate Property.
        /// </summary>
        public Property<byte[]> ClientCertificate
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_clientCertificate; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_clientCertificate != null)
                    {
                        RemoveChild(m_clientCertificate);
                    }

                    m_clientCertificate = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceClientCertificate(Property<byte[]> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ClientCertificate = replacement;

                ClientCertificate.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ClientCertificate, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditCreateSessionEventType_ClientCertificate,
                    null);
            }
        }
        #endregion

        #region ClientCertificateThumbprint
        /// <summary>
        /// A description for the ClientCertificateThumbprint Property.
        /// </summary>
        public Property<string> ClientCertificateThumbprint
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_clientCertificateThumbprint; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_clientCertificateThumbprint != null)
                    {
                        RemoveChild(m_clientCertificateThumbprint);
                    }

                    m_clientCertificateThumbprint = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceClientCertificateThumbprint(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ClientCertificateThumbprint = replacement;

                ClientCertificateThumbprint.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ClientCertificateThumbprint, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditCreateSessionEventType_ClientCertificateThumbprint,
                    null);
            }
        }
        #endregion

        #region RevisedSessionTimeout
        /// <summary>
        /// A description for the RevisedSessionTimeout Property.
        /// </summary>
        public Property<double> RevisedSessionTimeout
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_revisedSessionTimeout; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_revisedSessionTimeout != null)
                    {
                        RemoveChild(m_revisedSessionTimeout);
                    }

                    m_revisedSessionTimeout = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceRevisedSessionTimeout(Property<double> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                RevisedSessionTimeout = replacement;

                RevisedSessionTimeout.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.RevisedSessionTimeout, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditCreateSessionEventType_RevisedSessionTimeout,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AuditCreateSessionEventType type = source as AuditCreateSessionEventType;

                if (type != null && type.SecureChannelId != null)
                {
                    SecureChannelId = (Property<string>)type.SecureChannelId.Clone(this);
                    SecureChannelId.Initialize(type.SecureChannelId);
                }

                if (type != null && type.ClientCertificate != null)
                {
                    ClientCertificate = (Property<byte[]>)type.ClientCertificate.Clone(this);
                    ClientCertificate.Initialize(type.ClientCertificate);
                }

                if (type != null && type.ClientCertificateThumbprint != null)
                {
                    ClientCertificateThumbprint = (Property<string>)type.ClientCertificateThumbprint.Clone(this);
                    ClientCertificateThumbprint.Initialize(type.ClientCertificateThumbprint);
                }

                if (type != null && type.RevisedSessionTimeout != null)
                {
                    RevisedSessionTimeout = (Property<double>)type.RevisedSessionTimeout.Clone(this);
                    RevisedSessionTimeout.Initialize(type.RevisedSessionTimeout);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_secureChannelId = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditCreateSessionEventType_SecureChannelId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SecureChannelId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditCreateSessionEventType_SecureChannelId);

            m_clientCertificate = Property<byte[]>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditCreateSessionEventType_ClientCertificate, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ClientCertificate, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditCreateSessionEventType_ClientCertificate);

            m_clientCertificateThumbprint = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditCreateSessionEventType_ClientCertificateThumbprint, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ClientCertificateThumbprint, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditCreateSessionEventType_ClientCertificateThumbprint);

            m_revisedSessionTimeout = Property<double>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditCreateSessionEventType_RevisedSessionTimeout, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.RevisedSessionTimeout, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditCreateSessionEventType_RevisedSessionTimeout);
        }
        #endregion

        #region Private Fields
        Property<string> m_secureChannelId;
        Property<byte[]> m_clientCertificate;
        Property<string> m_clientCertificateThumbprint;
        Property<double> m_revisedSessionTimeout;
        #endregion
    }
    #endregion

    #region AuditCreateSessionEvent Class
    /// <summary>
    /// Represents an instance of the AuditCreateSessionEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditCreateSessionEvent : AuditSessionEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AuditCreateSessionEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AuditCreateSessionEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AuditCreateSessionEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AuditCreateSessionEvent instance = new AuditCreateSessionEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AuditCreateSessionEvent Construct(IServerInternal server)
        {
            AuditCreateSessionEvent instance = new AuditCreateSessionEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditCreateSessionEvent clone = new AuditCreateSessionEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region SecureChannelId
        /// <summary>
        /// A description for the SecureChannelId Property.
        /// </summary>
        public Property<string> SecureChannelId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_secureChannelId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_secureChannelId != null)
                    {
                        RemoveChild(m_secureChannelId);
                    }

                    m_secureChannelId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSecureChannelId(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SecureChannelId = replacement;

                SecureChannelId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SecureChannelId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditCreateSessionEventType_SecureChannelId,
                    null);
            }
        }
        #endregion

        #region ClientCertificate
        /// <summary>
        /// A description for the ClientCertificate Property.
        /// </summary>
        public Property<byte[]> ClientCertificate
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_clientCertificate; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_clientCertificate != null)
                    {
                        RemoveChild(m_clientCertificate);
                    }

                    m_clientCertificate = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceClientCertificate(Property<byte[]> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ClientCertificate = replacement;

                ClientCertificate.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ClientCertificate, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditCreateSessionEventType_ClientCertificate,
                    null);
            }
        }
        #endregion

        #region ClientCertificateThumbprint
        /// <summary>
        /// A description for the ClientCertificateThumbprint Property.
        /// </summary>
        public Property<string> ClientCertificateThumbprint
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_clientCertificateThumbprint; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_clientCertificateThumbprint != null)
                    {
                        RemoveChild(m_clientCertificateThumbprint);
                    }

                    m_clientCertificateThumbprint = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceClientCertificateThumbprint(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ClientCertificateThumbprint = replacement;

                ClientCertificateThumbprint.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ClientCertificateThumbprint, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditCreateSessionEventType_ClientCertificateThumbprint,
                    null);
            }
        }
        #endregion

        #region RevisedSessionTimeout
        /// <summary>
        /// A description for the RevisedSessionTimeout Property.
        /// </summary>
        public Property<double> RevisedSessionTimeout
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_revisedSessionTimeout; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_revisedSessionTimeout != null)
                    {
                        RemoveChild(m_revisedSessionTimeout);
                    }

                    m_revisedSessionTimeout = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceRevisedSessionTimeout(Property<double> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                RevisedSessionTimeout = replacement;

                RevisedSessionTimeout.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.RevisedSessionTimeout, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditCreateSessionEventType_RevisedSessionTimeout,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AuditCreateSessionEvent instance = source as AuditCreateSessionEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AuditCreateSessionEventType type = source as AuditCreateSessionEventType;

                if (type != null && type.SecureChannelId != null)
                {
                    SecureChannelId = (Property<string>)type.SecureChannelId.Clone(this);
                    SecureChannelId.Initialize(type.SecureChannelId);
                }
                else if (instance != null && instance.SecureChannelId != null)
                {
                    SecureChannelId = (Property<string>)instance.SecureChannelId.Clone(this);
                    SecureChannelId.Initialize(instance.SecureChannelId);
                }

                if (type != null && type.ClientCertificate != null)
                {
                    ClientCertificate = (Property<byte[]>)type.ClientCertificate.Clone(this);
                    ClientCertificate.Initialize(type.ClientCertificate);
                }
                else if (instance != null && instance.ClientCertificate != null)
                {
                    ClientCertificate = (Property<byte[]>)instance.ClientCertificate.Clone(this);
                    ClientCertificate.Initialize(instance.ClientCertificate);
                }

                if (type != null && type.ClientCertificateThumbprint != null)
                {
                    ClientCertificateThumbprint = (Property<string>)type.ClientCertificateThumbprint.Clone(this);
                    ClientCertificateThumbprint.Initialize(type.ClientCertificateThumbprint);
                }
                else if (instance != null && instance.ClientCertificateThumbprint != null)
                {
                    ClientCertificateThumbprint = (Property<string>)instance.ClientCertificateThumbprint.Clone(this);
                    ClientCertificateThumbprint.Initialize(instance.ClientCertificateThumbprint);
                }

                if (type != null && type.RevisedSessionTimeout != null)
                {
                    RevisedSessionTimeout = (Property<double>)type.RevisedSessionTimeout.Clone(this);
                    RevisedSessionTimeout.Initialize(type.RevisedSessionTimeout);
                }
                else if (instance != null && instance.RevisedSessionTimeout != null)
                {
                    RevisedSessionTimeout = (Property<double>)instance.RevisedSessionTimeout.Clone(this);
                    RevisedSessionTimeout.Initialize(instance.RevisedSessionTimeout);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_secureChannelId = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.SecureChannelId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditCreateSessionEventType_SecureChannelId);

            m_clientCertificate = Property<byte[]>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ClientCertificate, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditCreateSessionEventType_ClientCertificate);

            m_clientCertificateThumbprint = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ClientCertificateThumbprint, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditCreateSessionEventType_ClientCertificateThumbprint);

            m_revisedSessionTimeout = Property<double>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.RevisedSessionTimeout, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditCreateSessionEventType_RevisedSessionTimeout);
        }
        #endregion

        #region Private Fields
        private AuditCreateSessionEventType m_typeDefinition;
        Property<string> m_secureChannelId;
        Property<byte[]> m_clientCertificate;
        Property<string> m_clientCertificateThumbprint;
        Property<double> m_revisedSessionTimeout;
        #endregion
    }
    #endregion

    #region AuditUrlMismatchEventType Class
    /// <summary>
    /// Represents the AuditUrlMismatchEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditUrlMismatchEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AuditUrlMismatchEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AuditUrlMismatchEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AuditUrlMismatchEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AuditCreateSessionEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AuditUrlMismatchEventType FindSource(IServerInternal server)
        {
            AuditUrlMismatchEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AuditUrlMismatchEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AuditUrlMismatchEventType;

                if (type != null)
                {
                    return type;
                }

                type = new AuditUrlMismatchEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditUrlMismatchEventType clone = new AuditUrlMismatchEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region EndpointUrl
        /// <summary>
        /// A description for the EndpointUrl Property.
        /// </summary>
        public Property<string> EndpointUrl
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_endpointUrl; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_endpointUrl != null)
                    {
                        RemoveChild(m_endpointUrl);
                    }

                    m_endpointUrl = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceEndpointUrl(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                EndpointUrl = replacement;

                EndpointUrl.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.EndpointUrl, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditUrlMismatchEventType_EndpointUrl,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AuditUrlMismatchEventType type = source as AuditUrlMismatchEventType;

                if (type != null && type.EndpointUrl != null)
                {
                    EndpointUrl = (Property<string>)type.EndpointUrl.Clone(this);
                    EndpointUrl.Initialize(type.EndpointUrl);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_endpointUrl = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditUrlMismatchEventType_EndpointUrl, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.EndpointUrl, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditUrlMismatchEventType_EndpointUrl);
        }
        #endregion

        #region Private Fields
        Property<string> m_endpointUrl;
        #endregion
    }
    #endregion

    #region AuditUrlMismatchEvent Class
    /// <summary>
    /// Represents an instance of the AuditUrlMismatchEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditUrlMismatchEvent : AuditCreateSessionEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AuditUrlMismatchEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AuditUrlMismatchEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AuditUrlMismatchEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AuditUrlMismatchEvent instance = new AuditUrlMismatchEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AuditUrlMismatchEvent Construct(IServerInternal server)
        {
            AuditUrlMismatchEvent instance = new AuditUrlMismatchEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditUrlMismatchEvent clone = new AuditUrlMismatchEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region EndpointUrl
        /// <summary>
        /// A description for the EndpointUrl Property.
        /// </summary>
        public Property<string> EndpointUrl
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_endpointUrl; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_endpointUrl != null)
                    {
                        RemoveChild(m_endpointUrl);
                    }

                    m_endpointUrl = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceEndpointUrl(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                EndpointUrl = replacement;

                EndpointUrl.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.EndpointUrl, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditUrlMismatchEventType_EndpointUrl,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AuditUrlMismatchEvent instance = source as AuditUrlMismatchEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AuditUrlMismatchEventType type = source as AuditUrlMismatchEventType;

                if (type != null && type.EndpointUrl != null)
                {
                    EndpointUrl = (Property<string>)type.EndpointUrl.Clone(this);
                    EndpointUrl.Initialize(type.EndpointUrl);
                }
                else if (instance != null && instance.EndpointUrl != null)
                {
                    EndpointUrl = (Property<string>)instance.EndpointUrl.Clone(this);
                    EndpointUrl.Initialize(instance.EndpointUrl);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_endpointUrl = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.EndpointUrl, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditUrlMismatchEventType_EndpointUrl);
        }
        #endregion

        #region Private Fields
        private AuditUrlMismatchEventType m_typeDefinition;
        Property<string> m_endpointUrl;
        #endregion
    }
    #endregion

    #region AuditActivateSessionEventType Class
    /// <summary>
    /// Represents the AuditActivateSessionEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditActivateSessionEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AuditActivateSessionEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AuditActivateSessionEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AuditActivateSessionEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AuditSessionEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AuditActivateSessionEventType FindSource(IServerInternal server)
        {
            AuditActivateSessionEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AuditActivateSessionEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AuditActivateSessionEventType;

                if (type != null)
                {
                    return type;
                }

                type = new AuditActivateSessionEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditActivateSessionEventType clone = new AuditActivateSessionEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region ClientSoftwareCertificates
        /// <summary>
        /// A description for the ClientSoftwareCertificates Property.
        /// </summary>
        public Property<IList<SignedSoftwareCertificate>> ClientSoftwareCertificates
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_clientSoftwareCertificates; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_clientSoftwareCertificates != null)
                    {
                        RemoveChild(m_clientSoftwareCertificates);
                    }

                    m_clientSoftwareCertificates = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceClientSoftwareCertificates(Property<IList<SignedSoftwareCertificate>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ClientSoftwareCertificates = replacement;

                ClientSoftwareCertificates.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ClientSoftwareCertificates, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditActivateSessionEventType_ClientSoftwareCertificates,
                    null);
            }
        }
        #endregion

        #region UserIdentityToken
        /// <summary>
        /// A description for the UserIdentityToken Property.
        /// </summary>
        public Property<IEncodeable> UserIdentityToken
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_userIdentityToken; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_userIdentityToken != null)
                    {
                        RemoveChild(m_userIdentityToken);
                    }

                    m_userIdentityToken = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceUserIdentityToken(Property<IEncodeable> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                UserIdentityToken = replacement;

                UserIdentityToken.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.UserIdentityToken, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditActivateSessionEventType_UserIdentityToken,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AuditActivateSessionEventType type = source as AuditActivateSessionEventType;

                if (type != null && type.ClientSoftwareCertificates != null)
                {
                    ClientSoftwareCertificates = (Property<IList<SignedSoftwareCertificate>>)type.ClientSoftwareCertificates.Clone(this);
                    ClientSoftwareCertificates.Initialize(type.ClientSoftwareCertificates);
                }

                if (type != null && type.UserIdentityToken != null)
                {
                    UserIdentityToken = (Property<IEncodeable>)type.UserIdentityToken.Clone(this);
                    UserIdentityToken.Initialize(type.UserIdentityToken);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_clientSoftwareCertificates = Property<IList<SignedSoftwareCertificate>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditActivateSessionEventType_ClientSoftwareCertificates, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ClientSoftwareCertificates, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditActivateSessionEventType_ClientSoftwareCertificates);

            m_userIdentityToken = Property<IEncodeable>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditActivateSessionEventType_UserIdentityToken, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.UserIdentityToken, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditActivateSessionEventType_UserIdentityToken);
        }
        #endregion

        #region Private Fields
        Property<IList<SignedSoftwareCertificate>> m_clientSoftwareCertificates;
        Property<IEncodeable> m_userIdentityToken;
        #endregion
    }
    #endregion

    #region AuditActivateSessionEvent Class
    /// <summary>
    /// Represents an instance of the AuditActivateSessionEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditActivateSessionEvent : AuditSessionEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AuditActivateSessionEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AuditActivateSessionEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AuditActivateSessionEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AuditActivateSessionEvent instance = new AuditActivateSessionEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AuditActivateSessionEvent Construct(IServerInternal server)
        {
            AuditActivateSessionEvent instance = new AuditActivateSessionEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditActivateSessionEvent clone = new AuditActivateSessionEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region ClientSoftwareCertificates
        /// <summary>
        /// A description for the ClientSoftwareCertificates Property.
        /// </summary>
        public Property<IList<SignedSoftwareCertificate>> ClientSoftwareCertificates
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_clientSoftwareCertificates; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_clientSoftwareCertificates != null)
                    {
                        RemoveChild(m_clientSoftwareCertificates);
                    }

                    m_clientSoftwareCertificates = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceClientSoftwareCertificates(Property<IList<SignedSoftwareCertificate>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ClientSoftwareCertificates = replacement;

                ClientSoftwareCertificates.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ClientSoftwareCertificates, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditActivateSessionEventType_ClientSoftwareCertificates,
                    null);
            }
        }
        #endregion

        #region UserIdentityToken
        /// <summary>
        /// A description for the UserIdentityToken Property.
        /// </summary>
        public Property<IEncodeable> UserIdentityToken
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_userIdentityToken; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_userIdentityToken != null)
                    {
                        RemoveChild(m_userIdentityToken);
                    }

                    m_userIdentityToken = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceUserIdentityToken(Property<IEncodeable> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                UserIdentityToken = replacement;

                UserIdentityToken.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.UserIdentityToken, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditActivateSessionEventType_UserIdentityToken,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AuditActivateSessionEvent instance = source as AuditActivateSessionEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AuditActivateSessionEventType type = source as AuditActivateSessionEventType;

                if (type != null && type.ClientSoftwareCertificates != null)
                {
                    ClientSoftwareCertificates = (Property<IList<SignedSoftwareCertificate>>)type.ClientSoftwareCertificates.Clone(this);
                    ClientSoftwareCertificates.Initialize(type.ClientSoftwareCertificates);
                }
                else if (instance != null && instance.ClientSoftwareCertificates != null)
                {
                    ClientSoftwareCertificates = (Property<IList<SignedSoftwareCertificate>>)instance.ClientSoftwareCertificates.Clone(this);
                    ClientSoftwareCertificates.Initialize(instance.ClientSoftwareCertificates);
                }

                if (type != null && type.UserIdentityToken != null)
                {
                    UserIdentityToken = (Property<IEncodeable>)type.UserIdentityToken.Clone(this);
                    UserIdentityToken.Initialize(type.UserIdentityToken);
                }
                else if (instance != null && instance.UserIdentityToken != null)
                {
                    UserIdentityToken = (Property<IEncodeable>)instance.UserIdentityToken.Clone(this);
                    UserIdentityToken.Initialize(instance.UserIdentityToken);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_clientSoftwareCertificates = Property<IList<SignedSoftwareCertificate>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ClientSoftwareCertificates, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditActivateSessionEventType_ClientSoftwareCertificates);

            m_userIdentityToken = Property<IEncodeable>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.UserIdentityToken, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditActivateSessionEventType_UserIdentityToken);
        }
        #endregion

        #region Private Fields
        private AuditActivateSessionEventType m_typeDefinition;
        Property<IList<SignedSoftwareCertificate>> m_clientSoftwareCertificates;
        Property<IEncodeable> m_userIdentityToken;
        #endregion
    }
    #endregion

    #region AuditCancelEventType Class
    /// <summary>
    /// Represents the AuditCancelEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditCancelEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AuditCancelEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AuditCancelEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AuditCancelEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AuditSessionEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AuditCancelEventType FindSource(IServerInternal server)
        {
            AuditCancelEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AuditCancelEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AuditCancelEventType;

                if (type != null)
                {
                    return type;
                }

                type = new AuditCancelEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditCancelEventType clone = new AuditCancelEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region RequestHandle
        /// <summary>
        /// A description for the RequestHandle Property.
        /// </summary>
        public Property<uint> RequestHandle
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_requestHandle; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_requestHandle != null)
                    {
                        RemoveChild(m_requestHandle);
                    }

                    m_requestHandle = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceRequestHandle(Property<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                RequestHandle = replacement;

                RequestHandle.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.RequestHandle, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditCancelEventType_RequestHandle,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AuditCancelEventType type = source as AuditCancelEventType;

                if (type != null && type.RequestHandle != null)
                {
                    RequestHandle = (Property<uint>)type.RequestHandle.Clone(this);
                    RequestHandle.Initialize(type.RequestHandle);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_requestHandle = Property<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditCancelEventType_RequestHandle, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.RequestHandle, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditCancelEventType_RequestHandle);
        }
        #endregion

        #region Private Fields
        Property<uint> m_requestHandle;
        #endregion
    }
    #endregion

    #region AuditCancelEvent Class
    /// <summary>
    /// Represents an instance of the AuditCancelEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditCancelEvent : AuditSessionEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AuditCancelEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AuditCancelEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AuditCancelEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AuditCancelEvent instance = new AuditCancelEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AuditCancelEvent Construct(IServerInternal server)
        {
            AuditCancelEvent instance = new AuditCancelEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditCancelEvent clone = new AuditCancelEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region RequestHandle
        /// <summary>
        /// A description for the RequestHandle Property.
        /// </summary>
        public Property<uint> RequestHandle
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_requestHandle; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_requestHandle != null)
                    {
                        RemoveChild(m_requestHandle);
                    }

                    m_requestHandle = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceRequestHandle(Property<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                RequestHandle = replacement;

                RequestHandle.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.RequestHandle, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditCancelEventType_RequestHandle,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AuditCancelEvent instance = source as AuditCancelEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AuditCancelEventType type = source as AuditCancelEventType;

                if (type != null && type.RequestHandle != null)
                {
                    RequestHandle = (Property<uint>)type.RequestHandle.Clone(this);
                    RequestHandle.Initialize(type.RequestHandle);
                }
                else if (instance != null && instance.RequestHandle != null)
                {
                    RequestHandle = (Property<uint>)instance.RequestHandle.Clone(this);
                    RequestHandle.Initialize(instance.RequestHandle);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_requestHandle = Property<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.RequestHandle, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditCancelEventType_RequestHandle);
        }
        #endregion

        #region Private Fields
        private AuditCancelEventType m_typeDefinition;
        Property<uint> m_requestHandle;
        #endregion
    }
    #endregion

    #region AuditCertificateEventType Class
    /// <summary>
    /// Represents the AuditCertificateEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditCertificateEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AuditCertificateEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AuditCertificateEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AuditCertificateEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AuditSecurityEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AuditCertificateEventType FindSource(IServerInternal server)
        {
            AuditCertificateEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AuditCertificateEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AuditCertificateEventType;

                if (type != null)
                {
                    return type;
                }

                type = new AuditCertificateEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditCertificateEventType clone = new AuditCertificateEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region Certificate
        /// <summary>
        /// A description for the Certificate Property.
        /// </summary>
        public Property<byte[]> Certificate
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_certificate; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_certificate != null)
                    {
                        RemoveChild(m_certificate);
                    }

                    m_certificate = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCertificate(Property<byte[]> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Certificate = replacement;

                Certificate.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Certificate, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditCertificateEventType_Certificate,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AuditCertificateEventType type = source as AuditCertificateEventType;

                if (type != null && type.Certificate != null)
                {
                    Certificate = (Property<byte[]>)type.Certificate.Clone(this);
                    Certificate.Initialize(type.Certificate);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_certificate = Property<byte[]>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditCertificateEventType_Certificate, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Certificate, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditCertificateEventType_Certificate);
        }
        #endregion

        #region Private Fields
        Property<byte[]> m_certificate;
        #endregion
    }
    #endregion

    #region AuditCertificateEvent Class
    /// <summary>
    /// Represents an instance of the AuditCertificateEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditCertificateEvent : AuditSecurityEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AuditCertificateEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AuditCertificateEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AuditCertificateEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AuditCertificateEvent instance = new AuditCertificateEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AuditCertificateEvent Construct(IServerInternal server)
        {
            AuditCertificateEvent instance = new AuditCertificateEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditCertificateEvent clone = new AuditCertificateEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region Certificate
        /// <summary>
        /// A description for the Certificate Property.
        /// </summary>
        public Property<byte[]> Certificate
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_certificate; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_certificate != null)
                    {
                        RemoveChild(m_certificate);
                    }

                    m_certificate = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCertificate(Property<byte[]> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Certificate = replacement;

                Certificate.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Certificate, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditCertificateEventType_Certificate,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AuditCertificateEvent instance = source as AuditCertificateEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AuditCertificateEventType type = source as AuditCertificateEventType;

                if (type != null && type.Certificate != null)
                {
                    Certificate = (Property<byte[]>)type.Certificate.Clone(this);
                    Certificate.Initialize(type.Certificate);
                }
                else if (instance != null && instance.Certificate != null)
                {
                    Certificate = (Property<byte[]>)instance.Certificate.Clone(this);
                    Certificate.Initialize(instance.Certificate);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_certificate = Property<byte[]>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Certificate, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditCertificateEventType_Certificate);
        }
        #endregion

        #region Private Fields
        private AuditCertificateEventType m_typeDefinition;
        Property<byte[]> m_certificate;
        #endregion
    }
    #endregion

    #region AuditCertificateDataMismatchEventType Class
    /// <summary>
    /// Represents the AuditCertificateDataMismatchEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditCertificateDataMismatchEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AuditCertificateDataMismatchEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AuditCertificateDataMismatchEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AuditCertificateDataMismatchEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AuditCertificateEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AuditCertificateDataMismatchEventType FindSource(IServerInternal server)
        {
            AuditCertificateDataMismatchEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AuditCertificateDataMismatchEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AuditCertificateDataMismatchEventType;

                if (type != null)
                {
                    return type;
                }

                type = new AuditCertificateDataMismatchEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditCertificateDataMismatchEventType clone = new AuditCertificateDataMismatchEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region InvalidHostname
        /// <summary>
        /// A description for the InvalidHostname Property.
        /// </summary>
        public Property<string> InvalidHostname
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_invalidHostname; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_invalidHostname != null)
                    {
                        RemoveChild(m_invalidHostname);
                    }

                    m_invalidHostname = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceInvalidHostname(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                InvalidHostname = replacement;

                InvalidHostname.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.InvalidHostname, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditCertificateDataMismatchEventType_InvalidHostname,
                    null);
            }
        }
        #endregion

        #region InvalidUri
        /// <summary>
        /// A description for the InvalidUri Property.
        /// </summary>
        public Property<string> InvalidUri
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_invalidUri; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_invalidUri != null)
                    {
                        RemoveChild(m_invalidUri);
                    }

                    m_invalidUri = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceInvalidUri(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                InvalidUri = replacement;

                InvalidUri.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.InvalidUri, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditCertificateDataMismatchEventType_InvalidUri,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AuditCertificateDataMismatchEventType type = source as AuditCertificateDataMismatchEventType;

                if (type != null && type.InvalidHostname != null)
                {
                    InvalidHostname = (Property<string>)type.InvalidHostname.Clone(this);
                    InvalidHostname.Initialize(type.InvalidHostname);
                }

                if (type != null && type.InvalidUri != null)
                {
                    InvalidUri = (Property<string>)type.InvalidUri.Clone(this);
                    InvalidUri.Initialize(type.InvalidUri);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_invalidHostname = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditCertificateDataMismatchEventType_InvalidHostname, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.InvalidHostname, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditCertificateDataMismatchEventType_InvalidHostname);

            m_invalidUri = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditCertificateDataMismatchEventType_InvalidUri, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.InvalidUri, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditCertificateDataMismatchEventType_InvalidUri);
        }
        #endregion

        #region Private Fields
        Property<string> m_invalidHostname;
        Property<string> m_invalidUri;
        #endregion
    }
    #endregion

    #region AuditCertificateDataMismatchEvent Class
    /// <summary>
    /// Represents an instance of the AuditCertificateDataMismatchEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditCertificateDataMismatchEvent : AuditCertificateEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AuditCertificateDataMismatchEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AuditCertificateDataMismatchEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AuditCertificateDataMismatchEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AuditCertificateDataMismatchEvent instance = new AuditCertificateDataMismatchEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AuditCertificateDataMismatchEvent Construct(IServerInternal server)
        {
            AuditCertificateDataMismatchEvent instance = new AuditCertificateDataMismatchEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditCertificateDataMismatchEvent clone = new AuditCertificateDataMismatchEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region InvalidHostname
        /// <summary>
        /// A description for the InvalidHostname Property.
        /// </summary>
        public Property<string> InvalidHostname
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_invalidHostname; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_invalidHostname != null)
                    {
                        RemoveChild(m_invalidHostname);
                    }

                    m_invalidHostname = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceInvalidHostname(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                InvalidHostname = replacement;

                InvalidHostname.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.InvalidHostname, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditCertificateDataMismatchEventType_InvalidHostname,
                    null);
            }
        }
        #endregion

        #region InvalidUri
        /// <summary>
        /// A description for the InvalidUri Property.
        /// </summary>
        public Property<string> InvalidUri
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_invalidUri; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_invalidUri != null)
                    {
                        RemoveChild(m_invalidUri);
                    }

                    m_invalidUri = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceInvalidUri(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                InvalidUri = replacement;

                InvalidUri.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.InvalidUri, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditCertificateDataMismatchEventType_InvalidUri,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AuditCertificateDataMismatchEvent instance = source as AuditCertificateDataMismatchEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AuditCertificateDataMismatchEventType type = source as AuditCertificateDataMismatchEventType;

                if (type != null && type.InvalidHostname != null)
                {
                    InvalidHostname = (Property<string>)type.InvalidHostname.Clone(this);
                    InvalidHostname.Initialize(type.InvalidHostname);
                }
                else if (instance != null && instance.InvalidHostname != null)
                {
                    InvalidHostname = (Property<string>)instance.InvalidHostname.Clone(this);
                    InvalidHostname.Initialize(instance.InvalidHostname);
                }

                if (type != null && type.InvalidUri != null)
                {
                    InvalidUri = (Property<string>)type.InvalidUri.Clone(this);
                    InvalidUri.Initialize(type.InvalidUri);
                }
                else if (instance != null && instance.InvalidUri != null)
                {
                    InvalidUri = (Property<string>)instance.InvalidUri.Clone(this);
                    InvalidUri.Initialize(instance.InvalidUri);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_invalidHostname = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.InvalidHostname, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditCertificateDataMismatchEventType_InvalidHostname);

            m_invalidUri = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.InvalidUri, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditCertificateDataMismatchEventType_InvalidUri);
        }
        #endregion

        #region Private Fields
        private AuditCertificateDataMismatchEventType m_typeDefinition;
        Property<string> m_invalidHostname;
        Property<string> m_invalidUri;
        #endregion
    }
    #endregion

    #region AuditCertificateExpiredEventType Class
    /// <summary>
    /// Represents the AuditCertificateExpiredEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditCertificateExpiredEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AuditCertificateExpiredEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AuditCertificateExpiredEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AuditCertificateExpiredEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AuditCertificateEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AuditCertificateExpiredEventType FindSource(IServerInternal server)
        {
            AuditCertificateExpiredEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AuditCertificateExpiredEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AuditCertificateExpiredEventType;

                if (type != null)
                {
                    return type;
                }

                type = new AuditCertificateExpiredEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditCertificateExpiredEventType clone = new AuditCertificateExpiredEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AuditCertificateExpiredEventType type = source as AuditCertificateExpiredEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endregion

    #region AuditCertificateExpiredEvent Class
    /// <summary>
    /// Represents an instance of the AuditCertificateExpiredEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditCertificateExpiredEvent : AuditCertificateEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AuditCertificateExpiredEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AuditCertificateExpiredEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AuditCertificateExpiredEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AuditCertificateExpiredEvent instance = new AuditCertificateExpiredEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AuditCertificateExpiredEvent Construct(IServerInternal server)
        {
            AuditCertificateExpiredEvent instance = new AuditCertificateExpiredEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditCertificateExpiredEvent clone = new AuditCertificateExpiredEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AuditCertificateExpiredEvent instance = source as AuditCertificateExpiredEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AuditCertificateExpiredEventType type = source as AuditCertificateExpiredEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private AuditCertificateExpiredEventType m_typeDefinition;
        #endregion
    }
    #endregion

    #region AuditCertificateInvalidEventType Class
    /// <summary>
    /// Represents the AuditCertificateInvalidEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditCertificateInvalidEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AuditCertificateInvalidEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AuditCertificateInvalidEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AuditCertificateInvalidEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AuditCertificateEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AuditCertificateInvalidEventType FindSource(IServerInternal server)
        {
            AuditCertificateInvalidEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AuditCertificateInvalidEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AuditCertificateInvalidEventType;

                if (type != null)
                {
                    return type;
                }

                type = new AuditCertificateInvalidEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditCertificateInvalidEventType clone = new AuditCertificateInvalidEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AuditCertificateInvalidEventType type = source as AuditCertificateInvalidEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endregion

    #region AuditCertificateInvalidEvent Class
    /// <summary>
    /// Represents an instance of the AuditCertificateInvalidEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditCertificateInvalidEvent : AuditCertificateEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AuditCertificateInvalidEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AuditCertificateInvalidEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AuditCertificateInvalidEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AuditCertificateInvalidEvent instance = new AuditCertificateInvalidEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AuditCertificateInvalidEvent Construct(IServerInternal server)
        {
            AuditCertificateInvalidEvent instance = new AuditCertificateInvalidEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditCertificateInvalidEvent clone = new AuditCertificateInvalidEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AuditCertificateInvalidEvent instance = source as AuditCertificateInvalidEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AuditCertificateInvalidEventType type = source as AuditCertificateInvalidEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private AuditCertificateInvalidEventType m_typeDefinition;
        #endregion
    }
    #endregion

    #region AuditCertificateUntrustedEventType Class
    /// <summary>
    /// Represents the AuditCertificateUntrustedEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditCertificateUntrustedEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AuditCertificateUntrustedEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AuditCertificateUntrustedEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AuditCertificateUntrustedEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AuditCertificateEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AuditCertificateUntrustedEventType FindSource(IServerInternal server)
        {
            AuditCertificateUntrustedEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AuditCertificateUntrustedEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AuditCertificateUntrustedEventType;

                if (type != null)
                {
                    return type;
                }

                type = new AuditCertificateUntrustedEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditCertificateUntrustedEventType clone = new AuditCertificateUntrustedEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AuditCertificateUntrustedEventType type = source as AuditCertificateUntrustedEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endregion

    #region AuditCertificateUntrustedEvent Class
    /// <summary>
    /// Represents an instance of the AuditCertificateUntrustedEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditCertificateUntrustedEvent : AuditCertificateEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AuditCertificateUntrustedEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AuditCertificateUntrustedEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AuditCertificateUntrustedEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AuditCertificateUntrustedEvent instance = new AuditCertificateUntrustedEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AuditCertificateUntrustedEvent Construct(IServerInternal server)
        {
            AuditCertificateUntrustedEvent instance = new AuditCertificateUntrustedEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditCertificateUntrustedEvent clone = new AuditCertificateUntrustedEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AuditCertificateUntrustedEvent instance = source as AuditCertificateUntrustedEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AuditCertificateUntrustedEventType type = source as AuditCertificateUntrustedEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private AuditCertificateUntrustedEventType m_typeDefinition;
        #endregion
    }
    #endregion

    #region AuditCertificateRevokedEventType Class
    /// <summary>
    /// Represents the AuditCertificateRevokedEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditCertificateRevokedEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AuditCertificateRevokedEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AuditCertificateRevokedEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AuditCertificateRevokedEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AuditCertificateEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AuditCertificateRevokedEventType FindSource(IServerInternal server)
        {
            AuditCertificateRevokedEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AuditCertificateRevokedEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AuditCertificateRevokedEventType;

                if (type != null)
                {
                    return type;
                }

                type = new AuditCertificateRevokedEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditCertificateRevokedEventType clone = new AuditCertificateRevokedEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AuditCertificateRevokedEventType type = source as AuditCertificateRevokedEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endregion

    #region AuditCertificateRevokedEvent Class
    /// <summary>
    /// Represents an instance of the AuditCertificateRevokedEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditCertificateRevokedEvent : AuditCertificateEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AuditCertificateRevokedEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AuditCertificateRevokedEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AuditCertificateRevokedEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AuditCertificateRevokedEvent instance = new AuditCertificateRevokedEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AuditCertificateRevokedEvent Construct(IServerInternal server)
        {
            AuditCertificateRevokedEvent instance = new AuditCertificateRevokedEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditCertificateRevokedEvent clone = new AuditCertificateRevokedEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AuditCertificateRevokedEvent instance = source as AuditCertificateRevokedEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AuditCertificateRevokedEventType type = source as AuditCertificateRevokedEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private AuditCertificateRevokedEventType m_typeDefinition;
        #endregion
    }
    #endregion

    #region AuditCertificateMismatchEventType Class
    /// <summary>
    /// Represents the AuditCertificateMismatchEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditCertificateMismatchEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AuditCertificateMismatchEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AuditCertificateMismatchEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AuditCertificateMismatchEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AuditCertificateEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AuditCertificateMismatchEventType FindSource(IServerInternal server)
        {
            AuditCertificateMismatchEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AuditCertificateMismatchEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AuditCertificateMismatchEventType;

                if (type != null)
                {
                    return type;
                }

                type = new AuditCertificateMismatchEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditCertificateMismatchEventType clone = new AuditCertificateMismatchEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AuditCertificateMismatchEventType type = source as AuditCertificateMismatchEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endregion

    #region AuditCertificateMismatchEvent Class
    /// <summary>
    /// Represents an instance of the AuditCertificateMismatchEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditCertificateMismatchEvent : AuditCertificateEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AuditCertificateMismatchEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AuditCertificateMismatchEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AuditCertificateMismatchEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AuditCertificateMismatchEvent instance = new AuditCertificateMismatchEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AuditCertificateMismatchEvent Construct(IServerInternal server)
        {
            AuditCertificateMismatchEvent instance = new AuditCertificateMismatchEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditCertificateMismatchEvent clone = new AuditCertificateMismatchEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AuditCertificateMismatchEvent instance = source as AuditCertificateMismatchEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AuditCertificateMismatchEventType type = source as AuditCertificateMismatchEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private AuditCertificateMismatchEventType m_typeDefinition;
        #endregion
    }
    #endregion

    #region AuditNodeManagementEventType Class
    /// <summary>
    /// Represents the AuditNodeManagementEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditNodeManagementEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AuditNodeManagementEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AuditNodeManagementEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AuditNodeManagementEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AuditEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AuditNodeManagementEventType FindSource(IServerInternal server)
        {
            AuditNodeManagementEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AuditNodeManagementEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AuditNodeManagementEventType;

                if (type != null)
                {
                    return type;
                }

                type = new AuditNodeManagementEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditNodeManagementEventType clone = new AuditNodeManagementEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AuditNodeManagementEventType type = source as AuditNodeManagementEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endregion

    #region AuditNodeManagementEvent Class
    /// <summary>
    /// Represents an instance of the AuditNodeManagementEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditNodeManagementEvent : AuditEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AuditNodeManagementEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AuditNodeManagementEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AuditNodeManagementEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AuditNodeManagementEvent instance = new AuditNodeManagementEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AuditNodeManagementEvent Construct(IServerInternal server)
        {
            AuditNodeManagementEvent instance = new AuditNodeManagementEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditNodeManagementEvent clone = new AuditNodeManagementEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AuditNodeManagementEvent instance = source as AuditNodeManagementEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AuditNodeManagementEventType type = source as AuditNodeManagementEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private AuditNodeManagementEventType m_typeDefinition;
        #endregion
    }
    #endregion

    #region AuditAddNodesEventType Class
    /// <summary>
    /// Represents the AuditAddNodesEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditAddNodesEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AuditAddNodesEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AuditAddNodesEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AuditAddNodesEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AuditNodeManagementEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AuditAddNodesEventType FindSource(IServerInternal server)
        {
            AuditAddNodesEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AuditAddNodesEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AuditAddNodesEventType;

                if (type != null)
                {
                    return type;
                }

                type = new AuditAddNodesEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditAddNodesEventType clone = new AuditAddNodesEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region NodesToAdd
        /// <summary>
        /// A description for the NodesToAdd Property.
        /// </summary>
        public Property<IList<AddNodesItem>> NodesToAdd
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_nodesToAdd; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_nodesToAdd != null)
                    {
                        RemoveChild(m_nodesToAdd);
                    }

                    m_nodesToAdd = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceNodesToAdd(Property<IList<AddNodesItem>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                NodesToAdd = replacement;

                NodesToAdd.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.NodesToAdd, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditAddNodesEventType_NodesToAdd,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AuditAddNodesEventType type = source as AuditAddNodesEventType;

                if (type != null && type.NodesToAdd != null)
                {
                    NodesToAdd = (Property<IList<AddNodesItem>>)type.NodesToAdd.Clone(this);
                    NodesToAdd.Initialize(type.NodesToAdd);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_nodesToAdd = Property<IList<AddNodesItem>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditAddNodesEventType_NodesToAdd, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.NodesToAdd, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditAddNodesEventType_NodesToAdd);
        }
        #endregion

        #region Private Fields
        Property<IList<AddNodesItem>> m_nodesToAdd;
        #endregion
    }
    #endregion

    #region AuditAddNodesEvent Class
    /// <summary>
    /// Represents an instance of the AuditAddNodesEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditAddNodesEvent : AuditNodeManagementEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AuditAddNodesEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AuditAddNodesEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AuditAddNodesEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AuditAddNodesEvent instance = new AuditAddNodesEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AuditAddNodesEvent Construct(IServerInternal server)
        {
            AuditAddNodesEvent instance = new AuditAddNodesEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditAddNodesEvent clone = new AuditAddNodesEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region NodesToAdd
        /// <summary>
        /// A description for the NodesToAdd Property.
        /// </summary>
        public Property<IList<AddNodesItem>> NodesToAdd
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_nodesToAdd; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_nodesToAdd != null)
                    {
                        RemoveChild(m_nodesToAdd);
                    }

                    m_nodesToAdd = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceNodesToAdd(Property<IList<AddNodesItem>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                NodesToAdd = replacement;

                NodesToAdd.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.NodesToAdd, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditAddNodesEventType_NodesToAdd,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AuditAddNodesEvent instance = source as AuditAddNodesEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AuditAddNodesEventType type = source as AuditAddNodesEventType;

                if (type != null && type.NodesToAdd != null)
                {
                    NodesToAdd = (Property<IList<AddNodesItem>>)type.NodesToAdd.Clone(this);
                    NodesToAdd.Initialize(type.NodesToAdd);
                }
                else if (instance != null && instance.NodesToAdd != null)
                {
                    NodesToAdd = (Property<IList<AddNodesItem>>)instance.NodesToAdd.Clone(this);
                    NodesToAdd.Initialize(instance.NodesToAdd);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_nodesToAdd = Property<IList<AddNodesItem>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.NodesToAdd, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditAddNodesEventType_NodesToAdd);
        }
        #endregion

        #region Private Fields
        private AuditAddNodesEventType m_typeDefinition;
        Property<IList<AddNodesItem>> m_nodesToAdd;
        #endregion
    }
    #endregion

    #region AuditDeleteNodesEventType Class
    /// <summary>
    /// Represents the AuditDeleteNodesEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditDeleteNodesEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AuditDeleteNodesEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AuditDeleteNodesEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AuditDeleteNodesEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AuditNodeManagementEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AuditDeleteNodesEventType FindSource(IServerInternal server)
        {
            AuditDeleteNodesEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AuditDeleteNodesEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AuditDeleteNodesEventType;

                if (type != null)
                {
                    return type;
                }

                type = new AuditDeleteNodesEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditDeleteNodesEventType clone = new AuditDeleteNodesEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region NodesToDelete
        /// <summary>
        /// A description for the NodesToDelete Property.
        /// </summary>
        public Property<IList<DeleteNodesItem>> NodesToDelete
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_nodesToDelete; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_nodesToDelete != null)
                    {
                        RemoveChild(m_nodesToDelete);
                    }

                    m_nodesToDelete = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceNodesToDelete(Property<IList<DeleteNodesItem>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                NodesToDelete = replacement;

                NodesToDelete.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.NodesToDelete, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditDeleteNodesEventType_NodesToDelete,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AuditDeleteNodesEventType type = source as AuditDeleteNodesEventType;

                if (type != null && type.NodesToDelete != null)
                {
                    NodesToDelete = (Property<IList<DeleteNodesItem>>)type.NodesToDelete.Clone(this);
                    NodesToDelete.Initialize(type.NodesToDelete);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_nodesToDelete = Property<IList<DeleteNodesItem>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditDeleteNodesEventType_NodesToDelete, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.NodesToDelete, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditDeleteNodesEventType_NodesToDelete);
        }
        #endregion

        #region Private Fields
        Property<IList<DeleteNodesItem>> m_nodesToDelete;
        #endregion
    }
    #endregion

    #region AuditDeleteNodesEvent Class
    /// <summary>
    /// Represents an instance of the AuditDeleteNodesEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditDeleteNodesEvent : AuditNodeManagementEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AuditDeleteNodesEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AuditDeleteNodesEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AuditDeleteNodesEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AuditDeleteNodesEvent instance = new AuditDeleteNodesEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AuditDeleteNodesEvent Construct(IServerInternal server)
        {
            AuditDeleteNodesEvent instance = new AuditDeleteNodesEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditDeleteNodesEvent clone = new AuditDeleteNodesEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region NodesToDelete
        /// <summary>
        /// A description for the NodesToDelete Property.
        /// </summary>
        public Property<IList<DeleteNodesItem>> NodesToDelete
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_nodesToDelete; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_nodesToDelete != null)
                    {
                        RemoveChild(m_nodesToDelete);
                    }

                    m_nodesToDelete = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceNodesToDelete(Property<IList<DeleteNodesItem>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                NodesToDelete = replacement;

                NodesToDelete.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.NodesToDelete, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditDeleteNodesEventType_NodesToDelete,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AuditDeleteNodesEvent instance = source as AuditDeleteNodesEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AuditDeleteNodesEventType type = source as AuditDeleteNodesEventType;

                if (type != null && type.NodesToDelete != null)
                {
                    NodesToDelete = (Property<IList<DeleteNodesItem>>)type.NodesToDelete.Clone(this);
                    NodesToDelete.Initialize(type.NodesToDelete);
                }
                else if (instance != null && instance.NodesToDelete != null)
                {
                    NodesToDelete = (Property<IList<DeleteNodesItem>>)instance.NodesToDelete.Clone(this);
                    NodesToDelete.Initialize(instance.NodesToDelete);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_nodesToDelete = Property<IList<DeleteNodesItem>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.NodesToDelete, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditDeleteNodesEventType_NodesToDelete);
        }
        #endregion

        #region Private Fields
        private AuditDeleteNodesEventType m_typeDefinition;
        Property<IList<DeleteNodesItem>> m_nodesToDelete;
        #endregion
    }
    #endregion

    #region AuditAddReferencesEventType Class
    /// <summary>
    /// Represents the AuditAddReferencesEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditAddReferencesEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AuditAddReferencesEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AuditAddReferencesEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AuditAddReferencesEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AuditNodeManagementEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AuditAddReferencesEventType FindSource(IServerInternal server)
        {
            AuditAddReferencesEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AuditAddReferencesEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AuditAddReferencesEventType;

                if (type != null)
                {
                    return type;
                }

                type = new AuditAddReferencesEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditAddReferencesEventType clone = new AuditAddReferencesEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region ReferencesToAdd
        /// <summary>
        /// A description for the ReferencesToAdd Property.
        /// </summary>
        public Property<IList<AddReferencesItem>> ReferencesToAdd
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_referencesToAdd; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_referencesToAdd != null)
                    {
                        RemoveChild(m_referencesToAdd);
                    }

                    m_referencesToAdd = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceReferencesToAdd(Property<IList<AddReferencesItem>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ReferencesToAdd = replacement;

                ReferencesToAdd.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ReferencesToAdd, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditAddReferencesEventType_ReferencesToAdd,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AuditAddReferencesEventType type = source as AuditAddReferencesEventType;

                if (type != null && type.ReferencesToAdd != null)
                {
                    ReferencesToAdd = (Property<IList<AddReferencesItem>>)type.ReferencesToAdd.Clone(this);
                    ReferencesToAdd.Initialize(type.ReferencesToAdd);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_referencesToAdd = Property<IList<AddReferencesItem>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditAddReferencesEventType_ReferencesToAdd, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ReferencesToAdd, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditAddReferencesEventType_ReferencesToAdd);
        }
        #endregion

        #region Private Fields
        Property<IList<AddReferencesItem>> m_referencesToAdd;
        #endregion
    }
    #endregion

    #region AuditAddReferencesEvent Class
    /// <summary>
    /// Represents an instance of the AuditAddReferencesEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditAddReferencesEvent : AuditNodeManagementEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AuditAddReferencesEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AuditAddReferencesEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AuditAddReferencesEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AuditAddReferencesEvent instance = new AuditAddReferencesEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AuditAddReferencesEvent Construct(IServerInternal server)
        {
            AuditAddReferencesEvent instance = new AuditAddReferencesEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditAddReferencesEvent clone = new AuditAddReferencesEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region ReferencesToAdd
        /// <summary>
        /// A description for the ReferencesToAdd Property.
        /// </summary>
        public Property<IList<AddReferencesItem>> ReferencesToAdd
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_referencesToAdd; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_referencesToAdd != null)
                    {
                        RemoveChild(m_referencesToAdd);
                    }

                    m_referencesToAdd = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceReferencesToAdd(Property<IList<AddReferencesItem>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ReferencesToAdd = replacement;

                ReferencesToAdd.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ReferencesToAdd, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditAddReferencesEventType_ReferencesToAdd,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AuditAddReferencesEvent instance = source as AuditAddReferencesEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AuditAddReferencesEventType type = source as AuditAddReferencesEventType;

                if (type != null && type.ReferencesToAdd != null)
                {
                    ReferencesToAdd = (Property<IList<AddReferencesItem>>)type.ReferencesToAdd.Clone(this);
                    ReferencesToAdd.Initialize(type.ReferencesToAdd);
                }
                else if (instance != null && instance.ReferencesToAdd != null)
                {
                    ReferencesToAdd = (Property<IList<AddReferencesItem>>)instance.ReferencesToAdd.Clone(this);
                    ReferencesToAdd.Initialize(instance.ReferencesToAdd);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_referencesToAdd = Property<IList<AddReferencesItem>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ReferencesToAdd, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditAddReferencesEventType_ReferencesToAdd);
        }
        #endregion

        #region Private Fields
        private AuditAddReferencesEventType m_typeDefinition;
        Property<IList<AddReferencesItem>> m_referencesToAdd;
        #endregion
    }
    #endregion

    #region AuditDeleteReferencesEventType Class
    /// <summary>
    /// Represents the AuditDeleteReferencesEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditDeleteReferencesEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AuditDeleteReferencesEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AuditDeleteReferencesEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AuditDeleteReferencesEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AuditNodeManagementEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AuditDeleteReferencesEventType FindSource(IServerInternal server)
        {
            AuditDeleteReferencesEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AuditDeleteReferencesEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AuditDeleteReferencesEventType;

                if (type != null)
                {
                    return type;
                }

                type = new AuditDeleteReferencesEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditDeleteReferencesEventType clone = new AuditDeleteReferencesEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region ReferencesToDelete
        /// <summary>
        /// A description for the ReferencesToDelete Property.
        /// </summary>
        public Property<IList<DeleteReferencesItem>> ReferencesToDelete
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_referencesToDelete; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_referencesToDelete != null)
                    {
                        RemoveChild(m_referencesToDelete);
                    }

                    m_referencesToDelete = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceReferencesToDelete(Property<IList<DeleteReferencesItem>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ReferencesToDelete = replacement;

                ReferencesToDelete.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ReferencesToDelete, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditDeleteReferencesEventType_ReferencesToDelete,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AuditDeleteReferencesEventType type = source as AuditDeleteReferencesEventType;

                if (type != null && type.ReferencesToDelete != null)
                {
                    ReferencesToDelete = (Property<IList<DeleteReferencesItem>>)type.ReferencesToDelete.Clone(this);
                    ReferencesToDelete.Initialize(type.ReferencesToDelete);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_referencesToDelete = Property<IList<DeleteReferencesItem>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditDeleteReferencesEventType_ReferencesToDelete, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ReferencesToDelete, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditDeleteReferencesEventType_ReferencesToDelete);
        }
        #endregion

        #region Private Fields
        Property<IList<DeleteReferencesItem>> m_referencesToDelete;
        #endregion
    }
    #endregion

    #region AuditDeleteReferencesEvent Class
    /// <summary>
    /// Represents an instance of the AuditDeleteReferencesEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditDeleteReferencesEvent : AuditNodeManagementEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AuditDeleteReferencesEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AuditDeleteReferencesEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AuditDeleteReferencesEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AuditDeleteReferencesEvent instance = new AuditDeleteReferencesEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AuditDeleteReferencesEvent Construct(IServerInternal server)
        {
            AuditDeleteReferencesEvent instance = new AuditDeleteReferencesEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditDeleteReferencesEvent clone = new AuditDeleteReferencesEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region ReferencesToDelete
        /// <summary>
        /// A description for the ReferencesToDelete Property.
        /// </summary>
        public Property<IList<DeleteReferencesItem>> ReferencesToDelete
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_referencesToDelete; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_referencesToDelete != null)
                    {
                        RemoveChild(m_referencesToDelete);
                    }

                    m_referencesToDelete = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceReferencesToDelete(Property<IList<DeleteReferencesItem>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ReferencesToDelete = replacement;

                ReferencesToDelete.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ReferencesToDelete, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditDeleteReferencesEventType_ReferencesToDelete,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AuditDeleteReferencesEvent instance = source as AuditDeleteReferencesEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AuditDeleteReferencesEventType type = source as AuditDeleteReferencesEventType;

                if (type != null && type.ReferencesToDelete != null)
                {
                    ReferencesToDelete = (Property<IList<DeleteReferencesItem>>)type.ReferencesToDelete.Clone(this);
                    ReferencesToDelete.Initialize(type.ReferencesToDelete);
                }
                else if (instance != null && instance.ReferencesToDelete != null)
                {
                    ReferencesToDelete = (Property<IList<DeleteReferencesItem>>)instance.ReferencesToDelete.Clone(this);
                    ReferencesToDelete.Initialize(instance.ReferencesToDelete);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_referencesToDelete = Property<IList<DeleteReferencesItem>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ReferencesToDelete, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditDeleteReferencesEventType_ReferencesToDelete);
        }
        #endregion

        #region Private Fields
        private AuditDeleteReferencesEventType m_typeDefinition;
        Property<IList<DeleteReferencesItem>> m_referencesToDelete;
        #endregion
    }
    #endregion

    #region AuditUpdateEventType Class
    /// <summary>
    /// Represents the AuditUpdateEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditUpdateEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AuditUpdateEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AuditUpdateEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AuditUpdateEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AuditEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AuditUpdateEventType FindSource(IServerInternal server)
        {
            AuditUpdateEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AuditUpdateEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AuditUpdateEventType;

                if (type != null)
                {
                    return type;
                }

                type = new AuditUpdateEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditUpdateEventType clone = new AuditUpdateEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AuditUpdateEventType type = source as AuditUpdateEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endregion

    #region AuditUpdateEvent Class
    /// <summary>
    /// Represents an instance of the AuditUpdateEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditUpdateEvent : AuditEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AuditUpdateEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AuditUpdateEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AuditUpdateEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AuditUpdateEvent instance = new AuditUpdateEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AuditUpdateEvent Construct(IServerInternal server)
        {
            AuditUpdateEvent instance = new AuditUpdateEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditUpdateEvent clone = new AuditUpdateEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AuditUpdateEvent instance = source as AuditUpdateEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AuditUpdateEventType type = source as AuditUpdateEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private AuditUpdateEventType m_typeDefinition;
        #endregion
    }
    #endregion

    #region AuditWriteUpdateEventType Class
    /// <summary>
    /// Represents the AuditWriteUpdateEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditWriteUpdateEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AuditWriteUpdateEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AuditWriteUpdateEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AuditWriteUpdateEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AuditUpdateEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AuditWriteUpdateEventType FindSource(IServerInternal server)
        {
            AuditWriteUpdateEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AuditWriteUpdateEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AuditWriteUpdateEventType;

                if (type != null)
                {
                    return type;
                }

                type = new AuditWriteUpdateEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditWriteUpdateEventType clone = new AuditWriteUpdateEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region AttributeId
        /// <summary>
        /// A description for the AttributeId Property.
        /// </summary>
        public Property<uint> AttributeId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_attributeId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_attributeId != null)
                    {
                        RemoveChild(m_attributeId);
                    }

                    m_attributeId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceAttributeId(Property<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                AttributeId = replacement;

                AttributeId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.AttributeId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditWriteUpdateEventType_AttributeId,
                    null);
            }
        }
        #endregion

        #region IndexRange
        /// <summary>
        /// A description for the IndexRange Property.
        /// </summary>
        public Property<string> IndexRange
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_indexRange; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_indexRange != null)
                    {
                        RemoveChild(m_indexRange);
                    }

                    m_indexRange = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceIndexRange(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                IndexRange = replacement;

                IndexRange.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.IndexRange, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditWriteUpdateEventType_IndexRange,
                    null);
            }
        }
        #endregion

        #region OldValue
        /// <summary>
        /// A description for the OldValue Property.
        /// </summary>
        public Property<object> OldValue
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_oldValue; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_oldValue != null)
                    {
                        RemoveChild(m_oldValue);
                    }

                    m_oldValue = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceOldValue(Property<object> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                OldValue = replacement;

                OldValue.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.OldValue, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditWriteUpdateEventType_OldValue,
                    null);
            }
        }
        #endregion

        #region NewValue
        /// <summary>
        /// A description for the NewValue Property.
        /// </summary>
        public Property<object> NewValue
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_newValue; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_newValue != null)
                    {
                        RemoveChild(m_newValue);
                    }

                    m_newValue = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceNewValue(Property<object> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                NewValue = replacement;

                NewValue.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.NewValue, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditWriteUpdateEventType_NewValue,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AuditWriteUpdateEventType type = source as AuditWriteUpdateEventType;

                if (type != null && type.AttributeId != null)
                {
                    AttributeId = (Property<uint>)type.AttributeId.Clone(this);
                    AttributeId.Initialize(type.AttributeId);
                }

                if (type != null && type.IndexRange != null)
                {
                    IndexRange = (Property<string>)type.IndexRange.Clone(this);
                    IndexRange.Initialize(type.IndexRange);
                }

                if (type != null && type.OldValue != null)
                {
                    OldValue = (Property<object>)type.OldValue.Clone(this);
                    OldValue.Initialize(type.OldValue);
                }

                if (type != null && type.NewValue != null)
                {
                    NewValue = (Property<object>)type.NewValue.Clone(this);
                    NewValue.Initialize(type.NewValue);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_attributeId = Property<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditWriteUpdateEventType_AttributeId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.AttributeId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditWriteUpdateEventType_AttributeId);

            m_indexRange = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditWriteUpdateEventType_IndexRange, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.IndexRange, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditWriteUpdateEventType_IndexRange);

            m_oldValue = Property<object>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditWriteUpdateEventType_OldValue, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.OldValue, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditWriteUpdateEventType_OldValue);

            m_newValue = Property<object>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditWriteUpdateEventType_NewValue, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.NewValue, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditWriteUpdateEventType_NewValue);
        }
        #endregion

        #region Private Fields
        Property<uint> m_attributeId;
        Property<string> m_indexRange;
        Property<object> m_oldValue;
        Property<object> m_newValue;
        #endregion
    }
    #endregion

    #region AuditWriteUpdateEvent Class
    /// <summary>
    /// Represents an instance of the AuditWriteUpdateEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditWriteUpdateEvent : AuditUpdateEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AuditWriteUpdateEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AuditWriteUpdateEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AuditWriteUpdateEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AuditWriteUpdateEvent instance = new AuditWriteUpdateEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AuditWriteUpdateEvent Construct(IServerInternal server)
        {
            AuditWriteUpdateEvent instance = new AuditWriteUpdateEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditWriteUpdateEvent clone = new AuditWriteUpdateEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region AttributeId
        /// <summary>
        /// A description for the AttributeId Property.
        /// </summary>
        public Property<uint> AttributeId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_attributeId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_attributeId != null)
                    {
                        RemoveChild(m_attributeId);
                    }

                    m_attributeId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceAttributeId(Property<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                AttributeId = replacement;

                AttributeId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.AttributeId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditWriteUpdateEventType_AttributeId,
                    null);
            }
        }
        #endregion

        #region IndexRange
        /// <summary>
        /// A description for the IndexRange Property.
        /// </summary>
        public Property<string> IndexRange
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_indexRange; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_indexRange != null)
                    {
                        RemoveChild(m_indexRange);
                    }

                    m_indexRange = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceIndexRange(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                IndexRange = replacement;

                IndexRange.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.IndexRange, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditWriteUpdateEventType_IndexRange,
                    null);
            }
        }
        #endregion

        #region OldValue
        /// <summary>
        /// A description for the OldValue Property.
        /// </summary>
        public Property<object> OldValue
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_oldValue; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_oldValue != null)
                    {
                        RemoveChild(m_oldValue);
                    }

                    m_oldValue = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceOldValue(Property<object> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                OldValue = replacement;

                OldValue.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.OldValue, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditWriteUpdateEventType_OldValue,
                    null);
            }
        }
        #endregion

        #region NewValue
        /// <summary>
        /// A description for the NewValue Property.
        /// </summary>
        public Property<object> NewValue
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_newValue; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_newValue != null)
                    {
                        RemoveChild(m_newValue);
                    }

                    m_newValue = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceNewValue(Property<object> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                NewValue = replacement;

                NewValue.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.NewValue, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditWriteUpdateEventType_NewValue,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AuditWriteUpdateEvent instance = source as AuditWriteUpdateEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AuditWriteUpdateEventType type = source as AuditWriteUpdateEventType;

                if (type != null && type.AttributeId != null)
                {
                    AttributeId = (Property<uint>)type.AttributeId.Clone(this);
                    AttributeId.Initialize(type.AttributeId);
                }
                else if (instance != null && instance.AttributeId != null)
                {
                    AttributeId = (Property<uint>)instance.AttributeId.Clone(this);
                    AttributeId.Initialize(instance.AttributeId);
                }

                if (type != null && type.IndexRange != null)
                {
                    IndexRange = (Property<string>)type.IndexRange.Clone(this);
                    IndexRange.Initialize(type.IndexRange);
                }
                else if (instance != null && instance.IndexRange != null)
                {
                    IndexRange = (Property<string>)instance.IndexRange.Clone(this);
                    IndexRange.Initialize(instance.IndexRange);
                }

                if (type != null && type.OldValue != null)
                {
                    OldValue = (Property<object>)type.OldValue.Clone(this);
                    OldValue.Initialize(type.OldValue);
                }
                else if (instance != null && instance.OldValue != null)
                {
                    OldValue = (Property<object>)instance.OldValue.Clone(this);
                    OldValue.Initialize(instance.OldValue);
                }

                if (type != null && type.NewValue != null)
                {
                    NewValue = (Property<object>)type.NewValue.Clone(this);
                    NewValue.Initialize(type.NewValue);
                }
                else if (instance != null && instance.NewValue != null)
                {
                    NewValue = (Property<object>)instance.NewValue.Clone(this);
                    NewValue.Initialize(instance.NewValue);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_attributeId = Property<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.AttributeId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditWriteUpdateEventType_AttributeId);

            m_indexRange = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.IndexRange, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditWriteUpdateEventType_IndexRange);

            m_oldValue = Property<object>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.OldValue, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditWriteUpdateEventType_OldValue);

            m_newValue = Property<object>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.NewValue, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditWriteUpdateEventType_NewValue);
        }
        #endregion

        #region Private Fields
        private AuditWriteUpdateEventType m_typeDefinition;
        Property<uint> m_attributeId;
        Property<string> m_indexRange;
        Property<object> m_oldValue;
        Property<object> m_newValue;
        #endregion
    }
    #endregion

    #region AuditHistoryUpdateEventType Class
    /// <summary>
    /// Represents the AuditHistoryUpdateEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditHistoryUpdateEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AuditHistoryUpdateEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AuditHistoryUpdateEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AuditHistoryUpdateEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AuditUpdateEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AuditHistoryUpdateEventType FindSource(IServerInternal server)
        {
            AuditHistoryUpdateEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AuditHistoryUpdateEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AuditHistoryUpdateEventType;

                if (type != null)
                {
                    return type;
                }

                type = new AuditHistoryUpdateEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditHistoryUpdateEventType clone = new AuditHistoryUpdateEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region ParameterDataTypeId
        /// <summary>
        /// A description for the ParameterDataTypeId Property.
        /// </summary>
        public Property<NodeId> ParameterDataTypeId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_parameterDataTypeId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_parameterDataTypeId != null)
                    {
                        RemoveChild(m_parameterDataTypeId);
                    }

                    m_parameterDataTypeId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceParameterDataTypeId(Property<NodeId> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ParameterDataTypeId = replacement;

                ParameterDataTypeId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ParameterDataTypeId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditHistoryUpdateEventType_ParameterDataTypeId,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AuditHistoryUpdateEventType type = source as AuditHistoryUpdateEventType;

                if (type != null && type.ParameterDataTypeId != null)
                {
                    ParameterDataTypeId = (Property<NodeId>)type.ParameterDataTypeId.Clone(this);
                    ParameterDataTypeId.Initialize(type.ParameterDataTypeId);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_parameterDataTypeId = Property<NodeId>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditHistoryUpdateEventType_ParameterDataTypeId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ParameterDataTypeId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditHistoryUpdateEventType_ParameterDataTypeId);
        }
        #endregion

        #region Private Fields
        Property<NodeId> m_parameterDataTypeId;
        #endregion
    }
    #endregion

    #region AuditHistoryUpdateEvent Class
    /// <summary>
    /// Represents an instance of the AuditHistoryUpdateEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditHistoryUpdateEvent : AuditUpdateEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AuditHistoryUpdateEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AuditHistoryUpdateEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AuditHistoryUpdateEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AuditHistoryUpdateEvent instance = new AuditHistoryUpdateEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AuditHistoryUpdateEvent Construct(IServerInternal server)
        {
            AuditHistoryUpdateEvent instance = new AuditHistoryUpdateEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditHistoryUpdateEvent clone = new AuditHistoryUpdateEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region ParameterDataTypeId
        /// <summary>
        /// A description for the ParameterDataTypeId Property.
        /// </summary>
        public Property<NodeId> ParameterDataTypeId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_parameterDataTypeId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_parameterDataTypeId != null)
                    {
                        RemoveChild(m_parameterDataTypeId);
                    }

                    m_parameterDataTypeId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceParameterDataTypeId(Property<NodeId> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ParameterDataTypeId = replacement;

                ParameterDataTypeId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ParameterDataTypeId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditHistoryUpdateEventType_ParameterDataTypeId,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AuditHistoryUpdateEvent instance = source as AuditHistoryUpdateEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AuditHistoryUpdateEventType type = source as AuditHistoryUpdateEventType;

                if (type != null && type.ParameterDataTypeId != null)
                {
                    ParameterDataTypeId = (Property<NodeId>)type.ParameterDataTypeId.Clone(this);
                    ParameterDataTypeId.Initialize(type.ParameterDataTypeId);
                }
                else if (instance != null && instance.ParameterDataTypeId != null)
                {
                    ParameterDataTypeId = (Property<NodeId>)instance.ParameterDataTypeId.Clone(this);
                    ParameterDataTypeId.Initialize(instance.ParameterDataTypeId);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_parameterDataTypeId = Property<NodeId>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ParameterDataTypeId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditHistoryUpdateEventType_ParameterDataTypeId);
        }
        #endregion

        #region Private Fields
        private AuditHistoryUpdateEventType m_typeDefinition;
        Property<NodeId> m_parameterDataTypeId;
        #endregion
    }
    #endregion

    #region AuditHistoryEventUpdateEventType Class
    /// <summary>
    /// Represents the AuditHistoryEventUpdateEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditHistoryEventUpdateEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AuditHistoryEventUpdateEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AuditHistoryEventUpdateEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AuditHistoryEventUpdateEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AuditHistoryUpdateEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AuditHistoryEventUpdateEventType FindSource(IServerInternal server)
        {
            AuditHistoryEventUpdateEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AuditHistoryEventUpdateEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AuditHistoryEventUpdateEventType;

                if (type != null)
                {
                    return type;
                }

                type = new AuditHistoryEventUpdateEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditHistoryEventUpdateEventType clone = new AuditHistoryEventUpdateEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region UpdatedNode
        /// <summary>
        /// A description for the UpdatedNode Property.
        /// </summary>
        public Property<NodeId> UpdatedNode
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_updatedNode; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_updatedNode != null)
                    {
                        RemoveChild(m_updatedNode);
                    }

                    m_updatedNode = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceUpdatedNode(Property<NodeId> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                UpdatedNode = replacement;

                UpdatedNode.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.UpdatedNode, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditHistoryEventUpdateEventType_UpdatedNode,
                    null);
            }
        }
        #endregion

        #region PerformInsertReplace
        /// <summary>
        /// A description for the PerformInsertReplace Property.
        /// </summary>
        public Property<HistoryUpdateMode> PerformInsertReplace
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_performInsertReplace; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_performInsertReplace != null)
                    {
                        RemoveChild(m_performInsertReplace);
                    }

                    m_performInsertReplace = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplacePerformInsertReplace(Property<HistoryUpdateMode> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                PerformInsertReplace = replacement;

                PerformInsertReplace.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.PerformInsertReplace, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditHistoryEventUpdateEventType_PerformInsertReplace,
                    null);
            }
        }
        #endregion

        #region Filter
        /// <summary>
        /// A description for the Filter Property.
        /// </summary>
        public Property<EventFilter> Filter
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_filter; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_filter != null)
                    {
                        RemoveChild(m_filter);
                    }

                    m_filter = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceFilter(Property<EventFilter> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Filter = replacement;

                Filter.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Filter, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditHistoryEventUpdateEventType_Filter,
                    null);
            }
        }
        #endregion

        #region NewValues
        /// <summary>
        /// A description for the NewValues Property.
        /// </summary>
        public Property<IList<HistoryEventFieldList>> NewValues
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_newValues; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_newValues != null)
                    {
                        RemoveChild(m_newValues);
                    }

                    m_newValues = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceNewValues(Property<IList<HistoryEventFieldList>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                NewValues = replacement;

                NewValues.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.NewValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditHistoryEventUpdateEventType_NewValues,
                    null);
            }
        }
        #endregion

        #region OldValues
        /// <summary>
        /// A description for the OldValues Property.
        /// </summary>
        public Property<IList<HistoryEventFieldList>> OldValues
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_oldValues; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_oldValues != null)
                    {
                        RemoveChild(m_oldValues);
                    }

                    m_oldValues = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceOldValues(Property<IList<HistoryEventFieldList>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                OldValues = replacement;

                OldValues.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.OldValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditHistoryEventUpdateEventType_OldValues,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AuditHistoryEventUpdateEventType type = source as AuditHistoryEventUpdateEventType;

                if (type != null && type.UpdatedNode != null)
                {
                    UpdatedNode = (Property<NodeId>)type.UpdatedNode.Clone(this);
                    UpdatedNode.Initialize(type.UpdatedNode);
                }

                if (type != null && type.PerformInsertReplace != null)
                {
                    PerformInsertReplace = (Property<HistoryUpdateMode>)type.PerformInsertReplace.Clone(this);
                    PerformInsertReplace.Initialize(type.PerformInsertReplace);
                }

                if (type != null && type.Filter != null)
                {
                    Filter = (Property<EventFilter>)type.Filter.Clone(this);
                    Filter.Initialize(type.Filter);
                }

                if (type != null && type.NewValues != null)
                {
                    NewValues = (Property<IList<HistoryEventFieldList>>)type.NewValues.Clone(this);
                    NewValues.Initialize(type.NewValues);
                }

                if (type != null && type.OldValues != null)
                {
                    OldValues = (Property<IList<HistoryEventFieldList>>)type.OldValues.Clone(this);
                    OldValues.Initialize(type.OldValues);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_updatedNode = Property<NodeId>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditHistoryEventUpdateEventType_UpdatedNode, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.UpdatedNode, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditHistoryEventUpdateEventType_UpdatedNode);

            m_performInsertReplace = Property<HistoryUpdateMode>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditHistoryEventUpdateEventType_PerformInsertReplace, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.PerformInsertReplace, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditHistoryEventUpdateEventType_PerformInsertReplace);

            m_filter = Property<EventFilter>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditHistoryEventUpdateEventType_Filter, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Filter, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditHistoryEventUpdateEventType_Filter);

            m_newValues = Property<IList<HistoryEventFieldList>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditHistoryEventUpdateEventType_NewValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.NewValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditHistoryEventUpdateEventType_NewValues);

            m_oldValues = Property<IList<HistoryEventFieldList>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditHistoryEventUpdateEventType_OldValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.OldValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditHistoryEventUpdateEventType_OldValues);
        }
        #endregion

        #region Private Fields
        Property<NodeId> m_updatedNode;
        Property<HistoryUpdateMode> m_performInsertReplace;
        Property<EventFilter> m_filter;
        Property<IList<HistoryEventFieldList>> m_newValues;
        Property<IList<HistoryEventFieldList>> m_oldValues;
        #endregion
    }
    #endregion

    #region AuditHistoryEventUpdateEvent Class
    /// <summary>
    /// Represents an instance of the AuditHistoryEventUpdateEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditHistoryEventUpdateEvent : AuditHistoryUpdateEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AuditHistoryEventUpdateEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AuditHistoryEventUpdateEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AuditHistoryEventUpdateEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AuditHistoryEventUpdateEvent instance = new AuditHistoryEventUpdateEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AuditHistoryEventUpdateEvent Construct(IServerInternal server)
        {
            AuditHistoryEventUpdateEvent instance = new AuditHistoryEventUpdateEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditHistoryEventUpdateEvent clone = new AuditHistoryEventUpdateEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region UpdatedNode
        /// <summary>
        /// A description for the UpdatedNode Property.
        /// </summary>
        public Property<NodeId> UpdatedNode
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_updatedNode; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_updatedNode != null)
                    {
                        RemoveChild(m_updatedNode);
                    }

                    m_updatedNode = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceUpdatedNode(Property<NodeId> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                UpdatedNode = replacement;

                UpdatedNode.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.UpdatedNode, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditHistoryEventUpdateEventType_UpdatedNode,
                    null);
            }
        }
        #endregion

        #region PerformInsertReplace
        /// <summary>
        /// A description for the PerformInsertReplace Property.
        /// </summary>
        public Property<HistoryUpdateMode> PerformInsertReplace
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_performInsertReplace; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_performInsertReplace != null)
                    {
                        RemoveChild(m_performInsertReplace);
                    }

                    m_performInsertReplace = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplacePerformInsertReplace(Property<HistoryUpdateMode> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                PerformInsertReplace = replacement;

                PerformInsertReplace.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.PerformInsertReplace, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditHistoryEventUpdateEventType_PerformInsertReplace,
                    null);
            }
        }
        #endregion

        #region Filter
        /// <summary>
        /// A description for the Filter Property.
        /// </summary>
        public Property<EventFilter> Filter
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_filter; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_filter != null)
                    {
                        RemoveChild(m_filter);
                    }

                    m_filter = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceFilter(Property<EventFilter> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Filter = replacement;

                Filter.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Filter, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditHistoryEventUpdateEventType_Filter,
                    null);
            }
        }
        #endregion

        #region NewValues
        /// <summary>
        /// A description for the NewValues Property.
        /// </summary>
        public Property<IList<HistoryEventFieldList>> NewValues
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_newValues; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_newValues != null)
                    {
                        RemoveChild(m_newValues);
                    }

                    m_newValues = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceNewValues(Property<IList<HistoryEventFieldList>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                NewValues = replacement;

                NewValues.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.NewValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditHistoryEventUpdateEventType_NewValues,
                    null);
            }
        }
        #endregion

        #region OldValues
        /// <summary>
        /// A description for the OldValues Property.
        /// </summary>
        public Property<IList<HistoryEventFieldList>> OldValues
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_oldValues; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_oldValues != null)
                    {
                        RemoveChild(m_oldValues);
                    }

                    m_oldValues = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceOldValues(Property<IList<HistoryEventFieldList>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                OldValues = replacement;

                OldValues.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.OldValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditHistoryEventUpdateEventType_OldValues,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AuditHistoryEventUpdateEvent instance = source as AuditHistoryEventUpdateEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AuditHistoryEventUpdateEventType type = source as AuditHistoryEventUpdateEventType;

                if (type != null && type.UpdatedNode != null)
                {
                    UpdatedNode = (Property<NodeId>)type.UpdatedNode.Clone(this);
                    UpdatedNode.Initialize(type.UpdatedNode);
                }
                else if (instance != null && instance.UpdatedNode != null)
                {
                    UpdatedNode = (Property<NodeId>)instance.UpdatedNode.Clone(this);
                    UpdatedNode.Initialize(instance.UpdatedNode);
                }

                if (type != null && type.PerformInsertReplace != null)
                {
                    PerformInsertReplace = (Property<HistoryUpdateMode>)type.PerformInsertReplace.Clone(this);
                    PerformInsertReplace.Initialize(type.PerformInsertReplace);
                }
                else if (instance != null && instance.PerformInsertReplace != null)
                {
                    PerformInsertReplace = (Property<HistoryUpdateMode>)instance.PerformInsertReplace.Clone(this);
                    PerformInsertReplace.Initialize(instance.PerformInsertReplace);
                }

                if (type != null && type.Filter != null)
                {
                    Filter = (Property<EventFilter>)type.Filter.Clone(this);
                    Filter.Initialize(type.Filter);
                }
                else if (instance != null && instance.Filter != null)
                {
                    Filter = (Property<EventFilter>)instance.Filter.Clone(this);
                    Filter.Initialize(instance.Filter);
                }

                if (type != null && type.NewValues != null)
                {
                    NewValues = (Property<IList<HistoryEventFieldList>>)type.NewValues.Clone(this);
                    NewValues.Initialize(type.NewValues);
                }
                else if (instance != null && instance.NewValues != null)
                {
                    NewValues = (Property<IList<HistoryEventFieldList>>)instance.NewValues.Clone(this);
                    NewValues.Initialize(instance.NewValues);
                }

                if (type != null && type.OldValues != null)
                {
                    OldValues = (Property<IList<HistoryEventFieldList>>)type.OldValues.Clone(this);
                    OldValues.Initialize(type.OldValues);
                }
                else if (instance != null && instance.OldValues != null)
                {
                    OldValues = (Property<IList<HistoryEventFieldList>>)instance.OldValues.Clone(this);
                    OldValues.Initialize(instance.OldValues);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_updatedNode = Property<NodeId>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.UpdatedNode, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditHistoryEventUpdateEventType_UpdatedNode);

            m_performInsertReplace = Property<HistoryUpdateMode>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.PerformInsertReplace, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditHistoryEventUpdateEventType_PerformInsertReplace);

            m_filter = Property<EventFilter>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Filter, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditHistoryEventUpdateEventType_Filter);

            m_newValues = Property<IList<HistoryEventFieldList>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.NewValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditHistoryEventUpdateEventType_NewValues);

            m_oldValues = Property<IList<HistoryEventFieldList>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.OldValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditHistoryEventUpdateEventType_OldValues);
        }
        #endregion

        #region Private Fields
        private AuditHistoryEventUpdateEventType m_typeDefinition;
        Property<NodeId> m_updatedNode;
        Property<HistoryUpdateMode> m_performInsertReplace;
        Property<EventFilter> m_filter;
        Property<IList<HistoryEventFieldList>> m_newValues;
        Property<IList<HistoryEventFieldList>> m_oldValues;
        #endregion
    }
    #endregion

    #region AuditHistoryValueUpdateEventType Class
    /// <summary>
    /// Represents the AuditHistoryValueUpdateEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditHistoryValueUpdateEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AuditHistoryValueUpdateEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AuditHistoryValueUpdateEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AuditHistoryValueUpdateEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AuditHistoryUpdateEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AuditHistoryValueUpdateEventType FindSource(IServerInternal server)
        {
            AuditHistoryValueUpdateEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AuditHistoryValueUpdateEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AuditHistoryValueUpdateEventType;

                if (type != null)
                {
                    return type;
                }

                type = new AuditHistoryValueUpdateEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditHistoryValueUpdateEventType clone = new AuditHistoryValueUpdateEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region UpdatedNode
        /// <summary>
        /// A description for the UpdatedNode Property.
        /// </summary>
        public Property<NodeId> UpdatedNode
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_updatedNode; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_updatedNode != null)
                    {
                        RemoveChild(m_updatedNode);
                    }

                    m_updatedNode = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceUpdatedNode(Property<NodeId> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                UpdatedNode = replacement;

                UpdatedNode.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.UpdatedNode, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditHistoryValueUpdateEventType_UpdatedNode,
                    null);
            }
        }
        #endregion

        #region PerformInsertReplace
        /// <summary>
        /// A description for the PerformInsertReplace Property.
        /// </summary>
        public Property<HistoryUpdateMode> PerformInsertReplace
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_performInsertReplace; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_performInsertReplace != null)
                    {
                        RemoveChild(m_performInsertReplace);
                    }

                    m_performInsertReplace = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplacePerformInsertReplace(Property<HistoryUpdateMode> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                PerformInsertReplace = replacement;

                PerformInsertReplace.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.PerformInsertReplace, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditHistoryValueUpdateEventType_PerformInsertReplace,
                    null);
            }
        }
        #endregion

        #region NewValues
        /// <summary>
        /// A description for the NewValues Property.
        /// </summary>
        public Property<IList<DataValue>> NewValues
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_newValues; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_newValues != null)
                    {
                        RemoveChild(m_newValues);
                    }

                    m_newValues = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceNewValues(Property<IList<DataValue>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                NewValues = replacement;

                NewValues.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.NewValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditHistoryValueUpdateEventType_NewValues,
                    null);
            }
        }
        #endregion

        #region OldValues
        /// <summary>
        /// A description for the OldValues Property.
        /// </summary>
        public Property<IList<DataValue>> OldValues
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_oldValues; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_oldValues != null)
                    {
                        RemoveChild(m_oldValues);
                    }

                    m_oldValues = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceOldValues(Property<IList<DataValue>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                OldValues = replacement;

                OldValues.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.OldValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditHistoryValueUpdateEventType_OldValues,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AuditHistoryValueUpdateEventType type = source as AuditHistoryValueUpdateEventType;

                if (type != null && type.UpdatedNode != null)
                {
                    UpdatedNode = (Property<NodeId>)type.UpdatedNode.Clone(this);
                    UpdatedNode.Initialize(type.UpdatedNode);
                }

                if (type != null && type.PerformInsertReplace != null)
                {
                    PerformInsertReplace = (Property<HistoryUpdateMode>)type.PerformInsertReplace.Clone(this);
                    PerformInsertReplace.Initialize(type.PerformInsertReplace);
                }

                if (type != null && type.NewValues != null)
                {
                    NewValues = (Property<IList<DataValue>>)type.NewValues.Clone(this);
                    NewValues.Initialize(type.NewValues);
                }

                if (type != null && type.OldValues != null)
                {
                    OldValues = (Property<IList<DataValue>>)type.OldValues.Clone(this);
                    OldValues.Initialize(type.OldValues);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_updatedNode = Property<NodeId>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditHistoryValueUpdateEventType_UpdatedNode, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.UpdatedNode, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditHistoryValueUpdateEventType_UpdatedNode);

            m_performInsertReplace = Property<HistoryUpdateMode>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditHistoryValueUpdateEventType_PerformInsertReplace, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.PerformInsertReplace, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditHistoryValueUpdateEventType_PerformInsertReplace);

            m_newValues = Property<IList<DataValue>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditHistoryValueUpdateEventType_NewValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.NewValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditHistoryValueUpdateEventType_NewValues);

            m_oldValues = Property<IList<DataValue>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditHistoryValueUpdateEventType_OldValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.OldValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditHistoryValueUpdateEventType_OldValues);
        }
        #endregion

        #region Private Fields
        Property<NodeId> m_updatedNode;
        Property<HistoryUpdateMode> m_performInsertReplace;
        Property<IList<DataValue>> m_newValues;
        Property<IList<DataValue>> m_oldValues;
        #endregion
    }
    #endregion

    #region AuditHistoryValueUpdateEvent Class
    /// <summary>
    /// Represents an instance of the AuditHistoryValueUpdateEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditHistoryValueUpdateEvent : AuditHistoryUpdateEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AuditHistoryValueUpdateEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AuditHistoryValueUpdateEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AuditHistoryValueUpdateEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AuditHistoryValueUpdateEvent instance = new AuditHistoryValueUpdateEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AuditHistoryValueUpdateEvent Construct(IServerInternal server)
        {
            AuditHistoryValueUpdateEvent instance = new AuditHistoryValueUpdateEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditHistoryValueUpdateEvent clone = new AuditHistoryValueUpdateEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region UpdatedNode
        /// <summary>
        /// A description for the UpdatedNode Property.
        /// </summary>
        public Property<NodeId> UpdatedNode
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_updatedNode; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_updatedNode != null)
                    {
                        RemoveChild(m_updatedNode);
                    }

                    m_updatedNode = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceUpdatedNode(Property<NodeId> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                UpdatedNode = replacement;

                UpdatedNode.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.UpdatedNode, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditHistoryValueUpdateEventType_UpdatedNode,
                    null);
            }
        }
        #endregion

        #region PerformInsertReplace
        /// <summary>
        /// A description for the PerformInsertReplace Property.
        /// </summary>
        public Property<HistoryUpdateMode> PerformInsertReplace
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_performInsertReplace; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_performInsertReplace != null)
                    {
                        RemoveChild(m_performInsertReplace);
                    }

                    m_performInsertReplace = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplacePerformInsertReplace(Property<HistoryUpdateMode> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                PerformInsertReplace = replacement;

                PerformInsertReplace.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.PerformInsertReplace, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditHistoryValueUpdateEventType_PerformInsertReplace,
                    null);
            }
        }
        #endregion

        #region NewValues
        /// <summary>
        /// A description for the NewValues Property.
        /// </summary>
        public Property<IList<DataValue>> NewValues
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_newValues; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_newValues != null)
                    {
                        RemoveChild(m_newValues);
                    }

                    m_newValues = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceNewValues(Property<IList<DataValue>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                NewValues = replacement;

                NewValues.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.NewValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditHistoryValueUpdateEventType_NewValues,
                    null);
            }
        }
        #endregion

        #region OldValues
        /// <summary>
        /// A description for the OldValues Property.
        /// </summary>
        public Property<IList<DataValue>> OldValues
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_oldValues; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_oldValues != null)
                    {
                        RemoveChild(m_oldValues);
                    }

                    m_oldValues = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceOldValues(Property<IList<DataValue>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                OldValues = replacement;

                OldValues.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.OldValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditHistoryValueUpdateEventType_OldValues,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AuditHistoryValueUpdateEvent instance = source as AuditHistoryValueUpdateEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AuditHistoryValueUpdateEventType type = source as AuditHistoryValueUpdateEventType;

                if (type != null && type.UpdatedNode != null)
                {
                    UpdatedNode = (Property<NodeId>)type.UpdatedNode.Clone(this);
                    UpdatedNode.Initialize(type.UpdatedNode);
                }
                else if (instance != null && instance.UpdatedNode != null)
                {
                    UpdatedNode = (Property<NodeId>)instance.UpdatedNode.Clone(this);
                    UpdatedNode.Initialize(instance.UpdatedNode);
                }

                if (type != null && type.PerformInsertReplace != null)
                {
                    PerformInsertReplace = (Property<HistoryUpdateMode>)type.PerformInsertReplace.Clone(this);
                    PerformInsertReplace.Initialize(type.PerformInsertReplace);
                }
                else if (instance != null && instance.PerformInsertReplace != null)
                {
                    PerformInsertReplace = (Property<HistoryUpdateMode>)instance.PerformInsertReplace.Clone(this);
                    PerformInsertReplace.Initialize(instance.PerformInsertReplace);
                }

                if (type != null && type.NewValues != null)
                {
                    NewValues = (Property<IList<DataValue>>)type.NewValues.Clone(this);
                    NewValues.Initialize(type.NewValues);
                }
                else if (instance != null && instance.NewValues != null)
                {
                    NewValues = (Property<IList<DataValue>>)instance.NewValues.Clone(this);
                    NewValues.Initialize(instance.NewValues);
                }

                if (type != null && type.OldValues != null)
                {
                    OldValues = (Property<IList<DataValue>>)type.OldValues.Clone(this);
                    OldValues.Initialize(type.OldValues);
                }
                else if (instance != null && instance.OldValues != null)
                {
                    OldValues = (Property<IList<DataValue>>)instance.OldValues.Clone(this);
                    OldValues.Initialize(instance.OldValues);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_updatedNode = Property<NodeId>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.UpdatedNode, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditHistoryValueUpdateEventType_UpdatedNode);

            m_performInsertReplace = Property<HistoryUpdateMode>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.PerformInsertReplace, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditHistoryValueUpdateEventType_PerformInsertReplace);

            m_newValues = Property<IList<DataValue>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.NewValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditHistoryValueUpdateEventType_NewValues);

            m_oldValues = Property<IList<DataValue>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.OldValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditHistoryValueUpdateEventType_OldValues);
        }
        #endregion

        #region Private Fields
        private AuditHistoryValueUpdateEventType m_typeDefinition;
        Property<NodeId> m_updatedNode;
        Property<HistoryUpdateMode> m_performInsertReplace;
        Property<IList<DataValue>> m_newValues;
        Property<IList<DataValue>> m_oldValues;
        #endregion
    }
    #endregion

    #region AuditHistoryDeleteEventType Class
    /// <summary>
    /// Represents the AuditHistoryDeleteEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditHistoryDeleteEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AuditHistoryDeleteEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AuditHistoryDeleteEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AuditHistoryDeleteEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AuditHistoryUpdateEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AuditHistoryDeleteEventType FindSource(IServerInternal server)
        {
            AuditHistoryDeleteEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AuditHistoryDeleteEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AuditHistoryDeleteEventType;

                if (type != null)
                {
                    return type;
                }

                type = new AuditHistoryDeleteEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditHistoryDeleteEventType clone = new AuditHistoryDeleteEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region UpdatedNode
        /// <summary>
        /// A description for the UpdatedNode Property.
        /// </summary>
        public Property<NodeId> UpdatedNode
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_updatedNode; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_updatedNode != null)
                    {
                        RemoveChild(m_updatedNode);
                    }

                    m_updatedNode = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceUpdatedNode(Property<NodeId> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                UpdatedNode = replacement;

                UpdatedNode.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.UpdatedNode, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditHistoryDeleteEventType_UpdatedNode,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AuditHistoryDeleteEventType type = source as AuditHistoryDeleteEventType;

                if (type != null && type.UpdatedNode != null)
                {
                    UpdatedNode = (Property<NodeId>)type.UpdatedNode.Clone(this);
                    UpdatedNode.Initialize(type.UpdatedNode);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_updatedNode = Property<NodeId>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditHistoryDeleteEventType_UpdatedNode, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.UpdatedNode, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditHistoryDeleteEventType_UpdatedNode);
        }
        #endregion

        #region Private Fields
        Property<NodeId> m_updatedNode;
        #endregion
    }
    #endregion

    #region AuditHistoryDeleteEvent Class
    /// <summary>
    /// Represents an instance of the AuditHistoryDeleteEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditHistoryDeleteEvent : AuditHistoryUpdateEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AuditHistoryDeleteEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AuditHistoryDeleteEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AuditHistoryDeleteEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AuditHistoryDeleteEvent instance = new AuditHistoryDeleteEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AuditHistoryDeleteEvent Construct(IServerInternal server)
        {
            AuditHistoryDeleteEvent instance = new AuditHistoryDeleteEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditHistoryDeleteEvent clone = new AuditHistoryDeleteEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region UpdatedNode
        /// <summary>
        /// A description for the UpdatedNode Property.
        /// </summary>
        public Property<NodeId> UpdatedNode
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_updatedNode; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_updatedNode != null)
                    {
                        RemoveChild(m_updatedNode);
                    }

                    m_updatedNode = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceUpdatedNode(Property<NodeId> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                UpdatedNode = replacement;

                UpdatedNode.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.UpdatedNode, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditHistoryDeleteEventType_UpdatedNode,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AuditHistoryDeleteEvent instance = source as AuditHistoryDeleteEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AuditHistoryDeleteEventType type = source as AuditHistoryDeleteEventType;

                if (type != null && type.UpdatedNode != null)
                {
                    UpdatedNode = (Property<NodeId>)type.UpdatedNode.Clone(this);
                    UpdatedNode.Initialize(type.UpdatedNode);
                }
                else if (instance != null && instance.UpdatedNode != null)
                {
                    UpdatedNode = (Property<NodeId>)instance.UpdatedNode.Clone(this);
                    UpdatedNode.Initialize(instance.UpdatedNode);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_updatedNode = Property<NodeId>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.UpdatedNode, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditHistoryDeleteEventType_UpdatedNode);
        }
        #endregion

        #region Private Fields
        private AuditHistoryDeleteEventType m_typeDefinition;
        Property<NodeId> m_updatedNode;
        #endregion
    }
    #endregion

    #region AuditHistoryRawModifyDeleteEventType Class
    /// <summary>
    /// Represents the AuditHistoryRawModifyDeleteEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditHistoryRawModifyDeleteEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AuditHistoryRawModifyDeleteEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AuditHistoryRawModifyDeleteEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AuditHistoryRawModifyDeleteEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AuditHistoryDeleteEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AuditHistoryRawModifyDeleteEventType FindSource(IServerInternal server)
        {
            AuditHistoryRawModifyDeleteEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AuditHistoryRawModifyDeleteEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AuditHistoryRawModifyDeleteEventType;

                if (type != null)
                {
                    return type;
                }

                type = new AuditHistoryRawModifyDeleteEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditHistoryRawModifyDeleteEventType clone = new AuditHistoryRawModifyDeleteEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region IsDeleteModified
        /// <summary>
        /// A description for the IsDeleteModified Property.
        /// </summary>
        public Property<bool> IsDeleteModified
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_isDeleteModified; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_isDeleteModified != null)
                    {
                        RemoveChild(m_isDeleteModified);
                    }

                    m_isDeleteModified = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceIsDeleteModified(Property<bool> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                IsDeleteModified = replacement;

                IsDeleteModified.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.IsDeleteModified, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditHistoryRawModifyDeleteEventType_IsDeleteModified,
                    null);
            }
        }
        #endregion

        #region StartTime
        /// <summary>
        /// A description for the StartTime Property.
        /// </summary>
        public Property<DateTime> StartTime
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_startTime; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_startTime != null)
                    {
                        RemoveChild(m_startTime);
                    }

                    m_startTime = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceStartTime(Property<DateTime> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                StartTime = replacement;

                StartTime.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.StartTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditHistoryRawModifyDeleteEventType_StartTime,
                    null);
            }
        }
        #endregion

        #region EndTime
        /// <summary>
        /// A description for the EndTime Property.
        /// </summary>
        public Property<DateTime> EndTime
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_endTime; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_endTime != null)
                    {
                        RemoveChild(m_endTime);
                    }

                    m_endTime = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceEndTime(Property<DateTime> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                EndTime = replacement;

                EndTime.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.EndTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditHistoryRawModifyDeleteEventType_EndTime,
                    null);
            }
        }
        #endregion

        #region OldValues
        /// <summary>
        /// A description for the OldValues Property.
        /// </summary>
        public Property<IList<DataValue>> OldValues
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_oldValues; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_oldValues != null)
                    {
                        RemoveChild(m_oldValues);
                    }

                    m_oldValues = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceOldValues(Property<IList<DataValue>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                OldValues = replacement;

                OldValues.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.OldValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditHistoryRawModifyDeleteEventType_OldValues,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AuditHistoryRawModifyDeleteEventType type = source as AuditHistoryRawModifyDeleteEventType;

                if (type != null && type.IsDeleteModified != null)
                {
                    IsDeleteModified = (Property<bool>)type.IsDeleteModified.Clone(this);
                    IsDeleteModified.Initialize(type.IsDeleteModified);
                }

                if (type != null && type.StartTime != null)
                {
                    StartTime = (Property<DateTime>)type.StartTime.Clone(this);
                    StartTime.Initialize(type.StartTime);
                }

                if (type != null && type.EndTime != null)
                {
                    EndTime = (Property<DateTime>)type.EndTime.Clone(this);
                    EndTime.Initialize(type.EndTime);
                }

                if (type != null && type.OldValues != null)
                {
                    OldValues = (Property<IList<DataValue>>)type.OldValues.Clone(this);
                    OldValues.Initialize(type.OldValues);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_isDeleteModified = Property<bool>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditHistoryRawModifyDeleteEventType_IsDeleteModified, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.IsDeleteModified, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditHistoryRawModifyDeleteEventType_IsDeleteModified);

            m_startTime = Property<DateTime>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditHistoryRawModifyDeleteEventType_StartTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.StartTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditHistoryRawModifyDeleteEventType_StartTime);

            m_endTime = Property<DateTime>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditHistoryRawModifyDeleteEventType_EndTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.EndTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditHistoryRawModifyDeleteEventType_EndTime);

            m_oldValues = Property<IList<DataValue>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditHistoryRawModifyDeleteEventType_OldValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.OldValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditHistoryRawModifyDeleteEventType_OldValues);
        }
        #endregion

        #region Private Fields
        Property<bool> m_isDeleteModified;
        Property<DateTime> m_startTime;
        Property<DateTime> m_endTime;
        Property<IList<DataValue>> m_oldValues;
        #endregion
    }
    #endregion

    #region AuditHistoryRawModifyDeleteEvent Class
    /// <summary>
    /// Represents an instance of the AuditHistoryRawModifyDeleteEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditHistoryRawModifyDeleteEvent : AuditHistoryDeleteEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AuditHistoryRawModifyDeleteEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AuditHistoryRawModifyDeleteEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AuditHistoryRawModifyDeleteEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AuditHistoryRawModifyDeleteEvent instance = new AuditHistoryRawModifyDeleteEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AuditHistoryRawModifyDeleteEvent Construct(IServerInternal server)
        {
            AuditHistoryRawModifyDeleteEvent instance = new AuditHistoryRawModifyDeleteEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditHistoryRawModifyDeleteEvent clone = new AuditHistoryRawModifyDeleteEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region IsDeleteModified
        /// <summary>
        /// A description for the IsDeleteModified Property.
        /// </summary>
        public Property<bool> IsDeleteModified
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_isDeleteModified; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_isDeleteModified != null)
                    {
                        RemoveChild(m_isDeleteModified);
                    }

                    m_isDeleteModified = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceIsDeleteModified(Property<bool> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                IsDeleteModified = replacement;

                IsDeleteModified.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.IsDeleteModified, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditHistoryRawModifyDeleteEventType_IsDeleteModified,
                    null);
            }
        }
        #endregion

        #region StartTime
        /// <summary>
        /// A description for the StartTime Property.
        /// </summary>
        public Property<DateTime> StartTime
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_startTime; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_startTime != null)
                    {
                        RemoveChild(m_startTime);
                    }

                    m_startTime = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceStartTime(Property<DateTime> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                StartTime = replacement;

                StartTime.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.StartTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditHistoryRawModifyDeleteEventType_StartTime,
                    null);
            }
        }
        #endregion

        #region EndTime
        /// <summary>
        /// A description for the EndTime Property.
        /// </summary>
        public Property<DateTime> EndTime
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_endTime; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_endTime != null)
                    {
                        RemoveChild(m_endTime);
                    }

                    m_endTime = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceEndTime(Property<DateTime> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                EndTime = replacement;

                EndTime.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.EndTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditHistoryRawModifyDeleteEventType_EndTime,
                    null);
            }
        }
        #endregion

        #region OldValues
        /// <summary>
        /// A description for the OldValues Property.
        /// </summary>
        public Property<IList<DataValue>> OldValues
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_oldValues; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_oldValues != null)
                    {
                        RemoveChild(m_oldValues);
                    }

                    m_oldValues = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceOldValues(Property<IList<DataValue>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                OldValues = replacement;

                OldValues.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.OldValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditHistoryRawModifyDeleteEventType_OldValues,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AuditHistoryRawModifyDeleteEvent instance = source as AuditHistoryRawModifyDeleteEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AuditHistoryRawModifyDeleteEventType type = source as AuditHistoryRawModifyDeleteEventType;

                if (type != null && type.IsDeleteModified != null)
                {
                    IsDeleteModified = (Property<bool>)type.IsDeleteModified.Clone(this);
                    IsDeleteModified.Initialize(type.IsDeleteModified);
                }
                else if (instance != null && instance.IsDeleteModified != null)
                {
                    IsDeleteModified = (Property<bool>)instance.IsDeleteModified.Clone(this);
                    IsDeleteModified.Initialize(instance.IsDeleteModified);
                }

                if (type != null && type.StartTime != null)
                {
                    StartTime = (Property<DateTime>)type.StartTime.Clone(this);
                    StartTime.Initialize(type.StartTime);
                }
                else if (instance != null && instance.StartTime != null)
                {
                    StartTime = (Property<DateTime>)instance.StartTime.Clone(this);
                    StartTime.Initialize(instance.StartTime);
                }

                if (type != null && type.EndTime != null)
                {
                    EndTime = (Property<DateTime>)type.EndTime.Clone(this);
                    EndTime.Initialize(type.EndTime);
                }
                else if (instance != null && instance.EndTime != null)
                {
                    EndTime = (Property<DateTime>)instance.EndTime.Clone(this);
                    EndTime.Initialize(instance.EndTime);
                }

                if (type != null && type.OldValues != null)
                {
                    OldValues = (Property<IList<DataValue>>)type.OldValues.Clone(this);
                    OldValues.Initialize(type.OldValues);
                }
                else if (instance != null && instance.OldValues != null)
                {
                    OldValues = (Property<IList<DataValue>>)instance.OldValues.Clone(this);
                    OldValues.Initialize(instance.OldValues);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_isDeleteModified = Property<bool>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.IsDeleteModified, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditHistoryRawModifyDeleteEventType_IsDeleteModified);

            m_startTime = Property<DateTime>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.StartTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditHistoryRawModifyDeleteEventType_StartTime);

            m_endTime = Property<DateTime>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.EndTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditHistoryRawModifyDeleteEventType_EndTime);

            m_oldValues = Property<IList<DataValue>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.OldValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditHistoryRawModifyDeleteEventType_OldValues);
        }
        #endregion

        #region Private Fields
        private AuditHistoryRawModifyDeleteEventType m_typeDefinition;
        Property<bool> m_isDeleteModified;
        Property<DateTime> m_startTime;
        Property<DateTime> m_endTime;
        Property<IList<DataValue>> m_oldValues;
        #endregion
    }
    #endregion

    #region AuditHistoryAtTimeDeleteEventType Class
    /// <summary>
    /// Represents the AuditHistoryAtTimeDeleteEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditHistoryAtTimeDeleteEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AuditHistoryAtTimeDeleteEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AuditHistoryAtTimeDeleteEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AuditHistoryAtTimeDeleteEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AuditHistoryDeleteEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AuditHistoryAtTimeDeleteEventType FindSource(IServerInternal server)
        {
            AuditHistoryAtTimeDeleteEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AuditHistoryAtTimeDeleteEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AuditHistoryAtTimeDeleteEventType;

                if (type != null)
                {
                    return type;
                }

                type = new AuditHistoryAtTimeDeleteEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditHistoryAtTimeDeleteEventType clone = new AuditHistoryAtTimeDeleteEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region ReqTimes
        /// <summary>
        /// A description for the ReqTimes Property.
        /// </summary>
        public Property<IList<DateTime>> ReqTimes
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_reqTimes; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_reqTimes != null)
                    {
                        RemoveChild(m_reqTimes);
                    }

                    m_reqTimes = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceReqTimes(Property<IList<DateTime>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ReqTimes = replacement;

                ReqTimes.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ReqTimes, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditHistoryAtTimeDeleteEventType_ReqTimes,
                    null);
            }
        }
        #endregion

        #region OldValues
        /// <summary>
        /// A description for the OldValues Property.
        /// </summary>
        public Property<IList<DataValue>> OldValues
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_oldValues; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_oldValues != null)
                    {
                        RemoveChild(m_oldValues);
                    }

                    m_oldValues = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceOldValues(Property<IList<DataValue>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                OldValues = replacement;

                OldValues.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.OldValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditHistoryAtTimeDeleteEventType_OldValues,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AuditHistoryAtTimeDeleteEventType type = source as AuditHistoryAtTimeDeleteEventType;

                if (type != null && type.ReqTimes != null)
                {
                    ReqTimes = (Property<IList<DateTime>>)type.ReqTimes.Clone(this);
                    ReqTimes.Initialize(type.ReqTimes);
                }

                if (type != null && type.OldValues != null)
                {
                    OldValues = (Property<IList<DataValue>>)type.OldValues.Clone(this);
                    OldValues.Initialize(type.OldValues);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_reqTimes = Property<IList<DateTime>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditHistoryAtTimeDeleteEventType_ReqTimes, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ReqTimes, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditHistoryAtTimeDeleteEventType_ReqTimes);

            m_oldValues = Property<IList<DataValue>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditHistoryAtTimeDeleteEventType_OldValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.OldValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditHistoryAtTimeDeleteEventType_OldValues);
        }
        #endregion

        #region Private Fields
        Property<IList<DateTime>> m_reqTimes;
        Property<IList<DataValue>> m_oldValues;
        #endregion
    }
    #endregion

    #region AuditHistoryAtTimeDeleteEvent Class
    /// <summary>
    /// Represents an instance of the AuditHistoryAtTimeDeleteEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditHistoryAtTimeDeleteEvent : AuditHistoryDeleteEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AuditHistoryAtTimeDeleteEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AuditHistoryAtTimeDeleteEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AuditHistoryAtTimeDeleteEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AuditHistoryAtTimeDeleteEvent instance = new AuditHistoryAtTimeDeleteEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AuditHistoryAtTimeDeleteEvent Construct(IServerInternal server)
        {
            AuditHistoryAtTimeDeleteEvent instance = new AuditHistoryAtTimeDeleteEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditHistoryAtTimeDeleteEvent clone = new AuditHistoryAtTimeDeleteEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region ReqTimes
        /// <summary>
        /// A description for the ReqTimes Property.
        /// </summary>
        public Property<IList<DateTime>> ReqTimes
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_reqTimes; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_reqTimes != null)
                    {
                        RemoveChild(m_reqTimes);
                    }

                    m_reqTimes = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceReqTimes(Property<IList<DateTime>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ReqTimes = replacement;

                ReqTimes.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ReqTimes, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditHistoryAtTimeDeleteEventType_ReqTimes,
                    null);
            }
        }
        #endregion

        #region OldValues
        /// <summary>
        /// A description for the OldValues Property.
        /// </summary>
        public Property<IList<DataValue>> OldValues
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_oldValues; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_oldValues != null)
                    {
                        RemoveChild(m_oldValues);
                    }

                    m_oldValues = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceOldValues(Property<IList<DataValue>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                OldValues = replacement;

                OldValues.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.OldValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditHistoryAtTimeDeleteEventType_OldValues,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AuditHistoryAtTimeDeleteEvent instance = source as AuditHistoryAtTimeDeleteEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AuditHistoryAtTimeDeleteEventType type = source as AuditHistoryAtTimeDeleteEventType;

                if (type != null && type.ReqTimes != null)
                {
                    ReqTimes = (Property<IList<DateTime>>)type.ReqTimes.Clone(this);
                    ReqTimes.Initialize(type.ReqTimes);
                }
                else if (instance != null && instance.ReqTimes != null)
                {
                    ReqTimes = (Property<IList<DateTime>>)instance.ReqTimes.Clone(this);
                    ReqTimes.Initialize(instance.ReqTimes);
                }

                if (type != null && type.OldValues != null)
                {
                    OldValues = (Property<IList<DataValue>>)type.OldValues.Clone(this);
                    OldValues.Initialize(type.OldValues);
                }
                else if (instance != null && instance.OldValues != null)
                {
                    OldValues = (Property<IList<DataValue>>)instance.OldValues.Clone(this);
                    OldValues.Initialize(instance.OldValues);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_reqTimes = Property<IList<DateTime>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ReqTimes, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditHistoryAtTimeDeleteEventType_ReqTimes);

            m_oldValues = Property<IList<DataValue>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.OldValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditHistoryAtTimeDeleteEventType_OldValues);
        }
        #endregion

        #region Private Fields
        private AuditHistoryAtTimeDeleteEventType m_typeDefinition;
        Property<IList<DateTime>> m_reqTimes;
        Property<IList<DataValue>> m_oldValues;
        #endregion
    }
    #endregion

    #region AuditHistoryEventDeleteEventType Class
    /// <summary>
    /// Represents the AuditHistoryEventDeleteEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditHistoryEventDeleteEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AuditHistoryEventDeleteEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AuditHistoryEventDeleteEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AuditHistoryEventDeleteEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AuditHistoryDeleteEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AuditHistoryEventDeleteEventType FindSource(IServerInternal server)
        {
            AuditHistoryEventDeleteEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AuditHistoryEventDeleteEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AuditHistoryEventDeleteEventType;

                if (type != null)
                {
                    return type;
                }

                type = new AuditHistoryEventDeleteEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditHistoryEventDeleteEventType clone = new AuditHistoryEventDeleteEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region EventIds
        /// <summary>
        /// A description for the EventIds Property.
        /// </summary>
        public Property<IList<byte[]>> EventIds
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_eventIds; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_eventIds != null)
                    {
                        RemoveChild(m_eventIds);
                    }

                    m_eventIds = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceEventIds(Property<IList<byte[]>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                EventIds = replacement;

                EventIds.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.EventIds, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditHistoryEventDeleteEventType_EventIds,
                    null);
            }
        }
        #endregion

        #region OldValues
        /// <summary>
        /// A description for the OldValues Property.
        /// </summary>
        public Property<IList<HistoryEventFieldList>> OldValues
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_oldValues; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_oldValues != null)
                    {
                        RemoveChild(m_oldValues);
                    }

                    m_oldValues = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceOldValues(Property<IList<HistoryEventFieldList>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                OldValues = replacement;

                OldValues.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.OldValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditHistoryEventDeleteEventType_OldValues,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AuditHistoryEventDeleteEventType type = source as AuditHistoryEventDeleteEventType;

                if (type != null && type.EventIds != null)
                {
                    EventIds = (Property<IList<byte[]>>)type.EventIds.Clone(this);
                    EventIds.Initialize(type.EventIds);
                }

                if (type != null && type.OldValues != null)
                {
                    OldValues = (Property<IList<HistoryEventFieldList>>)type.OldValues.Clone(this);
                    OldValues.Initialize(type.OldValues);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_eventIds = Property<IList<byte[]>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditHistoryEventDeleteEventType_EventIds, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.EventIds, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditHistoryEventDeleteEventType_EventIds);

            m_oldValues = Property<IList<HistoryEventFieldList>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditHistoryEventDeleteEventType_OldValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.OldValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditHistoryEventDeleteEventType_OldValues);
        }
        #endregion

        #region Private Fields
        Property<IList<byte[]>> m_eventIds;
        Property<IList<HistoryEventFieldList>> m_oldValues;
        #endregion
    }
    #endregion

    #region AuditHistoryEventDeleteEvent Class
    /// <summary>
    /// Represents an instance of the AuditHistoryEventDeleteEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditHistoryEventDeleteEvent : AuditHistoryDeleteEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AuditHistoryEventDeleteEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AuditHistoryEventDeleteEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AuditHistoryEventDeleteEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AuditHistoryEventDeleteEvent instance = new AuditHistoryEventDeleteEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AuditHistoryEventDeleteEvent Construct(IServerInternal server)
        {
            AuditHistoryEventDeleteEvent instance = new AuditHistoryEventDeleteEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditHistoryEventDeleteEvent clone = new AuditHistoryEventDeleteEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region EventIds
        /// <summary>
        /// A description for the EventIds Property.
        /// </summary>
        public Property<IList<byte[]>> EventIds
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_eventIds; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_eventIds != null)
                    {
                        RemoveChild(m_eventIds);
                    }

                    m_eventIds = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceEventIds(Property<IList<byte[]>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                EventIds = replacement;

                EventIds.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.EventIds, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditHistoryEventDeleteEventType_EventIds,
                    null);
            }
        }
        #endregion

        #region OldValues
        /// <summary>
        /// A description for the OldValues Property.
        /// </summary>
        public Property<IList<HistoryEventFieldList>> OldValues
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_oldValues; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_oldValues != null)
                    {
                        RemoveChild(m_oldValues);
                    }

                    m_oldValues = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceOldValues(Property<IList<HistoryEventFieldList>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                OldValues = replacement;

                OldValues.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.OldValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditHistoryEventDeleteEventType_OldValues,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AuditHistoryEventDeleteEvent instance = source as AuditHistoryEventDeleteEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AuditHistoryEventDeleteEventType type = source as AuditHistoryEventDeleteEventType;

                if (type != null && type.EventIds != null)
                {
                    EventIds = (Property<IList<byte[]>>)type.EventIds.Clone(this);
                    EventIds.Initialize(type.EventIds);
                }
                else if (instance != null && instance.EventIds != null)
                {
                    EventIds = (Property<IList<byte[]>>)instance.EventIds.Clone(this);
                    EventIds.Initialize(instance.EventIds);
                }

                if (type != null && type.OldValues != null)
                {
                    OldValues = (Property<IList<HistoryEventFieldList>>)type.OldValues.Clone(this);
                    OldValues.Initialize(type.OldValues);
                }
                else if (instance != null && instance.OldValues != null)
                {
                    OldValues = (Property<IList<HistoryEventFieldList>>)instance.OldValues.Clone(this);
                    OldValues.Initialize(instance.OldValues);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_eventIds = Property<IList<byte[]>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.EventIds, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditHistoryEventDeleteEventType_EventIds);

            m_oldValues = Property<IList<HistoryEventFieldList>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.OldValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditHistoryEventDeleteEventType_OldValues);
        }
        #endregion

        #region Private Fields
        private AuditHistoryEventDeleteEventType m_typeDefinition;
        Property<IList<byte[]>> m_eventIds;
        Property<IList<HistoryEventFieldList>> m_oldValues;
        #endregion
    }
    #endregion

    #region AuditUpdateMethodEventType Class
    /// <summary>
    /// Represents the AuditUpdateMethodEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditUpdateMethodEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AuditUpdateMethodEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AuditUpdateMethodEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AuditUpdateMethodEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AuditEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AuditUpdateMethodEventType FindSource(IServerInternal server)
        {
            AuditUpdateMethodEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AuditUpdateMethodEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AuditUpdateMethodEventType;

                if (type != null)
                {
                    return type;
                }

                type = new AuditUpdateMethodEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditUpdateMethodEventType clone = new AuditUpdateMethodEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region MethodId
        /// <summary>
        /// A description for the MethodId Property.
        /// </summary>
        public Property<IList<NodeId>> MethodId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_methodId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_methodId != null)
                    {
                        RemoveChild(m_methodId);
                    }

                    m_methodId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceMethodId(Property<IList<NodeId>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                MethodId = replacement;

                MethodId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.MethodId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditUpdateMethodEventType_MethodId,
                    null);
            }
        }
        #endregion

        #region InputArguments
        /// <summary>
        /// A description for the InputArguments Property.
        /// </summary>
        public Property<IList<object>> InputArguments
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_inputArguments; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_inputArguments != null)
                    {
                        RemoveChild(m_inputArguments);
                    }

                    m_inputArguments = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceInputArguments(Property<IList<object>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                InputArguments = replacement;

                InputArguments.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.InputArguments, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditUpdateMethodEventType_InputArguments,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AuditUpdateMethodEventType type = source as AuditUpdateMethodEventType;

                if (type != null && type.MethodId != null)
                {
                    MethodId = (Property<IList<NodeId>>)type.MethodId.Clone(this);
                    MethodId.Initialize(type.MethodId);
                }

                if (type != null && type.InputArguments != null)
                {
                    InputArguments = (Property<IList<object>>)type.InputArguments.Clone(this);
                    InputArguments.Initialize(type.InputArguments);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_methodId = Property<IList<NodeId>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditUpdateMethodEventType_MethodId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.MethodId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditUpdateMethodEventType_MethodId);

            m_inputArguments = Property<IList<object>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditUpdateMethodEventType_InputArguments, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.InputArguments, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditUpdateMethodEventType_InputArguments);
        }
        #endregion

        #region Private Fields
        Property<IList<NodeId>> m_methodId;
        Property<IList<object>> m_inputArguments;
        #endregion
    }
    #endregion

    #region AuditUpdateMethodEvent Class
    /// <summary>
    /// Represents an instance of the AuditUpdateMethodEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditUpdateMethodEvent : AuditEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AuditUpdateMethodEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AuditUpdateMethodEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AuditUpdateMethodEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AuditUpdateMethodEvent instance = new AuditUpdateMethodEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AuditUpdateMethodEvent Construct(IServerInternal server)
        {
            AuditUpdateMethodEvent instance = new AuditUpdateMethodEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditUpdateMethodEvent clone = new AuditUpdateMethodEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region MethodId
        /// <summary>
        /// A description for the MethodId Property.
        /// </summary>
        public Property<IList<NodeId>> MethodId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_methodId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_methodId != null)
                    {
                        RemoveChild(m_methodId);
                    }

                    m_methodId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceMethodId(Property<IList<NodeId>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                MethodId = replacement;

                MethodId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.MethodId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditUpdateMethodEventType_MethodId,
                    null);
            }
        }
        #endregion

        #region InputArguments
        /// <summary>
        /// A description for the InputArguments Property.
        /// </summary>
        public Property<IList<object>> InputArguments
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_inputArguments; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_inputArguments != null)
                    {
                        RemoveChild(m_inputArguments);
                    }

                    m_inputArguments = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceInputArguments(Property<IList<object>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                InputArguments = replacement;

                InputArguments.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.InputArguments, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditUpdateMethodEventType_InputArguments,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AuditUpdateMethodEvent instance = source as AuditUpdateMethodEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AuditUpdateMethodEventType type = source as AuditUpdateMethodEventType;

                if (type != null && type.MethodId != null)
                {
                    MethodId = (Property<IList<NodeId>>)type.MethodId.Clone(this);
                    MethodId.Initialize(type.MethodId);
                }
                else if (instance != null && instance.MethodId != null)
                {
                    MethodId = (Property<IList<NodeId>>)instance.MethodId.Clone(this);
                    MethodId.Initialize(instance.MethodId);
                }

                if (type != null && type.InputArguments != null)
                {
                    InputArguments = (Property<IList<object>>)type.InputArguments.Clone(this);
                    InputArguments.Initialize(type.InputArguments);
                }
                else if (instance != null && instance.InputArguments != null)
                {
                    InputArguments = (Property<IList<object>>)instance.InputArguments.Clone(this);
                    InputArguments.Initialize(instance.InputArguments);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_methodId = Property<IList<NodeId>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.MethodId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditUpdateMethodEventType_MethodId);

            m_inputArguments = Property<IList<object>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.InputArguments, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditUpdateMethodEventType_InputArguments);
        }
        #endregion

        #region Private Fields
        private AuditUpdateMethodEventType m_typeDefinition;
        Property<IList<NodeId>> m_methodId;
        Property<IList<object>> m_inputArguments;
        #endregion
    }
    #endregion

    #region SystemEventType Class
    /// <summary>
    /// Represents the SystemEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class SystemEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public SystemEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.SystemEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.SystemEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new SystemEventType FindSource(IServerInternal server)
        {
            SystemEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.SystemEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as SystemEventType;

                if (type != null)
                {
                    return type;
                }

                type = new SystemEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                SystemEventType clone = new SystemEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                SystemEventType type = source as SystemEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endregion

    #region SystemEvent Class
    /// <summary>
    /// Represents an instance of the SystemEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class SystemEvent : BaseEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected SystemEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = SystemEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new SystemEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            SystemEvent instance = new SystemEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new SystemEvent Construct(IServerInternal server)
        {
            SystemEvent instance = new SystemEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                SystemEvent clone = new SystemEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                SystemEvent instance = source as SystemEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                SystemEventType type = source as SystemEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private SystemEventType m_typeDefinition;
        #endregion
    }
    #endregion

    #region DeviceFailureEventType Class
    /// <summary>
    /// Represents the DeviceFailureEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class DeviceFailureEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public DeviceFailureEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.DeviceFailureEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.DeviceFailureEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.SystemEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new DeviceFailureEventType FindSource(IServerInternal server)
        {
            DeviceFailureEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.DeviceFailureEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as DeviceFailureEventType;

                if (type != null)
                {
                    return type;
                }

                type = new DeviceFailureEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                DeviceFailureEventType clone = new DeviceFailureEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                DeviceFailureEventType type = source as DeviceFailureEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endregion

    #region DeviceFailureEvent Class
    /// <summary>
    /// Represents an instance of the DeviceFailureEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class DeviceFailureEvent : SystemEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected DeviceFailureEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = DeviceFailureEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new DeviceFailureEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            DeviceFailureEvent instance = new DeviceFailureEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new DeviceFailureEvent Construct(IServerInternal server)
        {
            DeviceFailureEvent instance = new DeviceFailureEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                DeviceFailureEvent clone = new DeviceFailureEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                DeviceFailureEvent instance = source as DeviceFailureEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                DeviceFailureEventType type = source as DeviceFailureEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private DeviceFailureEventType m_typeDefinition;
        #endregion
    }
    #endregion

    #region BaseModelChangeEventType Class
    /// <summary>
    /// Represents the BaseModelChangeEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class BaseModelChangeEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public BaseModelChangeEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.BaseModelChangeEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.BaseModelChangeEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new BaseModelChangeEventType FindSource(IServerInternal server)
        {
            BaseModelChangeEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.BaseModelChangeEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as BaseModelChangeEventType;

                if (type != null)
                {
                    return type;
                }

                type = new BaseModelChangeEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                BaseModelChangeEventType clone = new BaseModelChangeEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                BaseModelChangeEventType type = source as BaseModelChangeEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endregion

    #region BaseModelChangeEvent Class
    /// <summary>
    /// Represents an instance of the BaseModelChangeEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class BaseModelChangeEvent : BaseEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected BaseModelChangeEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = BaseModelChangeEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new BaseModelChangeEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            BaseModelChangeEvent instance = new BaseModelChangeEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new BaseModelChangeEvent Construct(IServerInternal server)
        {
            BaseModelChangeEvent instance = new BaseModelChangeEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                BaseModelChangeEvent clone = new BaseModelChangeEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                BaseModelChangeEvent instance = source as BaseModelChangeEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                BaseModelChangeEventType type = source as BaseModelChangeEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private BaseModelChangeEventType m_typeDefinition;
        #endregion
    }
    #endregion

    #region GeneralModelChangeEventType Class
    /// <summary>
    /// Represents the GeneralModelChangeEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class GeneralModelChangeEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public GeneralModelChangeEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.GeneralModelChangeEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.GeneralModelChangeEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseModelChangeEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new GeneralModelChangeEventType FindSource(IServerInternal server)
        {
            GeneralModelChangeEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.GeneralModelChangeEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as GeneralModelChangeEventType;

                if (type != null)
                {
                    return type;
                }

                type = new GeneralModelChangeEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                GeneralModelChangeEventType clone = new GeneralModelChangeEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region Changes
        /// <summary>
        /// A description for the Changes Property.
        /// </summary>
        public Property<IList<ModelChangeStructureDataType>> Changes
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_changes; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_changes != null)
                    {
                        RemoveChild(m_changes);
                    }

                    m_changes = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceChanges(Property<IList<ModelChangeStructureDataType>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Changes = replacement;

                Changes.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Changes, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.GeneralModelChangeEventType_Changes,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                GeneralModelChangeEventType type = source as GeneralModelChangeEventType;

                if (type != null && type.Changes != null)
                {
                    Changes = (Property<IList<ModelChangeStructureDataType>>)type.Changes.Clone(this);
                    Changes.Initialize(type.Changes);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_changes = Property<IList<ModelChangeStructureDataType>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.GeneralModelChangeEventType_Changes, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Changes, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.GeneralModelChangeEventType_Changes);
        }
        #endregion

        #region Private Fields
        Property<IList<ModelChangeStructureDataType>> m_changes;
        #endregion
    }
    #endregion

    #region GeneralModelChangeEvent Class
    /// <summary>
    /// Represents an instance of the GeneralModelChangeEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class GeneralModelChangeEvent : BaseModelChangeEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected GeneralModelChangeEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = GeneralModelChangeEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new GeneralModelChangeEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            GeneralModelChangeEvent instance = new GeneralModelChangeEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new GeneralModelChangeEvent Construct(IServerInternal server)
        {
            GeneralModelChangeEvent instance = new GeneralModelChangeEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                GeneralModelChangeEvent clone = new GeneralModelChangeEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region Changes
        /// <summary>
        /// A description for the Changes Property.
        /// </summary>
        public Property<IList<ModelChangeStructureDataType>> Changes
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_changes; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_changes != null)
                    {
                        RemoveChild(m_changes);
                    }

                    m_changes = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceChanges(Property<IList<ModelChangeStructureDataType>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Changes = replacement;

                Changes.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Changes, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.GeneralModelChangeEventType_Changes,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                GeneralModelChangeEvent instance = source as GeneralModelChangeEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                GeneralModelChangeEventType type = source as GeneralModelChangeEventType;

                if (type != null && type.Changes != null)
                {
                    Changes = (Property<IList<ModelChangeStructureDataType>>)type.Changes.Clone(this);
                    Changes.Initialize(type.Changes);
                }
                else if (instance != null && instance.Changes != null)
                {
                    Changes = (Property<IList<ModelChangeStructureDataType>>)instance.Changes.Clone(this);
                    Changes.Initialize(instance.Changes);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_changes = Property<IList<ModelChangeStructureDataType>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Changes, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.GeneralModelChangeEventType_Changes);
        }
        #endregion

        #region Private Fields
        private GeneralModelChangeEventType m_typeDefinition;
        Property<IList<ModelChangeStructureDataType>> m_changes;
        #endregion
    }
    #endregion

    #region SemanticChangeEventType Class
    /// <summary>
    /// Represents the SemanticChangeEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class SemanticChangeEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public SemanticChangeEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.SemanticChangeEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.SemanticChangeEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseModelChangeEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new SemanticChangeEventType FindSource(IServerInternal server)
        {
            SemanticChangeEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.SemanticChangeEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as SemanticChangeEventType;

                if (type != null)
                {
                    return type;
                }

                type = new SemanticChangeEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                SemanticChangeEventType clone = new SemanticChangeEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region Changes
        /// <summary>
        /// A description for the Changes Property.
        /// </summary>
        public Property<IList<SemanticChangeStructureDataType>> Changes
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_changes; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_changes != null)
                    {
                        RemoveChild(m_changes);
                    }

                    m_changes = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceChanges(Property<IList<SemanticChangeStructureDataType>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Changes = replacement;

                Changes.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Changes, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SemanticChangeEventType_Changes,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                SemanticChangeEventType type = source as SemanticChangeEventType;

                if (type != null && type.Changes != null)
                {
                    Changes = (Property<IList<SemanticChangeStructureDataType>>)type.Changes.Clone(this);
                    Changes.Initialize(type.Changes);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_changes = Property<IList<SemanticChangeStructureDataType>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SemanticChangeEventType_Changes, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Changes, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SemanticChangeEventType_Changes);
        }
        #endregion

        #region Private Fields
        Property<IList<SemanticChangeStructureDataType>> m_changes;
        #endregion
    }
    #endregion

    #region SemanticChangeEvent Class
    /// <summary>
    /// Represents an instance of the SemanticChangeEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class SemanticChangeEvent : BaseModelChangeEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected SemanticChangeEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = SemanticChangeEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new SemanticChangeEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            SemanticChangeEvent instance = new SemanticChangeEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new SemanticChangeEvent Construct(IServerInternal server)
        {
            SemanticChangeEvent instance = new SemanticChangeEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                SemanticChangeEvent clone = new SemanticChangeEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region Changes
        /// <summary>
        /// A description for the Changes Property.
        /// </summary>
        public Property<IList<SemanticChangeStructureDataType>> Changes
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_changes; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_changes != null)
                    {
                        RemoveChild(m_changes);
                    }

                    m_changes = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceChanges(Property<IList<SemanticChangeStructureDataType>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Changes = replacement;

                Changes.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Changes, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SemanticChangeEventType_Changes,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                SemanticChangeEvent instance = source as SemanticChangeEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                SemanticChangeEventType type = source as SemanticChangeEventType;

                if (type != null && type.Changes != null)
                {
                    Changes = (Property<IList<SemanticChangeStructureDataType>>)type.Changes.Clone(this);
                    Changes.Initialize(type.Changes);
                }
                else if (instance != null && instance.Changes != null)
                {
                    Changes = (Property<IList<SemanticChangeStructureDataType>>)instance.Changes.Clone(this);
                    Changes.Initialize(instance.Changes);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_changes = Property<IList<SemanticChangeStructureDataType>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Changes, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SemanticChangeEventType_Changes);
        }
        #endregion

        #region Private Fields
        private SemanticChangeEventType m_typeDefinition;
        Property<IList<SemanticChangeStructureDataType>> m_changes;
        #endregion
    }
    #endregion

    #region ServerVendorCapabilityType Class
    /// <summary>
    /// Represents the ServerVendorCapabilityType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class ServerVendorCapabilityType<T> : VariableTypeSource<T>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public ServerVendorCapabilityType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.VariableTypes.ServerVendorCapabilityType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.ServerVendorCapabilityType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.VariableTypes.BaseDataVariableType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new ServerVendorCapabilityType<T> FindSource(IServerInternal server)
        {
            ServerVendorCapabilityType<T> type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.VariableTypes.ServerVendorCapabilityType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as ServerVendorCapabilityType<T>;

                if (type != null)
                {
                    return type;
                }

                type = new ServerVendorCapabilityType<T>(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                ServerVendorCapabilityType<T> clone = new ServerVendorCapabilityType<T>(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                ServerVendorCapabilityType<T> type = source as ServerVendorCapabilityType<T>;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endregion

    #region ServerVendorCapability Class
    /// <summary>
    /// Represents an instance of the ServerVendorCapabilityType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class ServerVendorCapability<T> : DataVariable<T>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected ServerVendorCapability(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = ServerVendorCapabilityType<T>.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new ServerVendorCapability<T> Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            ServerVendorCapability<T> instance = new ServerVendorCapability<T>(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new ServerVendorCapability<T> Construct(IServerInternal server)
        {
            ServerVendorCapability<T> instance = new ServerVendorCapability<T>(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                ServerVendorCapability<T> clone = new ServerVendorCapability<T>(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                ServerVendorCapability<T> instance = source as ServerVendorCapability<T>;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                ServerVendorCapabilityType<T> type = source as ServerVendorCapabilityType<T>;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private ServerVendorCapabilityType<T> m_typeDefinition;
        #endregion
    }
    #endregion

    #region ServerStatusType Class
    /// <summary>
    /// Represents the ServerStatusType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class ServerStatusType : VariableTypeSource<ServerStatusDataType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public ServerStatusType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.VariableTypes.ServerStatusType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.ServerStatusType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.VariableTypes.BaseDataVariableType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new ServerStatusType FindSource(IServerInternal server)
        {
            ServerStatusType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.VariableTypes.ServerStatusType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as ServerStatusType;

                if (type != null)
                {
                    return type;
                }

                type = new ServerStatusType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                ServerStatusType clone = new ServerStatusType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region StartTime
        /// <summary>
        /// A description for the StartTime Variable.
        /// </summary>
        public DataVariable<DateTime> StartTime
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_startTime; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_startTime != null)
                    {
                        RemoveChild(m_startTime);
                    }

                    m_startTime = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceStartTime(DataVariable<DateTime> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                StartTime = replacement;

                StartTime.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.StartTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerStatusType_StartTime,
                    null);
            }
        }
        #endregion

        #region CurrentTime
        /// <summary>
        /// A description for the CurrentTime Variable.
        /// </summary>
        public DataVariable<DateTime> CurrentTime
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_currentTime; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_currentTime != null)
                    {
                        RemoveChild(m_currentTime);
                    }

                    m_currentTime = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCurrentTime(DataVariable<DateTime> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CurrentTime = replacement;

                CurrentTime.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CurrentTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerStatusType_CurrentTime,
                    null);
            }
        }
        #endregion

        #region State
        /// <summary>
        /// A description for the State Variable.
        /// </summary>
        public DataVariable<ServerState> State
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_state; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_state != null)
                    {
                        RemoveChild(m_state);
                    }

                    m_state = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceState(DataVariable<ServerState> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                State = replacement;

                State.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.State, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerStatusType_State,
                    null);
            }
        }
        #endregion

        #region BuildInfo
        /// <summary>
        /// A description for the BuildInfo Variable.
        /// </summary>
        public BuildInfoVariable BuildInfo
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_buildInfo; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_buildInfo != null)
                    {
                        RemoveChild(m_buildInfo);
                    }

                    m_buildInfo = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceBuildInfo(BuildInfoVariable replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                BuildInfo = replacement;

                BuildInfo.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.BuildInfo, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerStatusType_BuildInfo,
                    null);
            }
        }
        #endregion

        #region SecondsTillShutdown
        /// <summary>
        /// A description for the SecondsTillShutdown Variable.
        /// </summary>
        public DataVariable<uint> SecondsTillShutdown
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_secondsTillShutdown; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_secondsTillShutdown != null)
                    {
                        RemoveChild(m_secondsTillShutdown);
                    }

                    m_secondsTillShutdown = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSecondsTillShutdown(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SecondsTillShutdown = replacement;

                SecondsTillShutdown.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SecondsTillShutdown, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerStatusType_SecondsTillShutdown,
                    null);
            }
        }
        #endregion

        #region ShutdownReason
        /// <summary>
        /// A description for the ShutdownReason Variable.
        /// </summary>
        public DataVariable<LocalizedText> ShutdownReason
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_shutdownReason; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_shutdownReason != null)
                    {
                        RemoveChild(m_shutdownReason);
                    }

                    m_shutdownReason = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceShutdownReason(DataVariable<LocalizedText> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ShutdownReason = replacement;

                ShutdownReason.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ShutdownReason, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerStatusType_ShutdownReason,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                ServerStatusType type = source as ServerStatusType;

                if (type != null && type.StartTime != null)
                {
                    StartTime = (DataVariable<DateTime>)type.StartTime.Clone(this);
                    StartTime.Initialize(type.StartTime);
                }

                if (type != null && type.CurrentTime != null)
                {
                    CurrentTime = (DataVariable<DateTime>)type.CurrentTime.Clone(this);
                    CurrentTime.Initialize(type.CurrentTime);
                }

                if (type != null && type.State != null)
                {
                    State = (DataVariable<ServerState>)type.State.Clone(this);
                    State.Initialize(type.State);
                }

                if (type != null && type.BuildInfo != null)
                {
                    BuildInfo = (BuildInfoVariable)type.BuildInfo.Clone(this);
                    BuildInfo.Initialize(type.BuildInfo);
                }

                if (type != null && type.SecondsTillShutdown != null)
                {
                    SecondsTillShutdown = (DataVariable<uint>)type.SecondsTillShutdown.Clone(this);
                    SecondsTillShutdown.Initialize(type.SecondsTillShutdown);
                }

                if (type != null && type.ShutdownReason != null)
                {
                    ShutdownReason = (DataVariable<LocalizedText>)type.ShutdownReason.Clone(this);
                    ShutdownReason.Initialize(type.ShutdownReason);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_startTime = DataVariable<DateTime>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ServerStatusType_StartTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.StartTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerStatusType_StartTime);

            m_currentTime = DataVariable<DateTime>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ServerStatusType_CurrentTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.CurrentTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerStatusType_CurrentTime);

            m_state = DataVariable<ServerState>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ServerStatusType_State, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.State, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerStatusType_State);

            m_buildInfo = BuildInfoVariable.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ServerStatusType_BuildInfo, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.BuildInfo, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerStatusType_BuildInfo);

            m_secondsTillShutdown = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ServerStatusType_SecondsTillShutdown, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SecondsTillShutdown, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerStatusType_SecondsTillShutdown);

            m_shutdownReason = DataVariable<LocalizedText>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ServerStatusType_ShutdownReason, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ShutdownReason, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerStatusType_ShutdownReason);
        }
        #endregion

        #region Private Fields
        DataVariable<DateTime> m_startTime;
        DataVariable<DateTime> m_currentTime;
        DataVariable<ServerState> m_state;
        BuildInfoVariable m_buildInfo;
        DataVariable<uint> m_secondsTillShutdown;
        DataVariable<LocalizedText> m_shutdownReason;
        #endregion
    }
    #endregion

    #region ServerStatus Class
    /// <summary>
    /// Represents an instance of the ServerStatusType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class ServerStatus : DataVariable<ServerStatusDataType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected ServerStatus(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = ServerStatusType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new ServerStatus Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            ServerStatus instance = new ServerStatus(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new ServerStatus Construct(IServerInternal server)
        {
            ServerStatus instance = new ServerStatus(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                ServerStatus clone = new ServerStatus(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region StartTime
        /// <summary>
        /// A description for the StartTime Variable.
        /// </summary>
        public DataVariable<DateTime> StartTime
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_startTime; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_startTime != null)
                    {
                        RemoveChild(m_startTime);
                    }

                    m_startTime = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceStartTime(DataVariable<DateTime> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                StartTime = replacement;

                StartTime.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.StartTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerStatusType_StartTime,
                    null);
            }
        }
        #endregion

        #region CurrentTime
        /// <summary>
        /// A description for the CurrentTime Variable.
        /// </summary>
        public DataVariable<DateTime> CurrentTime
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_currentTime; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_currentTime != null)
                    {
                        RemoveChild(m_currentTime);
                    }

                    m_currentTime = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCurrentTime(DataVariable<DateTime> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CurrentTime = replacement;

                CurrentTime.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CurrentTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerStatusType_CurrentTime,
                    null);
            }
        }
        #endregion

        #region State
        /// <summary>
        /// A description for the State Variable.
        /// </summary>
        public DataVariable<ServerState> State
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_state; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_state != null)
                    {
                        RemoveChild(m_state);
                    }

                    m_state = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceState(DataVariable<ServerState> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                State = replacement;

                State.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.State, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerStatusType_State,
                    null);
            }
        }
        #endregion

        #region BuildInfo
        /// <summary>
        /// A description for the BuildInfo Variable.
        /// </summary>
        public BuildInfoVariable BuildInfo
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_buildInfo; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_buildInfo != null)
                    {
                        RemoveChild(m_buildInfo);
                    }

                    m_buildInfo = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceBuildInfo(BuildInfoVariable replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                BuildInfo = replacement;

                BuildInfo.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.BuildInfo, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerStatusType_BuildInfo,
                    null);
            }
        }
        #endregion

        #region SecondsTillShutdown
        /// <summary>
        /// A description for the SecondsTillShutdown Variable.
        /// </summary>
        public DataVariable<uint> SecondsTillShutdown
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_secondsTillShutdown; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_secondsTillShutdown != null)
                    {
                        RemoveChild(m_secondsTillShutdown);
                    }

                    m_secondsTillShutdown = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSecondsTillShutdown(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SecondsTillShutdown = replacement;

                SecondsTillShutdown.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SecondsTillShutdown, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerStatusType_SecondsTillShutdown,
                    null);
            }
        }
        #endregion

        #region ShutdownReason
        /// <summary>
        /// A description for the ShutdownReason Variable.
        /// </summary>
        public DataVariable<LocalizedText> ShutdownReason
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_shutdownReason; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_shutdownReason != null)
                    {
                        RemoveChild(m_shutdownReason);
                    }

                    m_shutdownReason = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceShutdownReason(DataVariable<LocalizedText> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ShutdownReason = replacement;

                ShutdownReason.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ShutdownReason, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerStatusType_ShutdownReason,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                ServerStatus instance = source as ServerStatus;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                ServerStatusType type = source as ServerStatusType;

                if (type != null && type.StartTime != null)
                {
                    StartTime = (DataVariable<DateTime>)type.StartTime.Clone(this);
                    StartTime.Initialize(type.StartTime);
                }
                else if (instance != null && instance.StartTime != null)
                {
                    StartTime = (DataVariable<DateTime>)instance.StartTime.Clone(this);
                    StartTime.Initialize(instance.StartTime);
                }

                if (type != null && type.CurrentTime != null)
                {
                    CurrentTime = (DataVariable<DateTime>)type.CurrentTime.Clone(this);
                    CurrentTime.Initialize(type.CurrentTime);
                }
                else if (instance != null && instance.CurrentTime != null)
                {
                    CurrentTime = (DataVariable<DateTime>)instance.CurrentTime.Clone(this);
                    CurrentTime.Initialize(instance.CurrentTime);
                }

                if (type != null && type.State != null)
                {
                    State = (DataVariable<ServerState>)type.State.Clone(this);
                    State.Initialize(type.State);
                }
                else if (instance != null && instance.State != null)
                {
                    State = (DataVariable<ServerState>)instance.State.Clone(this);
                    State.Initialize(instance.State);
                }

                if (type != null && type.BuildInfo != null)
                {
                    BuildInfo = (BuildInfoVariable)type.BuildInfo.Clone(this);
                    BuildInfo.Initialize(type.BuildInfo);
                }
                else if (instance != null && instance.BuildInfo != null)
                {
                    BuildInfo = (BuildInfoVariable)instance.BuildInfo.Clone(this);
                    BuildInfo.Initialize(instance.BuildInfo);
                }

                if (type != null && type.SecondsTillShutdown != null)
                {
                    SecondsTillShutdown = (DataVariable<uint>)type.SecondsTillShutdown.Clone(this);
                    SecondsTillShutdown.Initialize(type.SecondsTillShutdown);
                }
                else if (instance != null && instance.SecondsTillShutdown != null)
                {
                    SecondsTillShutdown = (DataVariable<uint>)instance.SecondsTillShutdown.Clone(this);
                    SecondsTillShutdown.Initialize(instance.SecondsTillShutdown);
                }

                if (type != null && type.ShutdownReason != null)
                {
                    ShutdownReason = (DataVariable<LocalizedText>)type.ShutdownReason.Clone(this);
                    ShutdownReason.Initialize(type.ShutdownReason);
                }
                else if (instance != null && instance.ShutdownReason != null)
                {
                    ShutdownReason = (DataVariable<LocalizedText>)instance.ShutdownReason.Clone(this);
                    ShutdownReason.Initialize(instance.ShutdownReason);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_startTime = DataVariable<DateTime>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.StartTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerStatusType_StartTime);

            m_currentTime = DataVariable<DateTime>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.CurrentTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerStatusType_CurrentTime);

            m_state = DataVariable<ServerState>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.State, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerStatusType_State);

            m_buildInfo = BuildInfoVariable.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.BuildInfo, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerStatusType_BuildInfo);

            m_secondsTillShutdown = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.SecondsTillShutdown, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerStatusType_SecondsTillShutdown);

            m_shutdownReason = DataVariable<LocalizedText>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ShutdownReason, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerStatusType_ShutdownReason);
        }
        
        #region Variable/DataType Conversion Functions.
        /// <summary cref="VariableSource.UpdateValueFromChild" />
        public override void UpdateValueFromChild(VariableSource child)
        {
            lock (DataLock)
            {
                ServerStatusDataType value = RawValue;

                if (value == null)
                {
                    value = new ServerStatusDataType();
                }

                switch (child.NumericId)
                {
                    case Opc.Ua.Variables.ServerStatusType_StartTime:
                    {
                        value.StartTime = StartTime.Value;
                        break;
                    }

                    case Opc.Ua.Variables.ServerStatusType_CurrentTime:
                    {
                        value.CurrentTime = CurrentTime.Value;
                        break;
                    }

                    case Opc.Ua.Variables.ServerStatusType_State:
                    {
                        value.State = State.Value;
                        break;
                    }

                    case Opc.Ua.Variables.ServerStatusType_BuildInfo:
                    {
                        value.BuildInfo = BuildInfo.Value;
                        break;
                    }

                    case Opc.Ua.Variables.ServerStatusType_SecondsTillShutdown:
                    {
                        value.SecondsTillShutdown = SecondsTillShutdown.Value;
                        break;
                    }

                    case Opc.Ua.Variables.ServerStatusType_ShutdownReason:
                    {
                        value.ShutdownReason = ShutdownReason.Value;
                        break;
                    }

                    default:
                    {
                        return;
                    }
                }

                // triggers a data change.
                Value = value;
            }
        }

        /// <summary cref="VariableSource.UpdateChildrenFromValue" />
        public override void UpdateChildrenFromValue()
        {
            lock (DataLock)
            {
                ServerStatusDataType value = RawValue;

                if (value == null)
                {
                    RawValue = value = new ServerStatusDataType();
                }

                StartTime.Value = value.StartTime;
                CurrentTime.Value = value.CurrentTime;
                State.Value = value.State;
                BuildInfo.Value = value.BuildInfo;
                SecondsTillShutdown.Value = value.SecondsTillShutdown;
                ShutdownReason.Value = value.ShutdownReason;
            }
        }
        #endregion
        #endregion

        #region Private Fields
        private ServerStatusType m_typeDefinition;
        DataVariable<DateTime> m_startTime;
        DataVariable<DateTime> m_currentTime;
        DataVariable<ServerState> m_state;
        BuildInfoVariable m_buildInfo;
        DataVariable<uint> m_secondsTillShutdown;
        DataVariable<LocalizedText> m_shutdownReason;
        #endregion
    }
    #endregion

    #region BuildInfoType Class
    /// <summary>
    /// Represents the BuildInfoType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class BuildInfoType : VariableTypeSource<BuildInfo>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public BuildInfoType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.VariableTypes.BuildInfoType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.BuildInfoType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.VariableTypes.BaseDataVariableType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new BuildInfoType FindSource(IServerInternal server)
        {
            BuildInfoType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.VariableTypes.BuildInfoType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as BuildInfoType;

                if (type != null)
                {
                    return type;
                }

                type = new BuildInfoType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                BuildInfoType clone = new BuildInfoType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region ProductUri
        /// <summary>
        /// A description for the ProductUri Variable.
        /// </summary>
        public DataVariable<string> ProductUri
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_productUri; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_productUri != null)
                    {
                        RemoveChild(m_productUri);
                    }

                    m_productUri = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceProductUri(DataVariable<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ProductUri = replacement;

                ProductUri.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ProductUri, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.BuildInfoType_ProductUri,
                    null);
            }
        }
        #endregion

        #region ManufacturerName
        /// <summary>
        /// A description for the ManufacturerName Variable.
        /// </summary>
        public DataVariable<string> ManufacturerName
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_manufacturerName; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_manufacturerName != null)
                    {
                        RemoveChild(m_manufacturerName);
                    }

                    m_manufacturerName = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceManufacturerName(DataVariable<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ManufacturerName = replacement;

                ManufacturerName.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ManufacturerName, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.BuildInfoType_ManufacturerName,
                    null);
            }
        }
        #endregion

        #region ProductName
        /// <summary>
        /// A description for the ProductName Variable.
        /// </summary>
        public DataVariable<string> ProductName
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_productName; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_productName != null)
                    {
                        RemoveChild(m_productName);
                    }

                    m_productName = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceProductName(DataVariable<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ProductName = replacement;

                ProductName.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ProductName, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.BuildInfoType_ProductName,
                    null);
            }
        }
        #endregion

        #region SoftwareVersion
        /// <summary>
        /// A description for the SoftwareVersion Variable.
        /// </summary>
        public DataVariable<string> SoftwareVersion
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_softwareVersion; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_softwareVersion != null)
                    {
                        RemoveChild(m_softwareVersion);
                    }

                    m_softwareVersion = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSoftwareVersion(DataVariable<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SoftwareVersion = replacement;

                SoftwareVersion.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SoftwareVersion, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.BuildInfoType_SoftwareVersion,
                    null);
            }
        }
        #endregion

        #region BuildNumber
        /// <summary>
        /// A description for the BuildNumber Variable.
        /// </summary>
        public DataVariable<string> BuildNumber
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_buildNumber; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_buildNumber != null)
                    {
                        RemoveChild(m_buildNumber);
                    }

                    m_buildNumber = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceBuildNumber(DataVariable<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                BuildNumber = replacement;

                BuildNumber.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.BuildNumber, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.BuildInfoType_BuildNumber,
                    null);
            }
        }
        #endregion

        #region BuildDate
        /// <summary>
        /// A description for the BuildDate Variable.
        /// </summary>
        public DataVariable<DateTime> BuildDate
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_buildDate; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_buildDate != null)
                    {
                        RemoveChild(m_buildDate);
                    }

                    m_buildDate = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceBuildDate(DataVariable<DateTime> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                BuildDate = replacement;

                BuildDate.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.BuildDate, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.BuildInfoType_BuildDate,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                BuildInfoType type = source as BuildInfoType;

                if (type != null && type.ProductUri != null)
                {
                    ProductUri = (DataVariable<string>)type.ProductUri.Clone(this);
                    ProductUri.Initialize(type.ProductUri);
                }

                if (type != null && type.ManufacturerName != null)
                {
                    ManufacturerName = (DataVariable<string>)type.ManufacturerName.Clone(this);
                    ManufacturerName.Initialize(type.ManufacturerName);
                }

                if (type != null && type.ProductName != null)
                {
                    ProductName = (DataVariable<string>)type.ProductName.Clone(this);
                    ProductName.Initialize(type.ProductName);
                }

                if (type != null && type.SoftwareVersion != null)
                {
                    SoftwareVersion = (DataVariable<string>)type.SoftwareVersion.Clone(this);
                    SoftwareVersion.Initialize(type.SoftwareVersion);
                }

                if (type != null && type.BuildNumber != null)
                {
                    BuildNumber = (DataVariable<string>)type.BuildNumber.Clone(this);
                    BuildNumber.Initialize(type.BuildNumber);
                }

                if (type != null && type.BuildDate != null)
                {
                    BuildDate = (DataVariable<DateTime>)type.BuildDate.Clone(this);
                    BuildDate.Initialize(type.BuildDate);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_productUri = DataVariable<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.BuildInfoType_ProductUri, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ProductUri, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.BuildInfoType_ProductUri);

            m_manufacturerName = DataVariable<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.BuildInfoType_ManufacturerName, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ManufacturerName, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.BuildInfoType_ManufacturerName);

            m_productName = DataVariable<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.BuildInfoType_ProductName, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ProductName, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.BuildInfoType_ProductName);

            m_softwareVersion = DataVariable<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.BuildInfoType_SoftwareVersion, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SoftwareVersion, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.BuildInfoType_SoftwareVersion);

            m_buildNumber = DataVariable<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.BuildInfoType_BuildNumber, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.BuildNumber, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.BuildInfoType_BuildNumber);

            m_buildDate = DataVariable<DateTime>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.BuildInfoType_BuildDate, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.BuildDate, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.BuildInfoType_BuildDate);
        }
        #endregion

        #region Private Fields
        DataVariable<string> m_productUri;
        DataVariable<string> m_manufacturerName;
        DataVariable<string> m_productName;
        DataVariable<string> m_softwareVersion;
        DataVariable<string> m_buildNumber;
        DataVariable<DateTime> m_buildDate;
        #endregion
    }
    #endregion

    #region BuildInfoVariable Class
    /// <summary>
    /// Represents an instance of the BuildInfoType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class BuildInfoVariable : DataVariable<BuildInfo>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected BuildInfoVariable(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = BuildInfoType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new BuildInfoVariable Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            BuildInfoVariable instance = new BuildInfoVariable(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new BuildInfoVariable Construct(IServerInternal server)
        {
            BuildInfoVariable instance = new BuildInfoVariable(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                BuildInfoVariable clone = new BuildInfoVariable(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region ProductUri
        /// <summary>
        /// A description for the ProductUri Variable.
        /// </summary>
        public DataVariable<string> ProductUri
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_productUri; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_productUri != null)
                    {
                        RemoveChild(m_productUri);
                    }

                    m_productUri = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceProductUri(DataVariable<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ProductUri = replacement;

                ProductUri.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ProductUri, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.BuildInfoType_ProductUri,
                    null);
            }
        }
        #endregion

        #region ManufacturerName
        /// <summary>
        /// A description for the ManufacturerName Variable.
        /// </summary>
        public DataVariable<string> ManufacturerName
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_manufacturerName; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_manufacturerName != null)
                    {
                        RemoveChild(m_manufacturerName);
                    }

                    m_manufacturerName = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceManufacturerName(DataVariable<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ManufacturerName = replacement;

                ManufacturerName.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ManufacturerName, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.BuildInfoType_ManufacturerName,
                    null);
            }
        }
        #endregion

        #region ProductName
        /// <summary>
        /// A description for the ProductName Variable.
        /// </summary>
        public DataVariable<string> ProductName
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_productName; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_productName != null)
                    {
                        RemoveChild(m_productName);
                    }

                    m_productName = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceProductName(DataVariable<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ProductName = replacement;

                ProductName.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ProductName, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.BuildInfoType_ProductName,
                    null);
            }
        }
        #endregion

        #region SoftwareVersion
        /// <summary>
        /// A description for the SoftwareVersion Variable.
        /// </summary>
        public DataVariable<string> SoftwareVersion
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_softwareVersion; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_softwareVersion != null)
                    {
                        RemoveChild(m_softwareVersion);
                    }

                    m_softwareVersion = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSoftwareVersion(DataVariable<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SoftwareVersion = replacement;

                SoftwareVersion.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SoftwareVersion, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.BuildInfoType_SoftwareVersion,
                    null);
            }
        }
        #endregion

        #region BuildNumber
        /// <summary>
        /// A description for the BuildNumber Variable.
        /// </summary>
        public DataVariable<string> BuildNumber
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_buildNumber; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_buildNumber != null)
                    {
                        RemoveChild(m_buildNumber);
                    }

                    m_buildNumber = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceBuildNumber(DataVariable<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                BuildNumber = replacement;

                BuildNumber.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.BuildNumber, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.BuildInfoType_BuildNumber,
                    null);
            }
        }
        #endregion

        #region BuildDate
        /// <summary>
        /// A description for the BuildDate Variable.
        /// </summary>
        public DataVariable<DateTime> BuildDate
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_buildDate; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_buildDate != null)
                    {
                        RemoveChild(m_buildDate);
                    }

                    m_buildDate = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceBuildDate(DataVariable<DateTime> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                BuildDate = replacement;

                BuildDate.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.BuildDate, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.BuildInfoType_BuildDate,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                BuildInfoVariable instance = source as BuildInfoVariable;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                BuildInfoType type = source as BuildInfoType;

                if (type != null && type.ProductUri != null)
                {
                    ProductUri = (DataVariable<string>)type.ProductUri.Clone(this);
                    ProductUri.Initialize(type.ProductUri);
                }
                else if (instance != null && instance.ProductUri != null)
                {
                    ProductUri = (DataVariable<string>)instance.ProductUri.Clone(this);
                    ProductUri.Initialize(instance.ProductUri);
                }

                if (type != null && type.ManufacturerName != null)
                {
                    ManufacturerName = (DataVariable<string>)type.ManufacturerName.Clone(this);
                    ManufacturerName.Initialize(type.ManufacturerName);
                }
                else if (instance != null && instance.ManufacturerName != null)
                {
                    ManufacturerName = (DataVariable<string>)instance.ManufacturerName.Clone(this);
                    ManufacturerName.Initialize(instance.ManufacturerName);
                }

                if (type != null && type.ProductName != null)
                {
                    ProductName = (DataVariable<string>)type.ProductName.Clone(this);
                    ProductName.Initialize(type.ProductName);
                }
                else if (instance != null && instance.ProductName != null)
                {
                    ProductName = (DataVariable<string>)instance.ProductName.Clone(this);
                    ProductName.Initialize(instance.ProductName);
                }

                if (type != null && type.SoftwareVersion != null)
                {
                    SoftwareVersion = (DataVariable<string>)type.SoftwareVersion.Clone(this);
                    SoftwareVersion.Initialize(type.SoftwareVersion);
                }
                else if (instance != null && instance.SoftwareVersion != null)
                {
                    SoftwareVersion = (DataVariable<string>)instance.SoftwareVersion.Clone(this);
                    SoftwareVersion.Initialize(instance.SoftwareVersion);
                }

                if (type != null && type.BuildNumber != null)
                {
                    BuildNumber = (DataVariable<string>)type.BuildNumber.Clone(this);
                    BuildNumber.Initialize(type.BuildNumber);
                }
                else if (instance != null && instance.BuildNumber != null)
                {
                    BuildNumber = (DataVariable<string>)instance.BuildNumber.Clone(this);
                    BuildNumber.Initialize(instance.BuildNumber);
                }

                if (type != null && type.BuildDate != null)
                {
                    BuildDate = (DataVariable<DateTime>)type.BuildDate.Clone(this);
                    BuildDate.Initialize(type.BuildDate);
                }
                else if (instance != null && instance.BuildDate != null)
                {
                    BuildDate = (DataVariable<DateTime>)instance.BuildDate.Clone(this);
                    BuildDate.Initialize(instance.BuildDate);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_productUri = DataVariable<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ProductUri, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.BuildInfoType_ProductUri);

            m_manufacturerName = DataVariable<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ManufacturerName, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.BuildInfoType_ManufacturerName);

            m_productName = DataVariable<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ProductName, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.BuildInfoType_ProductName);

            m_softwareVersion = DataVariable<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.SoftwareVersion, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.BuildInfoType_SoftwareVersion);

            m_buildNumber = DataVariable<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.BuildNumber, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.BuildInfoType_BuildNumber);

            m_buildDate = DataVariable<DateTime>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.BuildDate, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.BuildInfoType_BuildDate);
        }
        
        #region Variable/DataType Conversion Functions.
        /// <summary cref="VariableSource.UpdateValueFromChild" />
        public override void UpdateValueFromChild(VariableSource child)
        {
            lock (DataLock)
            {
                BuildInfo value = RawValue;

                if (value == null)
                {
                    value = new BuildInfo();
                }

                switch (child.NumericId)
                {
                    case Opc.Ua.Variables.BuildInfoType_ProductUri:
                    {
                        value.ProductUri = ProductUri.Value;
                        break;
                    }

                    case Opc.Ua.Variables.BuildInfoType_ManufacturerName:
                    {
                        value.ManufacturerName = ManufacturerName.Value;
                        break;
                    }

                    case Opc.Ua.Variables.BuildInfoType_ProductName:
                    {
                        value.ProductName = ProductName.Value;
                        break;
                    }

                    case Opc.Ua.Variables.BuildInfoType_SoftwareVersion:
                    {
                        value.SoftwareVersion = SoftwareVersion.Value;
                        break;
                    }

                    case Opc.Ua.Variables.BuildInfoType_BuildNumber:
                    {
                        value.BuildNumber = BuildNumber.Value;
                        break;
                    }

                    case Opc.Ua.Variables.BuildInfoType_BuildDate:
                    {
                        value.BuildDate = BuildDate.Value;
                        break;
                    }

                    default:
                    {
                        return;
                    }
                }

                // triggers a data change.
                Value = value;
            }
        }

        /// <summary cref="VariableSource.UpdateChildrenFromValue" />
        public override void UpdateChildrenFromValue()
        {
            lock (DataLock)
            {
                BuildInfo value = RawValue;

                if (value == null)
                {
                    RawValue = value = new BuildInfo();
                }

                ProductUri.Value = value.ProductUri;
                ManufacturerName.Value = value.ManufacturerName;
                ProductName.Value = value.ProductName;
                SoftwareVersion.Value = value.SoftwareVersion;
                BuildNumber.Value = value.BuildNumber;
                BuildDate.Value = value.BuildDate;
            }
        }
        #endregion
        #endregion

        #region Private Fields
        private BuildInfoType m_typeDefinition;
        DataVariable<string> m_productUri;
        DataVariable<string> m_manufacturerName;
        DataVariable<string> m_productName;
        DataVariable<string> m_softwareVersion;
        DataVariable<string> m_buildNumber;
        DataVariable<DateTime> m_buildDate;
        #endregion
    }
    #endregion

    #region ServerDiagnosticsSummaryType Class
    /// <summary>
    /// Represents the ServerDiagnosticsSummaryType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class ServerDiagnosticsSummaryType : VariableTypeSource<ServerDiagnosticsSummaryDataType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public ServerDiagnosticsSummaryType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.VariableTypes.ServerDiagnosticsSummaryType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.ServerDiagnosticsSummaryType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.VariableTypes.BaseDataVariableType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new ServerDiagnosticsSummaryType FindSource(IServerInternal server)
        {
            ServerDiagnosticsSummaryType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.VariableTypes.ServerDiagnosticsSummaryType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as ServerDiagnosticsSummaryType;

                if (type != null)
                {
                    return type;
                }

                type = new ServerDiagnosticsSummaryType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                ServerDiagnosticsSummaryType clone = new ServerDiagnosticsSummaryType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region ServerViewCount
        /// <summary>
        /// A description for the ServerViewCount Variable.
        /// </summary>
        public DataVariable<uint> ServerViewCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_serverViewCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_serverViewCount != null)
                    {
                        RemoveChild(m_serverViewCount);
                    }

                    m_serverViewCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceServerViewCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ServerViewCount = replacement;

                ServerViewCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ServerViewCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerDiagnosticsSummaryType_ServerViewCount,
                    null);
            }
        }
        #endregion

        #region CurrentSessionCount
        /// <summary>
        /// A description for the CurrentSessionCount Variable.
        /// </summary>
        public DataVariable<uint> CurrentSessionCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_currentSessionCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_currentSessionCount != null)
                    {
                        RemoveChild(m_currentSessionCount);
                    }

                    m_currentSessionCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCurrentSessionCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CurrentSessionCount = replacement;

                CurrentSessionCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CurrentSessionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerDiagnosticsSummaryType_CurrentSessionCount,
                    null);
            }
        }
        #endregion

        #region CumulatedSessionCount
        /// <summary>
        /// A description for the CumulatedSessionCount Variable.
        /// </summary>
        public DataVariable<uint> CumulatedSessionCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_cumulatedSessionCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_cumulatedSessionCount != null)
                    {
                        RemoveChild(m_cumulatedSessionCount);
                    }

                    m_cumulatedSessionCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCumulatedSessionCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CumulatedSessionCount = replacement;

                CumulatedSessionCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CumulatedSessionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerDiagnosticsSummaryType_CumulatedSessionCount,
                    null);
            }
        }
        #endregion

        #region SecurityRejectedSessionCount
        /// <summary>
        /// A description for the SecurityRejectedSessionCount Variable.
        /// </summary>
        public DataVariable<uint> SecurityRejectedSessionCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_securityRejectedSessionCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_securityRejectedSessionCount != null)
                    {
                        RemoveChild(m_securityRejectedSessionCount);
                    }

                    m_securityRejectedSessionCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSecurityRejectedSessionCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SecurityRejectedSessionCount = replacement;

                SecurityRejectedSessionCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SecurityRejectedSessionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerDiagnosticsSummaryType_SecurityRejectedSessionCount,
                    null);
            }
        }
        #endregion

        #region RejectedSessionCount
        /// <summary>
        /// A description for the RejectedSessionCount Variable.
        /// </summary>
        public DataVariable<uint> RejectedSessionCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_rejectedSessionCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_rejectedSessionCount != null)
                    {
                        RemoveChild(m_rejectedSessionCount);
                    }

                    m_rejectedSessionCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceRejectedSessionCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                RejectedSessionCount = replacement;

                RejectedSessionCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.RejectedSessionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerDiagnosticsSummaryType_RejectedSessionCount,
                    null);
            }
        }
        #endregion

        #region SessionTimeoutCount
        /// <summary>
        /// A description for the SessionTimeoutCount Variable.
        /// </summary>
        public DataVariable<uint> SessionTimeoutCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_sessionTimeoutCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_sessionTimeoutCount != null)
                    {
                        RemoveChild(m_sessionTimeoutCount);
                    }

                    m_sessionTimeoutCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSessionTimeoutCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SessionTimeoutCount = replacement;

                SessionTimeoutCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SessionTimeoutCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerDiagnosticsSummaryType_SessionTimeoutCount,
                    null);
            }
        }
        #endregion

        #region SessionAbortCount
        /// <summary>
        /// A description for the SessionAbortCount Variable.
        /// </summary>
        public DataVariable<uint> SessionAbortCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_sessionAbortCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_sessionAbortCount != null)
                    {
                        RemoveChild(m_sessionAbortCount);
                    }

                    m_sessionAbortCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSessionAbortCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SessionAbortCount = replacement;

                SessionAbortCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SessionAbortCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerDiagnosticsSummaryType_SessionAbortCount,
                    null);
            }
        }
        #endregion

        #region SamplingRateCount
        /// <summary>
        /// A description for the SamplingRateCount Variable.
        /// </summary>
        public DataVariable<uint> SamplingRateCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_samplingRateCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_samplingRateCount != null)
                    {
                        RemoveChild(m_samplingRateCount);
                    }

                    m_samplingRateCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSamplingRateCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SamplingRateCount = replacement;

                SamplingRateCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SamplingRateCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerDiagnosticsSummaryType_SamplingRateCount,
                    null);
            }
        }
        #endregion

        #region PublishingIntervalCount
        /// <summary>
        /// A description for the PublishingIntervalCount Variable.
        /// </summary>
        public DataVariable<uint> PublishingIntervalCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_publishingIntervalCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_publishingIntervalCount != null)
                    {
                        RemoveChild(m_publishingIntervalCount);
                    }

                    m_publishingIntervalCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplacePublishingIntervalCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                PublishingIntervalCount = replacement;

                PublishingIntervalCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.PublishingIntervalCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerDiagnosticsSummaryType_PublishingIntervalCount,
                    null);
            }
        }
        #endregion

        #region CurrentSubscriptionCount
        /// <summary>
        /// A description for the CurrentSubscriptionCount Variable.
        /// </summary>
        public DataVariable<uint> CurrentSubscriptionCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_currentSubscriptionCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_currentSubscriptionCount != null)
                    {
                        RemoveChild(m_currentSubscriptionCount);
                    }

                    m_currentSubscriptionCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCurrentSubscriptionCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CurrentSubscriptionCount = replacement;

                CurrentSubscriptionCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CurrentSubscriptionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerDiagnosticsSummaryType_CurrentSubscriptionCount,
                    null);
            }
        }
        #endregion

        #region CumulatedSubscriptionCount
        /// <summary>
        /// A description for the CumulatedSubscriptionCount Variable.
        /// </summary>
        public DataVariable<uint> CumulatedSubscriptionCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_cumulatedSubscriptionCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_cumulatedSubscriptionCount != null)
                    {
                        RemoveChild(m_cumulatedSubscriptionCount);
                    }

                    m_cumulatedSubscriptionCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCumulatedSubscriptionCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CumulatedSubscriptionCount = replacement;

                CumulatedSubscriptionCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CumulatedSubscriptionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerDiagnosticsSummaryType_CumulatedSubscriptionCount,
                    null);
            }
        }
        #endregion

        #region SecurityRejectedRequestsCount
        /// <summary>
        /// A description for the SecurityRejectedRequestsCount Variable.
        /// </summary>
        public DataVariable<uint> SecurityRejectedRequestsCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_securityRejectedRequestsCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_securityRejectedRequestsCount != null)
                    {
                        RemoveChild(m_securityRejectedRequestsCount);
                    }

                    m_securityRejectedRequestsCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSecurityRejectedRequestsCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SecurityRejectedRequestsCount = replacement;

                SecurityRejectedRequestsCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SecurityRejectedRequestsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerDiagnosticsSummaryType_SecurityRejectedRequestsCount,
                    null);
            }
        }
        #endregion

        #region RejectedRequestsCount
        /// <summary>
        /// A description for the RejectedRequestsCount Variable.
        /// </summary>
        public DataVariable<uint> RejectedRequestsCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_rejectedRequestsCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_rejectedRequestsCount != null)
                    {
                        RemoveChild(m_rejectedRequestsCount);
                    }

                    m_rejectedRequestsCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceRejectedRequestsCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                RejectedRequestsCount = replacement;

                RejectedRequestsCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.RejectedRequestsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerDiagnosticsSummaryType_RejectedRequestsCount,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                ServerDiagnosticsSummaryType type = source as ServerDiagnosticsSummaryType;

                if (type != null && type.ServerViewCount != null)
                {
                    ServerViewCount = (DataVariable<uint>)type.ServerViewCount.Clone(this);
                    ServerViewCount.Initialize(type.ServerViewCount);
                }

                if (type != null && type.CurrentSessionCount != null)
                {
                    CurrentSessionCount = (DataVariable<uint>)type.CurrentSessionCount.Clone(this);
                    CurrentSessionCount.Initialize(type.CurrentSessionCount);
                }

                if (type != null && type.CumulatedSessionCount != null)
                {
                    CumulatedSessionCount = (DataVariable<uint>)type.CumulatedSessionCount.Clone(this);
                    CumulatedSessionCount.Initialize(type.CumulatedSessionCount);
                }

                if (type != null && type.SecurityRejectedSessionCount != null)
                {
                    SecurityRejectedSessionCount = (DataVariable<uint>)type.SecurityRejectedSessionCount.Clone(this);
                    SecurityRejectedSessionCount.Initialize(type.SecurityRejectedSessionCount);
                }

                if (type != null && type.RejectedSessionCount != null)
                {
                    RejectedSessionCount = (DataVariable<uint>)type.RejectedSessionCount.Clone(this);
                    RejectedSessionCount.Initialize(type.RejectedSessionCount);
                }

                if (type != null && type.SessionTimeoutCount != null)
                {
                    SessionTimeoutCount = (DataVariable<uint>)type.SessionTimeoutCount.Clone(this);
                    SessionTimeoutCount.Initialize(type.SessionTimeoutCount);
                }

                if (type != null && type.SessionAbortCount != null)
                {
                    SessionAbortCount = (DataVariable<uint>)type.SessionAbortCount.Clone(this);
                    SessionAbortCount.Initialize(type.SessionAbortCount);
                }

                if (type != null && type.SamplingRateCount != null)
                {
                    SamplingRateCount = (DataVariable<uint>)type.SamplingRateCount.Clone(this);
                    SamplingRateCount.Initialize(type.SamplingRateCount);
                }

                if (type != null && type.PublishingIntervalCount != null)
                {
                    PublishingIntervalCount = (DataVariable<uint>)type.PublishingIntervalCount.Clone(this);
                    PublishingIntervalCount.Initialize(type.PublishingIntervalCount);
                }

                if (type != null && type.CurrentSubscriptionCount != null)
                {
                    CurrentSubscriptionCount = (DataVariable<uint>)type.CurrentSubscriptionCount.Clone(this);
                    CurrentSubscriptionCount.Initialize(type.CurrentSubscriptionCount);
                }

                if (type != null && type.CumulatedSubscriptionCount != null)
                {
                    CumulatedSubscriptionCount = (DataVariable<uint>)type.CumulatedSubscriptionCount.Clone(this);
                    CumulatedSubscriptionCount.Initialize(type.CumulatedSubscriptionCount);
                }

                if (type != null && type.SecurityRejectedRequestsCount != null)
                {
                    SecurityRejectedRequestsCount = (DataVariable<uint>)type.SecurityRejectedRequestsCount.Clone(this);
                    SecurityRejectedRequestsCount.Initialize(type.SecurityRejectedRequestsCount);
                }

                if (type != null && type.RejectedRequestsCount != null)
                {
                    RejectedRequestsCount = (DataVariable<uint>)type.RejectedRequestsCount.Clone(this);
                    RejectedRequestsCount.Initialize(type.RejectedRequestsCount);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_serverViewCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ServerDiagnosticsSummaryType_ServerViewCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ServerViewCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerDiagnosticsSummaryType_ServerViewCount);

            m_currentSessionCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ServerDiagnosticsSummaryType_CurrentSessionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.CurrentSessionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerDiagnosticsSummaryType_CurrentSessionCount);

            m_cumulatedSessionCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ServerDiagnosticsSummaryType_CumulatedSessionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.CumulatedSessionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerDiagnosticsSummaryType_CumulatedSessionCount);

            m_securityRejectedSessionCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ServerDiagnosticsSummaryType_SecurityRejectedSessionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SecurityRejectedSessionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerDiagnosticsSummaryType_SecurityRejectedSessionCount);

            m_rejectedSessionCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ServerDiagnosticsSummaryType_RejectedSessionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.RejectedSessionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerDiagnosticsSummaryType_RejectedSessionCount);

            m_sessionTimeoutCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ServerDiagnosticsSummaryType_SessionTimeoutCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SessionTimeoutCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerDiagnosticsSummaryType_SessionTimeoutCount);

            m_sessionAbortCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ServerDiagnosticsSummaryType_SessionAbortCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SessionAbortCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerDiagnosticsSummaryType_SessionAbortCount);

            m_samplingRateCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ServerDiagnosticsSummaryType_SamplingRateCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SamplingRateCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerDiagnosticsSummaryType_SamplingRateCount);

            m_publishingIntervalCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ServerDiagnosticsSummaryType_PublishingIntervalCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.PublishingIntervalCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerDiagnosticsSummaryType_PublishingIntervalCount);

            m_currentSubscriptionCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ServerDiagnosticsSummaryType_CurrentSubscriptionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.CurrentSubscriptionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerDiagnosticsSummaryType_CurrentSubscriptionCount);

            m_cumulatedSubscriptionCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ServerDiagnosticsSummaryType_CumulatedSubscriptionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.CumulatedSubscriptionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerDiagnosticsSummaryType_CumulatedSubscriptionCount);

            m_securityRejectedRequestsCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ServerDiagnosticsSummaryType_SecurityRejectedRequestsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SecurityRejectedRequestsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerDiagnosticsSummaryType_SecurityRejectedRequestsCount);

            m_rejectedRequestsCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ServerDiagnosticsSummaryType_RejectedRequestsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.RejectedRequestsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerDiagnosticsSummaryType_RejectedRequestsCount);
        }
        #endregion

        #region Private Fields
        DataVariable<uint> m_serverViewCount;
        DataVariable<uint> m_currentSessionCount;
        DataVariable<uint> m_cumulatedSessionCount;
        DataVariable<uint> m_securityRejectedSessionCount;
        DataVariable<uint> m_rejectedSessionCount;
        DataVariable<uint> m_sessionTimeoutCount;
        DataVariable<uint> m_sessionAbortCount;
        DataVariable<uint> m_samplingRateCount;
        DataVariable<uint> m_publishingIntervalCount;
        DataVariable<uint> m_currentSubscriptionCount;
        DataVariable<uint> m_cumulatedSubscriptionCount;
        DataVariable<uint> m_securityRejectedRequestsCount;
        DataVariable<uint> m_rejectedRequestsCount;
        #endregion
    }
    #endregion

    #region ServerDiagnosticsSummary Class
    /// <summary>
    /// Represents an instance of the ServerDiagnosticsSummaryType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class ServerDiagnosticsSummary : DataVariable<ServerDiagnosticsSummaryDataType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected ServerDiagnosticsSummary(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = ServerDiagnosticsSummaryType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new ServerDiagnosticsSummary Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            ServerDiagnosticsSummary instance = new ServerDiagnosticsSummary(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new ServerDiagnosticsSummary Construct(IServerInternal server)
        {
            ServerDiagnosticsSummary instance = new ServerDiagnosticsSummary(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                ServerDiagnosticsSummary clone = new ServerDiagnosticsSummary(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region ServerViewCount
        /// <summary>
        /// A description for the ServerViewCount Variable.
        /// </summary>
        public DataVariable<uint> ServerViewCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_serverViewCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_serverViewCount != null)
                    {
                        RemoveChild(m_serverViewCount);
                    }

                    m_serverViewCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceServerViewCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ServerViewCount = replacement;

                ServerViewCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ServerViewCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerDiagnosticsSummaryType_ServerViewCount,
                    null);
            }
        }
        #endregion

        #region CurrentSessionCount
        /// <summary>
        /// A description for the CurrentSessionCount Variable.
        /// </summary>
        public DataVariable<uint> CurrentSessionCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_currentSessionCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_currentSessionCount != null)
                    {
                        RemoveChild(m_currentSessionCount);
                    }

                    m_currentSessionCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCurrentSessionCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CurrentSessionCount = replacement;

                CurrentSessionCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CurrentSessionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerDiagnosticsSummaryType_CurrentSessionCount,
                    null);
            }
        }
        #endregion

        #region CumulatedSessionCount
        /// <summary>
        /// A description for the CumulatedSessionCount Variable.
        /// </summary>
        public DataVariable<uint> CumulatedSessionCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_cumulatedSessionCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_cumulatedSessionCount != null)
                    {
                        RemoveChild(m_cumulatedSessionCount);
                    }

                    m_cumulatedSessionCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCumulatedSessionCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CumulatedSessionCount = replacement;

                CumulatedSessionCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CumulatedSessionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerDiagnosticsSummaryType_CumulatedSessionCount,
                    null);
            }
        }
        #endregion

        #region SecurityRejectedSessionCount
        /// <summary>
        /// A description for the SecurityRejectedSessionCount Variable.
        /// </summary>
        public DataVariable<uint> SecurityRejectedSessionCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_securityRejectedSessionCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_securityRejectedSessionCount != null)
                    {
                        RemoveChild(m_securityRejectedSessionCount);
                    }

                    m_securityRejectedSessionCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSecurityRejectedSessionCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SecurityRejectedSessionCount = replacement;

                SecurityRejectedSessionCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SecurityRejectedSessionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerDiagnosticsSummaryType_SecurityRejectedSessionCount,
                    null);
            }
        }
        #endregion

        #region RejectedSessionCount
        /// <summary>
        /// A description for the RejectedSessionCount Variable.
        /// </summary>
        public DataVariable<uint> RejectedSessionCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_rejectedSessionCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_rejectedSessionCount != null)
                    {
                        RemoveChild(m_rejectedSessionCount);
                    }

                    m_rejectedSessionCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceRejectedSessionCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                RejectedSessionCount = replacement;

                RejectedSessionCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.RejectedSessionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerDiagnosticsSummaryType_RejectedSessionCount,
                    null);
            }
        }
        #endregion

        #region SessionTimeoutCount
        /// <summary>
        /// A description for the SessionTimeoutCount Variable.
        /// </summary>
        public DataVariable<uint> SessionTimeoutCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_sessionTimeoutCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_sessionTimeoutCount != null)
                    {
                        RemoveChild(m_sessionTimeoutCount);
                    }

                    m_sessionTimeoutCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSessionTimeoutCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SessionTimeoutCount = replacement;

                SessionTimeoutCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SessionTimeoutCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerDiagnosticsSummaryType_SessionTimeoutCount,
                    null);
            }
        }
        #endregion

        #region SessionAbortCount
        /// <summary>
        /// A description for the SessionAbortCount Variable.
        /// </summary>
        public DataVariable<uint> SessionAbortCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_sessionAbortCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_sessionAbortCount != null)
                    {
                        RemoveChild(m_sessionAbortCount);
                    }

                    m_sessionAbortCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSessionAbortCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SessionAbortCount = replacement;

                SessionAbortCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SessionAbortCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerDiagnosticsSummaryType_SessionAbortCount,
                    null);
            }
        }
        #endregion

        #region SamplingRateCount
        /// <summary>
        /// A description for the SamplingRateCount Variable.
        /// </summary>
        public DataVariable<uint> SamplingRateCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_samplingRateCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_samplingRateCount != null)
                    {
                        RemoveChild(m_samplingRateCount);
                    }

                    m_samplingRateCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSamplingRateCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SamplingRateCount = replacement;

                SamplingRateCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SamplingRateCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerDiagnosticsSummaryType_SamplingRateCount,
                    null);
            }
        }
        #endregion

        #region PublishingIntervalCount
        /// <summary>
        /// A description for the PublishingIntervalCount Variable.
        /// </summary>
        public DataVariable<uint> PublishingIntervalCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_publishingIntervalCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_publishingIntervalCount != null)
                    {
                        RemoveChild(m_publishingIntervalCount);
                    }

                    m_publishingIntervalCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplacePublishingIntervalCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                PublishingIntervalCount = replacement;

                PublishingIntervalCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.PublishingIntervalCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerDiagnosticsSummaryType_PublishingIntervalCount,
                    null);
            }
        }
        #endregion

        #region CurrentSubscriptionCount
        /// <summary>
        /// A description for the CurrentSubscriptionCount Variable.
        /// </summary>
        public DataVariable<uint> CurrentSubscriptionCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_currentSubscriptionCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_currentSubscriptionCount != null)
                    {
                        RemoveChild(m_currentSubscriptionCount);
                    }

                    m_currentSubscriptionCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCurrentSubscriptionCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CurrentSubscriptionCount = replacement;

                CurrentSubscriptionCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CurrentSubscriptionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerDiagnosticsSummaryType_CurrentSubscriptionCount,
                    null);
            }
        }
        #endregion

        #region CumulatedSubscriptionCount
        /// <summary>
        /// A description for the CumulatedSubscriptionCount Variable.
        /// </summary>
        public DataVariable<uint> CumulatedSubscriptionCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_cumulatedSubscriptionCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_cumulatedSubscriptionCount != null)
                    {
                        RemoveChild(m_cumulatedSubscriptionCount);
                    }

                    m_cumulatedSubscriptionCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCumulatedSubscriptionCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CumulatedSubscriptionCount = replacement;

                CumulatedSubscriptionCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CumulatedSubscriptionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerDiagnosticsSummaryType_CumulatedSubscriptionCount,
                    null);
            }
        }
        #endregion

        #region SecurityRejectedRequestsCount
        /// <summary>
        /// A description for the SecurityRejectedRequestsCount Variable.
        /// </summary>
        public DataVariable<uint> SecurityRejectedRequestsCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_securityRejectedRequestsCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_securityRejectedRequestsCount != null)
                    {
                        RemoveChild(m_securityRejectedRequestsCount);
                    }

                    m_securityRejectedRequestsCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSecurityRejectedRequestsCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SecurityRejectedRequestsCount = replacement;

                SecurityRejectedRequestsCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SecurityRejectedRequestsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerDiagnosticsSummaryType_SecurityRejectedRequestsCount,
                    null);
            }
        }
        #endregion

        #region RejectedRequestsCount
        /// <summary>
        /// A description for the RejectedRequestsCount Variable.
        /// </summary>
        public DataVariable<uint> RejectedRequestsCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_rejectedRequestsCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_rejectedRequestsCount != null)
                    {
                        RemoveChild(m_rejectedRequestsCount);
                    }

                    m_rejectedRequestsCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceRejectedRequestsCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                RejectedRequestsCount = replacement;

                RejectedRequestsCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.RejectedRequestsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ServerDiagnosticsSummaryType_RejectedRequestsCount,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                ServerDiagnosticsSummary instance = source as ServerDiagnosticsSummary;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                ServerDiagnosticsSummaryType type = source as ServerDiagnosticsSummaryType;

                if (type != null && type.ServerViewCount != null)
                {
                    ServerViewCount = (DataVariable<uint>)type.ServerViewCount.Clone(this);
                    ServerViewCount.Initialize(type.ServerViewCount);
                }
                else if (instance != null && instance.ServerViewCount != null)
                {
                    ServerViewCount = (DataVariable<uint>)instance.ServerViewCount.Clone(this);
                    ServerViewCount.Initialize(instance.ServerViewCount);
                }

                if (type != null && type.CurrentSessionCount != null)
                {
                    CurrentSessionCount = (DataVariable<uint>)type.CurrentSessionCount.Clone(this);
                    CurrentSessionCount.Initialize(type.CurrentSessionCount);
                }
                else if (instance != null && instance.CurrentSessionCount != null)
                {
                    CurrentSessionCount = (DataVariable<uint>)instance.CurrentSessionCount.Clone(this);
                    CurrentSessionCount.Initialize(instance.CurrentSessionCount);
                }

                if (type != null && type.CumulatedSessionCount != null)
                {
                    CumulatedSessionCount = (DataVariable<uint>)type.CumulatedSessionCount.Clone(this);
                    CumulatedSessionCount.Initialize(type.CumulatedSessionCount);
                }
                else if (instance != null && instance.CumulatedSessionCount != null)
                {
                    CumulatedSessionCount = (DataVariable<uint>)instance.CumulatedSessionCount.Clone(this);
                    CumulatedSessionCount.Initialize(instance.CumulatedSessionCount);
                }

                if (type != null && type.SecurityRejectedSessionCount != null)
                {
                    SecurityRejectedSessionCount = (DataVariable<uint>)type.SecurityRejectedSessionCount.Clone(this);
                    SecurityRejectedSessionCount.Initialize(type.SecurityRejectedSessionCount);
                }
                else if (instance != null && instance.SecurityRejectedSessionCount != null)
                {
                    SecurityRejectedSessionCount = (DataVariable<uint>)instance.SecurityRejectedSessionCount.Clone(this);
                    SecurityRejectedSessionCount.Initialize(instance.SecurityRejectedSessionCount);
                }

                if (type != null && type.RejectedSessionCount != null)
                {
                    RejectedSessionCount = (DataVariable<uint>)type.RejectedSessionCount.Clone(this);
                    RejectedSessionCount.Initialize(type.RejectedSessionCount);
                }
                else if (instance != null && instance.RejectedSessionCount != null)
                {
                    RejectedSessionCount = (DataVariable<uint>)instance.RejectedSessionCount.Clone(this);
                    RejectedSessionCount.Initialize(instance.RejectedSessionCount);
                }

                if (type != null && type.SessionTimeoutCount != null)
                {
                    SessionTimeoutCount = (DataVariable<uint>)type.SessionTimeoutCount.Clone(this);
                    SessionTimeoutCount.Initialize(type.SessionTimeoutCount);
                }
                else if (instance != null && instance.SessionTimeoutCount != null)
                {
                    SessionTimeoutCount = (DataVariable<uint>)instance.SessionTimeoutCount.Clone(this);
                    SessionTimeoutCount.Initialize(instance.SessionTimeoutCount);
                }

                if (type != null && type.SessionAbortCount != null)
                {
                    SessionAbortCount = (DataVariable<uint>)type.SessionAbortCount.Clone(this);
                    SessionAbortCount.Initialize(type.SessionAbortCount);
                }
                else if (instance != null && instance.SessionAbortCount != null)
                {
                    SessionAbortCount = (DataVariable<uint>)instance.SessionAbortCount.Clone(this);
                    SessionAbortCount.Initialize(instance.SessionAbortCount);
                }

                if (type != null && type.SamplingRateCount != null)
                {
                    SamplingRateCount = (DataVariable<uint>)type.SamplingRateCount.Clone(this);
                    SamplingRateCount.Initialize(type.SamplingRateCount);
                }
                else if (instance != null && instance.SamplingRateCount != null)
                {
                    SamplingRateCount = (DataVariable<uint>)instance.SamplingRateCount.Clone(this);
                    SamplingRateCount.Initialize(instance.SamplingRateCount);
                }

                if (type != null && type.PublishingIntervalCount != null)
                {
                    PublishingIntervalCount = (DataVariable<uint>)type.PublishingIntervalCount.Clone(this);
                    PublishingIntervalCount.Initialize(type.PublishingIntervalCount);
                }
                else if (instance != null && instance.PublishingIntervalCount != null)
                {
                    PublishingIntervalCount = (DataVariable<uint>)instance.PublishingIntervalCount.Clone(this);
                    PublishingIntervalCount.Initialize(instance.PublishingIntervalCount);
                }

                if (type != null && type.CurrentSubscriptionCount != null)
                {
                    CurrentSubscriptionCount = (DataVariable<uint>)type.CurrentSubscriptionCount.Clone(this);
                    CurrentSubscriptionCount.Initialize(type.CurrentSubscriptionCount);
                }
                else if (instance != null && instance.CurrentSubscriptionCount != null)
                {
                    CurrentSubscriptionCount = (DataVariable<uint>)instance.CurrentSubscriptionCount.Clone(this);
                    CurrentSubscriptionCount.Initialize(instance.CurrentSubscriptionCount);
                }

                if (type != null && type.CumulatedSubscriptionCount != null)
                {
                    CumulatedSubscriptionCount = (DataVariable<uint>)type.CumulatedSubscriptionCount.Clone(this);
                    CumulatedSubscriptionCount.Initialize(type.CumulatedSubscriptionCount);
                }
                else if (instance != null && instance.CumulatedSubscriptionCount != null)
                {
                    CumulatedSubscriptionCount = (DataVariable<uint>)instance.CumulatedSubscriptionCount.Clone(this);
                    CumulatedSubscriptionCount.Initialize(instance.CumulatedSubscriptionCount);
                }

                if (type != null && type.SecurityRejectedRequestsCount != null)
                {
                    SecurityRejectedRequestsCount = (DataVariable<uint>)type.SecurityRejectedRequestsCount.Clone(this);
                    SecurityRejectedRequestsCount.Initialize(type.SecurityRejectedRequestsCount);
                }
                else if (instance != null && instance.SecurityRejectedRequestsCount != null)
                {
                    SecurityRejectedRequestsCount = (DataVariable<uint>)instance.SecurityRejectedRequestsCount.Clone(this);
                    SecurityRejectedRequestsCount.Initialize(instance.SecurityRejectedRequestsCount);
                }

                if (type != null && type.RejectedRequestsCount != null)
                {
                    RejectedRequestsCount = (DataVariable<uint>)type.RejectedRequestsCount.Clone(this);
                    RejectedRequestsCount.Initialize(type.RejectedRequestsCount);
                }
                else if (instance != null && instance.RejectedRequestsCount != null)
                {
                    RejectedRequestsCount = (DataVariable<uint>)instance.RejectedRequestsCount.Clone(this);
                    RejectedRequestsCount.Initialize(instance.RejectedRequestsCount);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_serverViewCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ServerViewCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerDiagnosticsSummaryType_ServerViewCount);

            m_currentSessionCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.CurrentSessionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerDiagnosticsSummaryType_CurrentSessionCount);

            m_cumulatedSessionCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.CumulatedSessionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerDiagnosticsSummaryType_CumulatedSessionCount);

            m_securityRejectedSessionCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.SecurityRejectedSessionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerDiagnosticsSummaryType_SecurityRejectedSessionCount);

            m_rejectedSessionCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.RejectedSessionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerDiagnosticsSummaryType_RejectedSessionCount);

            m_sessionTimeoutCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.SessionTimeoutCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerDiagnosticsSummaryType_SessionTimeoutCount);

            m_sessionAbortCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.SessionAbortCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerDiagnosticsSummaryType_SessionAbortCount);

            m_samplingRateCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.SamplingRateCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerDiagnosticsSummaryType_SamplingRateCount);

            m_publishingIntervalCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.PublishingIntervalCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerDiagnosticsSummaryType_PublishingIntervalCount);

            m_currentSubscriptionCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.CurrentSubscriptionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerDiagnosticsSummaryType_CurrentSubscriptionCount);

            m_cumulatedSubscriptionCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.CumulatedSubscriptionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerDiagnosticsSummaryType_CumulatedSubscriptionCount);

            m_securityRejectedRequestsCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.SecurityRejectedRequestsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerDiagnosticsSummaryType_SecurityRejectedRequestsCount);

            m_rejectedRequestsCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.RejectedRequestsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ServerDiagnosticsSummaryType_RejectedRequestsCount);
        }
        
        #region Variable/DataType Conversion Functions.
        /// <summary cref="VariableSource.UpdateValueFromChild" />
        public override void UpdateValueFromChild(VariableSource child)
        {
            lock (DataLock)
            {
                ServerDiagnosticsSummaryDataType value = RawValue;

                if (value == null)
                {
                    value = new ServerDiagnosticsSummaryDataType();
                }

                switch (child.NumericId)
                {
                    case Opc.Ua.Variables.ServerDiagnosticsSummaryType_ServerViewCount:
                    {
                        value.ServerViewCount = ServerViewCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.ServerDiagnosticsSummaryType_CurrentSessionCount:
                    {
                        value.CurrentSessionCount = CurrentSessionCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.ServerDiagnosticsSummaryType_CumulatedSessionCount:
                    {
                        value.CumulatedSessionCount = CumulatedSessionCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.ServerDiagnosticsSummaryType_SecurityRejectedSessionCount:
                    {
                        value.SecurityRejectedSessionCount = SecurityRejectedSessionCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.ServerDiagnosticsSummaryType_RejectedSessionCount:
                    {
                        value.RejectedSessionCount = RejectedSessionCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.ServerDiagnosticsSummaryType_SessionTimeoutCount:
                    {
                        value.SessionTimeoutCount = SessionTimeoutCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.ServerDiagnosticsSummaryType_SessionAbortCount:
                    {
                        value.SessionAbortCount = SessionAbortCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.ServerDiagnosticsSummaryType_SamplingRateCount:
                    {
                        value.SamplingRateCount = SamplingRateCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.ServerDiagnosticsSummaryType_PublishingIntervalCount:
                    {
                        value.PublishingIntervalCount = PublishingIntervalCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.ServerDiagnosticsSummaryType_CurrentSubscriptionCount:
                    {
                        value.CurrentSubscriptionCount = CurrentSubscriptionCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.ServerDiagnosticsSummaryType_CumulatedSubscriptionCount:
                    {
                        value.CumulatedSubscriptionCount = CumulatedSubscriptionCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.ServerDiagnosticsSummaryType_SecurityRejectedRequestsCount:
                    {
                        value.SecurityRejectedRequestsCount = SecurityRejectedRequestsCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.ServerDiagnosticsSummaryType_RejectedRequestsCount:
                    {
                        value.RejectedRequestsCount = RejectedRequestsCount.Value;
                        break;
                    }

                    default:
                    {
                        return;
                    }
                }

                // triggers a data change.
                Value = value;
            }
        }

        /// <summary cref="VariableSource.UpdateChildrenFromValue" />
        public override void UpdateChildrenFromValue()
        {
            lock (DataLock)
            {
                ServerDiagnosticsSummaryDataType value = RawValue;

                if (value == null)
                {
                    RawValue = value = new ServerDiagnosticsSummaryDataType();
                }

                ServerViewCount.Value = value.ServerViewCount;
                CurrentSessionCount.Value = value.CurrentSessionCount;
                CumulatedSessionCount.Value = value.CumulatedSessionCount;
                SecurityRejectedSessionCount.Value = value.SecurityRejectedSessionCount;
                RejectedSessionCount.Value = value.RejectedSessionCount;
                SessionTimeoutCount.Value = value.SessionTimeoutCount;
                SessionAbortCount.Value = value.SessionAbortCount;
                SamplingRateCount.Value = value.SamplingRateCount;
                PublishingIntervalCount.Value = value.PublishingIntervalCount;
                CurrentSubscriptionCount.Value = value.CurrentSubscriptionCount;
                CumulatedSubscriptionCount.Value = value.CumulatedSubscriptionCount;
                SecurityRejectedRequestsCount.Value = value.SecurityRejectedRequestsCount;
                RejectedRequestsCount.Value = value.RejectedRequestsCount;
            }
        }
        #endregion
        #endregion

        #region Private Fields
        private ServerDiagnosticsSummaryType m_typeDefinition;
        DataVariable<uint> m_serverViewCount;
        DataVariable<uint> m_currentSessionCount;
        DataVariable<uint> m_cumulatedSessionCount;
        DataVariable<uint> m_securityRejectedSessionCount;
        DataVariable<uint> m_rejectedSessionCount;
        DataVariable<uint> m_sessionTimeoutCount;
        DataVariable<uint> m_sessionAbortCount;
        DataVariable<uint> m_samplingRateCount;
        DataVariable<uint> m_publishingIntervalCount;
        DataVariable<uint> m_currentSubscriptionCount;
        DataVariable<uint> m_cumulatedSubscriptionCount;
        DataVariable<uint> m_securityRejectedRequestsCount;
        DataVariable<uint> m_rejectedRequestsCount;
        #endregion
    }
    #endregion

    #region SamplingRateDiagnosticsArrayType Class
    /// <summary>
    /// Represents the SamplingRateDiagnosticsArrayType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class SamplingRateDiagnosticsArrayType : VariableTypeSource<IList<SamplingRateDiagnosticsDataType>>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public SamplingRateDiagnosticsArrayType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.VariableTypes.SamplingRateDiagnosticsArrayType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.SamplingRateDiagnosticsArrayType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.VariableTypes.BaseDataVariableType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new SamplingRateDiagnosticsArrayType FindSource(IServerInternal server)
        {
            SamplingRateDiagnosticsArrayType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.VariableTypes.SamplingRateDiagnosticsArrayType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as SamplingRateDiagnosticsArrayType;

                if (type != null)
                {
                    return type;
                }

                type = new SamplingRateDiagnosticsArrayType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                SamplingRateDiagnosticsArrayType clone = new SamplingRateDiagnosticsArrayType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                SamplingRateDiagnosticsArrayType type = source as SamplingRateDiagnosticsArrayType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endregion

    #region SamplingRateDiagnosticsArray Class
    /// <summary>
    /// Represents an instance of the SamplingRateDiagnosticsArrayType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class SamplingRateDiagnosticsArray : DataVariable<IList<SamplingRateDiagnosticsDataType>>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected SamplingRateDiagnosticsArray(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = SamplingRateDiagnosticsArrayType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new SamplingRateDiagnosticsArray Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            SamplingRateDiagnosticsArray instance = new SamplingRateDiagnosticsArray(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new SamplingRateDiagnosticsArray Construct(IServerInternal server)
        {
            SamplingRateDiagnosticsArray instance = new SamplingRateDiagnosticsArray(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                SamplingRateDiagnosticsArray clone = new SamplingRateDiagnosticsArray(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                SamplingRateDiagnosticsArray instance = source as SamplingRateDiagnosticsArray;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                SamplingRateDiagnosticsArrayType type = source as SamplingRateDiagnosticsArrayType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private SamplingRateDiagnosticsArrayType m_typeDefinition;
        #endregion
    }
    #endregion

    #region SamplingRateDiagnosticsType Class
    /// <summary>
    /// Represents the SamplingRateDiagnosticsType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class SamplingRateDiagnosticsType : VariableTypeSource<SamplingRateDiagnosticsDataType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public SamplingRateDiagnosticsType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.VariableTypes.SamplingRateDiagnosticsType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.SamplingRateDiagnosticsType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.VariableTypes.BaseDataVariableType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new SamplingRateDiagnosticsType FindSource(IServerInternal server)
        {
            SamplingRateDiagnosticsType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.VariableTypes.SamplingRateDiagnosticsType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as SamplingRateDiagnosticsType;

                if (type != null)
                {
                    return type;
                }

                type = new SamplingRateDiagnosticsType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                SamplingRateDiagnosticsType clone = new SamplingRateDiagnosticsType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region SamplingRate
        /// <summary>
        /// A description for the SamplingRate Variable.
        /// </summary>
        public DataVariable<double> SamplingRate
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_samplingRate; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_samplingRate != null)
                    {
                        RemoveChild(m_samplingRate);
                    }

                    m_samplingRate = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSamplingRate(DataVariable<double> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SamplingRate = replacement;

                SamplingRate.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SamplingRate, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SamplingRateDiagnosticsType_SamplingRate,
                    null);
            }
        }
        #endregion

        #region SamplingErrorCount
        /// <summary>
        /// A description for the SamplingErrorCount Variable.
        /// </summary>
        public DataVariable<uint> SamplingErrorCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_samplingErrorCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_samplingErrorCount != null)
                    {
                        RemoveChild(m_samplingErrorCount);
                    }

                    m_samplingErrorCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSamplingErrorCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SamplingErrorCount = replacement;

                SamplingErrorCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SamplingErrorCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SamplingRateDiagnosticsType_SamplingErrorCount,
                    null);
            }
        }
        #endregion

        #region SampledMonitoredItemsCount
        /// <summary>
        /// A description for the SampledMonitoredItemsCount Variable.
        /// </summary>
        public DataVariable<uint> SampledMonitoredItemsCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_sampledMonitoredItemsCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_sampledMonitoredItemsCount != null)
                    {
                        RemoveChild(m_sampledMonitoredItemsCount);
                    }

                    m_sampledMonitoredItemsCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSampledMonitoredItemsCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SampledMonitoredItemsCount = replacement;

                SampledMonitoredItemsCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SampledMonitoredItemsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SamplingRateDiagnosticsType_SampledMonitoredItemsCount,
                    null);
            }
        }
        #endregion

        #region MaxSampledMonitoredItemsCount
        /// <summary>
        /// A description for the MaxSampledMonitoredItemsCount Variable.
        /// </summary>
        public DataVariable<uint> MaxSampledMonitoredItemsCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_maxSampledMonitoredItemsCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_maxSampledMonitoredItemsCount != null)
                    {
                        RemoveChild(m_maxSampledMonitoredItemsCount);
                    }

                    m_maxSampledMonitoredItemsCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceMaxSampledMonitoredItemsCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                MaxSampledMonitoredItemsCount = replacement;

                MaxSampledMonitoredItemsCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.MaxSampledMonitoredItemsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SamplingRateDiagnosticsType_MaxSampledMonitoredItemsCount,
                    null);
            }
        }
        #endregion

        #region DisabledMonitoredItemsSamplingCount
        /// <summary>
        /// A description for the DisabledMonitoredItemsSamplingCount Variable.
        /// </summary>
        public DataVariable<uint> DisabledMonitoredItemsSamplingCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_disabledMonitoredItemsSamplingCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_disabledMonitoredItemsSamplingCount != null)
                    {
                        RemoveChild(m_disabledMonitoredItemsSamplingCount);
                    }

                    m_disabledMonitoredItemsSamplingCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceDisabledMonitoredItemsSamplingCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                DisabledMonitoredItemsSamplingCount = replacement;

                DisabledMonitoredItemsSamplingCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.DisabledMonitoredItemsSamplingCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SamplingRateDiagnosticsType_DisabledMonitoredItemsSamplingCount,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                SamplingRateDiagnosticsType type = source as SamplingRateDiagnosticsType;

                if (type != null && type.SamplingRate != null)
                {
                    SamplingRate = (DataVariable<double>)type.SamplingRate.Clone(this);
                    SamplingRate.Initialize(type.SamplingRate);
                }

                if (type != null && type.SamplingErrorCount != null)
                {
                    SamplingErrorCount = (DataVariable<uint>)type.SamplingErrorCount.Clone(this);
                    SamplingErrorCount.Initialize(type.SamplingErrorCount);
                }

                if (type != null && type.SampledMonitoredItemsCount != null)
                {
                    SampledMonitoredItemsCount = (DataVariable<uint>)type.SampledMonitoredItemsCount.Clone(this);
                    SampledMonitoredItemsCount.Initialize(type.SampledMonitoredItemsCount);
                }

                if (type != null && type.MaxSampledMonitoredItemsCount != null)
                {
                    MaxSampledMonitoredItemsCount = (DataVariable<uint>)type.MaxSampledMonitoredItemsCount.Clone(this);
                    MaxSampledMonitoredItemsCount.Initialize(type.MaxSampledMonitoredItemsCount);
                }

                if (type != null && type.DisabledMonitoredItemsSamplingCount != null)
                {
                    DisabledMonitoredItemsSamplingCount = (DataVariable<uint>)type.DisabledMonitoredItemsSamplingCount.Clone(this);
                    DisabledMonitoredItemsSamplingCount.Initialize(type.DisabledMonitoredItemsSamplingCount);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_samplingRate = DataVariable<double>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SamplingRateDiagnosticsType_SamplingRate, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SamplingRate, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SamplingRateDiagnosticsType_SamplingRate);

            m_samplingErrorCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SamplingRateDiagnosticsType_SamplingErrorCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SamplingErrorCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SamplingRateDiagnosticsType_SamplingErrorCount);

            m_sampledMonitoredItemsCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SamplingRateDiagnosticsType_SampledMonitoredItemsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SampledMonitoredItemsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SamplingRateDiagnosticsType_SampledMonitoredItemsCount);

            m_maxSampledMonitoredItemsCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SamplingRateDiagnosticsType_MaxSampledMonitoredItemsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.MaxSampledMonitoredItemsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SamplingRateDiagnosticsType_MaxSampledMonitoredItemsCount);

            m_disabledMonitoredItemsSamplingCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SamplingRateDiagnosticsType_DisabledMonitoredItemsSamplingCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.DisabledMonitoredItemsSamplingCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SamplingRateDiagnosticsType_DisabledMonitoredItemsSamplingCount);
        }
        #endregion

        #region Private Fields
        DataVariable<double> m_samplingRate;
        DataVariable<uint> m_samplingErrorCount;
        DataVariable<uint> m_sampledMonitoredItemsCount;
        DataVariable<uint> m_maxSampledMonitoredItemsCount;
        DataVariable<uint> m_disabledMonitoredItemsSamplingCount;
        #endregion
    }
    #endregion

    #region SamplingRateDiagnostics Class
    /// <summary>
    /// Represents an instance of the SamplingRateDiagnosticsType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class SamplingRateDiagnostics : DataVariable<SamplingRateDiagnosticsDataType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected SamplingRateDiagnostics(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = SamplingRateDiagnosticsType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new SamplingRateDiagnostics Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            SamplingRateDiagnostics instance = new SamplingRateDiagnostics(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new SamplingRateDiagnostics Construct(IServerInternal server)
        {
            SamplingRateDiagnostics instance = new SamplingRateDiagnostics(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                SamplingRateDiagnostics clone = new SamplingRateDiagnostics(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region SamplingRate
        /// <summary>
        /// A description for the SamplingRate Variable.
        /// </summary>
        public DataVariable<double> SamplingRate
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_samplingRate; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_samplingRate != null)
                    {
                        RemoveChild(m_samplingRate);
                    }

                    m_samplingRate = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSamplingRate(DataVariable<double> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SamplingRate = replacement;

                SamplingRate.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SamplingRate, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SamplingRateDiagnosticsType_SamplingRate,
                    null);
            }
        }
        #endregion

        #region SamplingErrorCount
        /// <summary>
        /// A description for the SamplingErrorCount Variable.
        /// </summary>
        public DataVariable<uint> SamplingErrorCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_samplingErrorCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_samplingErrorCount != null)
                    {
                        RemoveChild(m_samplingErrorCount);
                    }

                    m_samplingErrorCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSamplingErrorCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SamplingErrorCount = replacement;

                SamplingErrorCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SamplingErrorCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SamplingRateDiagnosticsType_SamplingErrorCount,
                    null);
            }
        }
        #endregion

        #region SampledMonitoredItemsCount
        /// <summary>
        /// A description for the SampledMonitoredItemsCount Variable.
        /// </summary>
        public DataVariable<uint> SampledMonitoredItemsCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_sampledMonitoredItemsCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_sampledMonitoredItemsCount != null)
                    {
                        RemoveChild(m_sampledMonitoredItemsCount);
                    }

                    m_sampledMonitoredItemsCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSampledMonitoredItemsCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SampledMonitoredItemsCount = replacement;

                SampledMonitoredItemsCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SampledMonitoredItemsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SamplingRateDiagnosticsType_SampledMonitoredItemsCount,
                    null);
            }
        }
        #endregion

        #region MaxSampledMonitoredItemsCount
        /// <summary>
        /// A description for the MaxSampledMonitoredItemsCount Variable.
        /// </summary>
        public DataVariable<uint> MaxSampledMonitoredItemsCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_maxSampledMonitoredItemsCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_maxSampledMonitoredItemsCount != null)
                    {
                        RemoveChild(m_maxSampledMonitoredItemsCount);
                    }

                    m_maxSampledMonitoredItemsCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceMaxSampledMonitoredItemsCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                MaxSampledMonitoredItemsCount = replacement;

                MaxSampledMonitoredItemsCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.MaxSampledMonitoredItemsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SamplingRateDiagnosticsType_MaxSampledMonitoredItemsCount,
                    null);
            }
        }
        #endregion

        #region DisabledMonitoredItemsSamplingCount
        /// <summary>
        /// A description for the DisabledMonitoredItemsSamplingCount Variable.
        /// </summary>
        public DataVariable<uint> DisabledMonitoredItemsSamplingCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_disabledMonitoredItemsSamplingCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_disabledMonitoredItemsSamplingCount != null)
                    {
                        RemoveChild(m_disabledMonitoredItemsSamplingCount);
                    }

                    m_disabledMonitoredItemsSamplingCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceDisabledMonitoredItemsSamplingCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                DisabledMonitoredItemsSamplingCount = replacement;

                DisabledMonitoredItemsSamplingCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.DisabledMonitoredItemsSamplingCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SamplingRateDiagnosticsType_DisabledMonitoredItemsSamplingCount,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                SamplingRateDiagnostics instance = source as SamplingRateDiagnostics;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                SamplingRateDiagnosticsType type = source as SamplingRateDiagnosticsType;

                if (type != null && type.SamplingRate != null)
                {
                    SamplingRate = (DataVariable<double>)type.SamplingRate.Clone(this);
                    SamplingRate.Initialize(type.SamplingRate);
                }
                else if (instance != null && instance.SamplingRate != null)
                {
                    SamplingRate = (DataVariable<double>)instance.SamplingRate.Clone(this);
                    SamplingRate.Initialize(instance.SamplingRate);
                }

                if (type != null && type.SamplingErrorCount != null)
                {
                    SamplingErrorCount = (DataVariable<uint>)type.SamplingErrorCount.Clone(this);
                    SamplingErrorCount.Initialize(type.SamplingErrorCount);
                }
                else if (instance != null && instance.SamplingErrorCount != null)
                {
                    SamplingErrorCount = (DataVariable<uint>)instance.SamplingErrorCount.Clone(this);
                    SamplingErrorCount.Initialize(instance.SamplingErrorCount);
                }

                if (type != null && type.SampledMonitoredItemsCount != null)
                {
                    SampledMonitoredItemsCount = (DataVariable<uint>)type.SampledMonitoredItemsCount.Clone(this);
                    SampledMonitoredItemsCount.Initialize(type.SampledMonitoredItemsCount);
                }
                else if (instance != null && instance.SampledMonitoredItemsCount != null)
                {
                    SampledMonitoredItemsCount = (DataVariable<uint>)instance.SampledMonitoredItemsCount.Clone(this);
                    SampledMonitoredItemsCount.Initialize(instance.SampledMonitoredItemsCount);
                }

                if (type != null && type.MaxSampledMonitoredItemsCount != null)
                {
                    MaxSampledMonitoredItemsCount = (DataVariable<uint>)type.MaxSampledMonitoredItemsCount.Clone(this);
                    MaxSampledMonitoredItemsCount.Initialize(type.MaxSampledMonitoredItemsCount);
                }
                else if (instance != null && instance.MaxSampledMonitoredItemsCount != null)
                {
                    MaxSampledMonitoredItemsCount = (DataVariable<uint>)instance.MaxSampledMonitoredItemsCount.Clone(this);
                    MaxSampledMonitoredItemsCount.Initialize(instance.MaxSampledMonitoredItemsCount);
                }

                if (type != null && type.DisabledMonitoredItemsSamplingCount != null)
                {
                    DisabledMonitoredItemsSamplingCount = (DataVariable<uint>)type.DisabledMonitoredItemsSamplingCount.Clone(this);
                    DisabledMonitoredItemsSamplingCount.Initialize(type.DisabledMonitoredItemsSamplingCount);
                }
                else if (instance != null && instance.DisabledMonitoredItemsSamplingCount != null)
                {
                    DisabledMonitoredItemsSamplingCount = (DataVariable<uint>)instance.DisabledMonitoredItemsSamplingCount.Clone(this);
                    DisabledMonitoredItemsSamplingCount.Initialize(instance.DisabledMonitoredItemsSamplingCount);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_samplingRate = DataVariable<double>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.SamplingRate, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SamplingRateDiagnosticsType_SamplingRate);

            m_samplingErrorCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.SamplingErrorCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SamplingRateDiagnosticsType_SamplingErrorCount);

            m_sampledMonitoredItemsCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.SampledMonitoredItemsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SamplingRateDiagnosticsType_SampledMonitoredItemsCount);

            m_maxSampledMonitoredItemsCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.MaxSampledMonitoredItemsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SamplingRateDiagnosticsType_MaxSampledMonitoredItemsCount);

            m_disabledMonitoredItemsSamplingCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.DisabledMonitoredItemsSamplingCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SamplingRateDiagnosticsType_DisabledMonitoredItemsSamplingCount);
        }
        
        #region Variable/DataType Conversion Functions.
        /// <summary cref="VariableSource.UpdateValueFromChild" />
        public override void UpdateValueFromChild(VariableSource child)
        {
            lock (DataLock)
            {
                SamplingRateDiagnosticsDataType value = RawValue;

                if (value == null)
                {
                    value = new SamplingRateDiagnosticsDataType();
                }

                switch (child.NumericId)
                {
                    case Opc.Ua.Variables.SamplingRateDiagnosticsType_SamplingRate:
                    {
                        value.SamplingRate = SamplingRate.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SamplingRateDiagnosticsType_SamplingErrorCount:
                    {
                        value.SamplingErrorCount = SamplingErrorCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SamplingRateDiagnosticsType_SampledMonitoredItemsCount:
                    {
                        value.SampledMonitoredItemsCount = SampledMonitoredItemsCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SamplingRateDiagnosticsType_MaxSampledMonitoredItemsCount:
                    {
                        value.MaxSampledMonitoredItemsCount = MaxSampledMonitoredItemsCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SamplingRateDiagnosticsType_DisabledMonitoredItemsSamplingCount:
                    {
                        value.DisabledMonitoredItemsSamplingCount = DisabledMonitoredItemsSamplingCount.Value;
                        break;
                    }

                    default:
                    {
                        return;
                    }
                }

                // triggers a data change.
                Value = value;
            }
        }

        /// <summary cref="VariableSource.UpdateChildrenFromValue" />
        public override void UpdateChildrenFromValue()
        {
            lock (DataLock)
            {
                SamplingRateDiagnosticsDataType value = RawValue;

                if (value == null)
                {
                    RawValue = value = new SamplingRateDiagnosticsDataType();
                }

                SamplingRate.Value = value.SamplingRate;
                SamplingErrorCount.Value = value.SamplingErrorCount;
                SampledMonitoredItemsCount.Value = value.SampledMonitoredItemsCount;
                MaxSampledMonitoredItemsCount.Value = value.MaxSampledMonitoredItemsCount;
                DisabledMonitoredItemsSamplingCount.Value = value.DisabledMonitoredItemsSamplingCount;
            }
        }
        #endregion
        #endregion

        #region Private Fields
        private SamplingRateDiagnosticsType m_typeDefinition;
        DataVariable<double> m_samplingRate;
        DataVariable<uint> m_samplingErrorCount;
        DataVariable<uint> m_sampledMonitoredItemsCount;
        DataVariable<uint> m_maxSampledMonitoredItemsCount;
        DataVariable<uint> m_disabledMonitoredItemsSamplingCount;
        #endregion
    }
    #endregion

    #region SubscriptionDiagnosticsArrayType Class
    /// <summary>
    /// Represents the SubscriptionDiagnosticsArrayType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class SubscriptionDiagnosticsArrayType : VariableTypeSource<IList<SubscriptionDiagnosticsDataType>>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public SubscriptionDiagnosticsArrayType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.VariableTypes.SubscriptionDiagnosticsArrayType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.SubscriptionDiagnosticsArrayType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.VariableTypes.BaseDataVariableType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new SubscriptionDiagnosticsArrayType FindSource(IServerInternal server)
        {
            SubscriptionDiagnosticsArrayType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.VariableTypes.SubscriptionDiagnosticsArrayType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as SubscriptionDiagnosticsArrayType;

                if (type != null)
                {
                    return type;
                }

                type = new SubscriptionDiagnosticsArrayType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                SubscriptionDiagnosticsArrayType clone = new SubscriptionDiagnosticsArrayType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                SubscriptionDiagnosticsArrayType type = source as SubscriptionDiagnosticsArrayType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endregion

    #region SubscriptionDiagnosticsArray Class
    /// <summary>
    /// Represents an instance of the SubscriptionDiagnosticsArrayType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class SubscriptionDiagnosticsArray : DataVariable<IList<SubscriptionDiagnosticsDataType>>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected SubscriptionDiagnosticsArray(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = SubscriptionDiagnosticsArrayType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new SubscriptionDiagnosticsArray Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            SubscriptionDiagnosticsArray instance = new SubscriptionDiagnosticsArray(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new SubscriptionDiagnosticsArray Construct(IServerInternal server)
        {
            SubscriptionDiagnosticsArray instance = new SubscriptionDiagnosticsArray(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                SubscriptionDiagnosticsArray clone = new SubscriptionDiagnosticsArray(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                SubscriptionDiagnosticsArray instance = source as SubscriptionDiagnosticsArray;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                SubscriptionDiagnosticsArrayType type = source as SubscriptionDiagnosticsArrayType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private SubscriptionDiagnosticsArrayType m_typeDefinition;
        #endregion
    }
    #endregion

    #region SubscriptionDiagnosticsType Class
    /// <summary>
    /// Represents the SubscriptionDiagnosticsType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class SubscriptionDiagnosticsType : VariableTypeSource<SubscriptionDiagnosticsDataType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public SubscriptionDiagnosticsType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.VariableTypes.SubscriptionDiagnosticsType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.SubscriptionDiagnosticsType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.VariableTypes.BaseDataVariableType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new SubscriptionDiagnosticsType FindSource(IServerInternal server)
        {
            SubscriptionDiagnosticsType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.VariableTypes.SubscriptionDiagnosticsType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as SubscriptionDiagnosticsType;

                if (type != null)
                {
                    return type;
                }

                type = new SubscriptionDiagnosticsType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                SubscriptionDiagnosticsType clone = new SubscriptionDiagnosticsType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region SessionId
        /// <summary>
        /// A description for the SessionId Variable.
        /// </summary>
        public DataVariable<NodeId> SessionId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_sessionId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_sessionId != null)
                    {
                        RemoveChild(m_sessionId);
                    }

                    m_sessionId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSessionId(DataVariable<NodeId> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SessionId = replacement;

                SessionId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SessionId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_SessionId,
                    null);
            }
        }
        #endregion

        #region SubscriptionId
        /// <summary>
        /// A description for the SubscriptionId Variable.
        /// </summary>
        public DataVariable<uint> SubscriptionId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_subscriptionId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_subscriptionId != null)
                    {
                        RemoveChild(m_subscriptionId);
                    }

                    m_subscriptionId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSubscriptionId(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SubscriptionId = replacement;

                SubscriptionId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SubscriptionId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_SubscriptionId,
                    null);
            }
        }
        #endregion

        #region Priority
        /// <summary>
        /// A description for the Priority Variable.
        /// </summary>
        public DataVariable<byte> Priority
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_priority; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_priority != null)
                    {
                        RemoveChild(m_priority);
                    }

                    m_priority = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplacePriority(DataVariable<byte> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Priority = replacement;

                Priority.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Priority, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_Priority,
                    null);
            }
        }
        #endregion

        #region PublishingInterval
        /// <summary>
        /// A description for the PublishingInterval Variable.
        /// </summary>
        public DataVariable<double> PublishingInterval
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_publishingInterval; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_publishingInterval != null)
                    {
                        RemoveChild(m_publishingInterval);
                    }

                    m_publishingInterval = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplacePublishingInterval(DataVariable<double> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                PublishingInterval = replacement;

                PublishingInterval.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.PublishingInterval, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_PublishingInterval,
                    null);
            }
        }
        #endregion

        #region MaxKeepAliveCount
        /// <summary>
        /// A description for the MaxKeepAliveCount Variable.
        /// </summary>
        public DataVariable<uint> MaxKeepAliveCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_maxKeepAliveCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_maxKeepAliveCount != null)
                    {
                        RemoveChild(m_maxKeepAliveCount);
                    }

                    m_maxKeepAliveCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceMaxKeepAliveCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                MaxKeepAliveCount = replacement;

                MaxKeepAliveCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.MaxKeepAliveCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_MaxKeepAliveCount,
                    null);
            }
        }
        #endregion

        #region LifetimeCount
        /// <summary>
        /// A description for the LifetimeCount Variable.
        /// </summary>
        public DataVariable<uint> LifetimeCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_lifetimeCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_lifetimeCount != null)
                    {
                        RemoveChild(m_lifetimeCount);
                    }

                    m_lifetimeCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceLifetimeCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                LifetimeCount = replacement;

                LifetimeCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.LifetimeCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_LifetimeCount,
                    null);
            }
        }
        #endregion

        #region MaxNotificationsPerPublish
        /// <summary>
        /// A description for the MaxNotificationsPerPublish Variable.
        /// </summary>
        public DataVariable<uint> MaxNotificationsPerPublish
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_maxNotificationsPerPublish; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_maxNotificationsPerPublish != null)
                    {
                        RemoveChild(m_maxNotificationsPerPublish);
                    }

                    m_maxNotificationsPerPublish = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceMaxNotificationsPerPublish(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                MaxNotificationsPerPublish = replacement;

                MaxNotificationsPerPublish.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.MaxNotificationsPerPublish, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_MaxNotificationsPerPublish,
                    null);
            }
        }
        #endregion

        #region PublishingEnabled
        /// <summary>
        /// A description for the PublishingEnabled Variable.
        /// </summary>
        public DataVariable<bool> PublishingEnabled
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_publishingEnabled; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_publishingEnabled != null)
                    {
                        RemoveChild(m_publishingEnabled);
                    }

                    m_publishingEnabled = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplacePublishingEnabled(DataVariable<bool> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                PublishingEnabled = replacement;

                PublishingEnabled.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.PublishingEnabled, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_PublishingEnabled,
                    null);
            }
        }
        #endregion

        #region ModifyCount
        /// <summary>
        /// A description for the ModifyCount Variable.
        /// </summary>
        public DataVariable<uint> ModifyCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_modifyCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_modifyCount != null)
                    {
                        RemoveChild(m_modifyCount);
                    }

                    m_modifyCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceModifyCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ModifyCount = replacement;

                ModifyCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ModifyCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_ModifyCount,
                    null);
            }
        }
        #endregion

        #region EnableCount
        /// <summary>
        /// A description for the EnableCount Variable.
        /// </summary>
        public DataVariable<uint> EnableCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_enableCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_enableCount != null)
                    {
                        RemoveChild(m_enableCount);
                    }

                    m_enableCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceEnableCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                EnableCount = replacement;

                EnableCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.EnableCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_EnableCount,
                    null);
            }
        }
        #endregion

        #region DisableCount
        /// <summary>
        /// A description for the DisableCount Variable.
        /// </summary>
        public DataVariable<uint> DisableCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_disableCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_disableCount != null)
                    {
                        RemoveChild(m_disableCount);
                    }

                    m_disableCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceDisableCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                DisableCount = replacement;

                DisableCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.DisableCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_DisableCount,
                    null);
            }
        }
        #endregion

        #region RepublishRequestCount
        /// <summary>
        /// A description for the RepublishRequestCount Variable.
        /// </summary>
        public DataVariable<uint> RepublishRequestCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_republishRequestCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_republishRequestCount != null)
                    {
                        RemoveChild(m_republishRequestCount);
                    }

                    m_republishRequestCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceRepublishRequestCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                RepublishRequestCount = replacement;

                RepublishRequestCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.RepublishRequestCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_RepublishRequestCount,
                    null);
            }
        }
        #endregion

        #region RepublishMessageRequestCount
        /// <summary>
        /// A description for the RepublishMessageRequestCount Variable.
        /// </summary>
        public DataVariable<uint> RepublishMessageRequestCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_republishMessageRequestCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_republishMessageRequestCount != null)
                    {
                        RemoveChild(m_republishMessageRequestCount);
                    }

                    m_republishMessageRequestCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceRepublishMessageRequestCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                RepublishMessageRequestCount = replacement;

                RepublishMessageRequestCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.RepublishMessageRequestCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_RepublishMessageRequestCount,
                    null);
            }
        }
        #endregion

        #region RepublishMessageCount
        /// <summary>
        /// A description for the RepublishMessageCount Variable.
        /// </summary>
        public DataVariable<uint> RepublishMessageCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_republishMessageCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_republishMessageCount != null)
                    {
                        RemoveChild(m_republishMessageCount);
                    }

                    m_republishMessageCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceRepublishMessageCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                RepublishMessageCount = replacement;

                RepublishMessageCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.RepublishMessageCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_RepublishMessageCount,
                    null);
            }
        }
        #endregion

        #region TransferRequestCount
        /// <summary>
        /// A description for the TransferRequestCount Variable.
        /// </summary>
        public DataVariable<uint> TransferRequestCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_transferRequestCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_transferRequestCount != null)
                    {
                        RemoveChild(m_transferRequestCount);
                    }

                    m_transferRequestCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceTransferRequestCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                TransferRequestCount = replacement;

                TransferRequestCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.TransferRequestCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_TransferRequestCount,
                    null);
            }
        }
        #endregion

        #region TransferredToAltClientCount
        /// <summary>
        /// A description for the TransferredToAltClientCount Variable.
        /// </summary>
        public DataVariable<uint> TransferredToAltClientCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_transferredToAltClientCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_transferredToAltClientCount != null)
                    {
                        RemoveChild(m_transferredToAltClientCount);
                    }

                    m_transferredToAltClientCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceTransferredToAltClientCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                TransferredToAltClientCount = replacement;

                TransferredToAltClientCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.TransferredToAltClientCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_TransferredToAltClientCount,
                    null);
            }
        }
        #endregion

        #region TransferredToSameClientCount
        /// <summary>
        /// A description for the TransferredToSameClientCount Variable.
        /// </summary>
        public DataVariable<uint> TransferredToSameClientCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_transferredToSameClientCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_transferredToSameClientCount != null)
                    {
                        RemoveChild(m_transferredToSameClientCount);
                    }

                    m_transferredToSameClientCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceTransferredToSameClientCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                TransferredToSameClientCount = replacement;

                TransferredToSameClientCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.TransferredToSameClientCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_TransferredToSameClientCount,
                    null);
            }
        }
        #endregion

        #region PublishRequestCount
        /// <summary>
        /// A description for the PublishRequestCount Variable.
        /// </summary>
        public DataVariable<uint> PublishRequestCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_publishRequestCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_publishRequestCount != null)
                    {
                        RemoveChild(m_publishRequestCount);
                    }

                    m_publishRequestCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplacePublishRequestCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                PublishRequestCount = replacement;

                PublishRequestCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.PublishRequestCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_PublishRequestCount,
                    null);
            }
        }
        #endregion

        #region DataChangeNotificationsCount
        /// <summary>
        /// A description for the DataChangeNotificationsCount Variable.
        /// </summary>
        public DataVariable<uint> DataChangeNotificationsCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_dataChangeNotificationsCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_dataChangeNotificationsCount != null)
                    {
                        RemoveChild(m_dataChangeNotificationsCount);
                    }

                    m_dataChangeNotificationsCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceDataChangeNotificationsCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                DataChangeNotificationsCount = replacement;

                DataChangeNotificationsCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.DataChangeNotificationsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_DataChangeNotificationsCount,
                    null);
            }
        }
        #endregion

        #region EventNotificationsCount
        /// <summary>
        /// A description for the EventNotificationsCount Variable.
        /// </summary>
        public DataVariable<uint> EventNotificationsCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_eventNotificationsCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_eventNotificationsCount != null)
                    {
                        RemoveChild(m_eventNotificationsCount);
                    }

                    m_eventNotificationsCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceEventNotificationsCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                EventNotificationsCount = replacement;

                EventNotificationsCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.EventNotificationsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_EventNotificationsCount,
                    null);
            }
        }
        #endregion

        #region NotificationsCount
        /// <summary>
        /// A description for the NotificationsCount Variable.
        /// </summary>
        public DataVariable<uint> NotificationsCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_notificationsCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_notificationsCount != null)
                    {
                        RemoveChild(m_notificationsCount);
                    }

                    m_notificationsCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceNotificationsCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                NotificationsCount = replacement;

                NotificationsCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.NotificationsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_NotificationsCount,
                    null);
            }
        }
        #endregion

        #region LateStateCount
        /// <summary>
        /// A description for the LateStateCount Variable.
        /// </summary>
        public DataVariable<uint> LateStateCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_lateStateCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_lateStateCount != null)
                    {
                        RemoveChild(m_lateStateCount);
                    }

                    m_lateStateCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceLateStateCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                LateStateCount = replacement;

                LateStateCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.LateStateCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_LateStateCount,
                    null);
            }
        }
        #endregion

        #region KeepAliveStateCount
        /// <summary>
        /// A description for the KeepAliveStateCount Variable.
        /// </summary>
        public DataVariable<uint> KeepAliveStateCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_keepAliveStateCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_keepAliveStateCount != null)
                    {
                        RemoveChild(m_keepAliveStateCount);
                    }

                    m_keepAliveStateCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceKeepAliveStateCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                KeepAliveStateCount = replacement;

                KeepAliveStateCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.KeepAliveStateCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_KeepAliveStateCount,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                SubscriptionDiagnosticsType type = source as SubscriptionDiagnosticsType;

                if (type != null && type.SessionId != null)
                {
                    SessionId = (DataVariable<NodeId>)type.SessionId.Clone(this);
                    SessionId.Initialize(type.SessionId);
                }

                if (type != null && type.SubscriptionId != null)
                {
                    SubscriptionId = (DataVariable<uint>)type.SubscriptionId.Clone(this);
                    SubscriptionId.Initialize(type.SubscriptionId);
                }

                if (type != null && type.Priority != null)
                {
                    Priority = (DataVariable<byte>)type.Priority.Clone(this);
                    Priority.Initialize(type.Priority);
                }

                if (type != null && type.PublishingInterval != null)
                {
                    PublishingInterval = (DataVariable<double>)type.PublishingInterval.Clone(this);
                    PublishingInterval.Initialize(type.PublishingInterval);
                }

                if (type != null && type.MaxKeepAliveCount != null)
                {
                    MaxKeepAliveCount = (DataVariable<uint>)type.MaxKeepAliveCount.Clone(this);
                    MaxKeepAliveCount.Initialize(type.MaxKeepAliveCount);
                }

                if (type != null && type.LifetimeCount != null)
                {
                    LifetimeCount = (DataVariable<uint>)type.LifetimeCount.Clone(this);
                    LifetimeCount.Initialize(type.LifetimeCount);
                }

                if (type != null && type.MaxNotificationsPerPublish != null)
                {
                    MaxNotificationsPerPublish = (DataVariable<uint>)type.MaxNotificationsPerPublish.Clone(this);
                    MaxNotificationsPerPublish.Initialize(type.MaxNotificationsPerPublish);
                }

                if (type != null && type.PublishingEnabled != null)
                {
                    PublishingEnabled = (DataVariable<bool>)type.PublishingEnabled.Clone(this);
                    PublishingEnabled.Initialize(type.PublishingEnabled);
                }

                if (type != null && type.ModifyCount != null)
                {
                    ModifyCount = (DataVariable<uint>)type.ModifyCount.Clone(this);
                    ModifyCount.Initialize(type.ModifyCount);
                }

                if (type != null && type.EnableCount != null)
                {
                    EnableCount = (DataVariable<uint>)type.EnableCount.Clone(this);
                    EnableCount.Initialize(type.EnableCount);
                }

                if (type != null && type.DisableCount != null)
                {
                    DisableCount = (DataVariable<uint>)type.DisableCount.Clone(this);
                    DisableCount.Initialize(type.DisableCount);
                }

                if (type != null && type.RepublishRequestCount != null)
                {
                    RepublishRequestCount = (DataVariable<uint>)type.RepublishRequestCount.Clone(this);
                    RepublishRequestCount.Initialize(type.RepublishRequestCount);
                }

                if (type != null && type.RepublishMessageRequestCount != null)
                {
                    RepublishMessageRequestCount = (DataVariable<uint>)type.RepublishMessageRequestCount.Clone(this);
                    RepublishMessageRequestCount.Initialize(type.RepublishMessageRequestCount);
                }

                if (type != null && type.RepublishMessageCount != null)
                {
                    RepublishMessageCount = (DataVariable<uint>)type.RepublishMessageCount.Clone(this);
                    RepublishMessageCount.Initialize(type.RepublishMessageCount);
                }

                if (type != null && type.TransferRequestCount != null)
                {
                    TransferRequestCount = (DataVariable<uint>)type.TransferRequestCount.Clone(this);
                    TransferRequestCount.Initialize(type.TransferRequestCount);
                }

                if (type != null && type.TransferredToAltClientCount != null)
                {
                    TransferredToAltClientCount = (DataVariable<uint>)type.TransferredToAltClientCount.Clone(this);
                    TransferredToAltClientCount.Initialize(type.TransferredToAltClientCount);
                }

                if (type != null && type.TransferredToSameClientCount != null)
                {
                    TransferredToSameClientCount = (DataVariable<uint>)type.TransferredToSameClientCount.Clone(this);
                    TransferredToSameClientCount.Initialize(type.TransferredToSameClientCount);
                }

                if (type != null && type.PublishRequestCount != null)
                {
                    PublishRequestCount = (DataVariable<uint>)type.PublishRequestCount.Clone(this);
                    PublishRequestCount.Initialize(type.PublishRequestCount);
                }

                if (type != null && type.DataChangeNotificationsCount != null)
                {
                    DataChangeNotificationsCount = (DataVariable<uint>)type.DataChangeNotificationsCount.Clone(this);
                    DataChangeNotificationsCount.Initialize(type.DataChangeNotificationsCount);
                }

                if (type != null && type.EventNotificationsCount != null)
                {
                    EventNotificationsCount = (DataVariable<uint>)type.EventNotificationsCount.Clone(this);
                    EventNotificationsCount.Initialize(type.EventNotificationsCount);
                }

                if (type != null && type.NotificationsCount != null)
                {
                    NotificationsCount = (DataVariable<uint>)type.NotificationsCount.Clone(this);
                    NotificationsCount.Initialize(type.NotificationsCount);
                }

                if (type != null && type.LateStateCount != null)
                {
                    LateStateCount = (DataVariable<uint>)type.LateStateCount.Clone(this);
                    LateStateCount.Initialize(type.LateStateCount);
                }

                if (type != null && type.KeepAliveStateCount != null)
                {
                    KeepAliveStateCount = (DataVariable<uint>)type.KeepAliveStateCount.Clone(this);
                    KeepAliveStateCount.Initialize(type.KeepAliveStateCount);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_sessionId = DataVariable<NodeId>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SubscriptionDiagnosticsType_SessionId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SessionId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_SessionId);

            m_subscriptionId = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SubscriptionDiagnosticsType_SubscriptionId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SubscriptionId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_SubscriptionId);

            m_priority = DataVariable<byte>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SubscriptionDiagnosticsType_Priority, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Priority, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_Priority);

            m_publishingInterval = DataVariable<double>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SubscriptionDiagnosticsType_PublishingInterval, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.PublishingInterval, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_PublishingInterval);

            m_maxKeepAliveCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SubscriptionDiagnosticsType_MaxKeepAliveCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.MaxKeepAliveCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_MaxKeepAliveCount);

            m_lifetimeCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SubscriptionDiagnosticsType_LifetimeCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.LifetimeCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_LifetimeCount);

            m_maxNotificationsPerPublish = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SubscriptionDiagnosticsType_MaxNotificationsPerPublish, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.MaxNotificationsPerPublish, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_MaxNotificationsPerPublish);

            m_publishingEnabled = DataVariable<bool>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SubscriptionDiagnosticsType_PublishingEnabled, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.PublishingEnabled, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_PublishingEnabled);

            m_modifyCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SubscriptionDiagnosticsType_ModifyCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ModifyCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_ModifyCount);

            m_enableCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SubscriptionDiagnosticsType_EnableCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.EnableCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_EnableCount);

            m_disableCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SubscriptionDiagnosticsType_DisableCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.DisableCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_DisableCount);

            m_republishRequestCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SubscriptionDiagnosticsType_RepublishRequestCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.RepublishRequestCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_RepublishRequestCount);

            m_republishMessageRequestCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SubscriptionDiagnosticsType_RepublishMessageRequestCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.RepublishMessageRequestCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_RepublishMessageRequestCount);

            m_republishMessageCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SubscriptionDiagnosticsType_RepublishMessageCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.RepublishMessageCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_RepublishMessageCount);

            m_transferRequestCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SubscriptionDiagnosticsType_TransferRequestCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.TransferRequestCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_TransferRequestCount);

            m_transferredToAltClientCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SubscriptionDiagnosticsType_TransferredToAltClientCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.TransferredToAltClientCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_TransferredToAltClientCount);

            m_transferredToSameClientCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SubscriptionDiagnosticsType_TransferredToSameClientCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.TransferredToSameClientCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_TransferredToSameClientCount);

            m_publishRequestCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SubscriptionDiagnosticsType_PublishRequestCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.PublishRequestCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_PublishRequestCount);

            m_dataChangeNotificationsCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SubscriptionDiagnosticsType_DataChangeNotificationsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.DataChangeNotificationsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_DataChangeNotificationsCount);

            m_eventNotificationsCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SubscriptionDiagnosticsType_EventNotificationsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.EventNotificationsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_EventNotificationsCount);

            m_notificationsCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SubscriptionDiagnosticsType_NotificationsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.NotificationsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_NotificationsCount);

            m_lateStateCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SubscriptionDiagnosticsType_LateStateCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.LateStateCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_LateStateCount);

            m_keepAliveStateCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SubscriptionDiagnosticsType_KeepAliveStateCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.KeepAliveStateCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_KeepAliveStateCount);
        }
        #endregion

        #region Private Fields
        DataVariable<NodeId> m_sessionId;
        DataVariable<uint> m_subscriptionId;
        DataVariable<byte> m_priority;
        DataVariable<double> m_publishingInterval;
        DataVariable<uint> m_maxKeepAliveCount;
        DataVariable<uint> m_lifetimeCount;
        DataVariable<uint> m_maxNotificationsPerPublish;
        DataVariable<bool> m_publishingEnabled;
        DataVariable<uint> m_modifyCount;
        DataVariable<uint> m_enableCount;
        DataVariable<uint> m_disableCount;
        DataVariable<uint> m_republishRequestCount;
        DataVariable<uint> m_republishMessageRequestCount;
        DataVariable<uint> m_republishMessageCount;
        DataVariable<uint> m_transferRequestCount;
        DataVariable<uint> m_transferredToAltClientCount;
        DataVariable<uint> m_transferredToSameClientCount;
        DataVariable<uint> m_publishRequestCount;
        DataVariable<uint> m_dataChangeNotificationsCount;
        DataVariable<uint> m_eventNotificationsCount;
        DataVariable<uint> m_notificationsCount;
        DataVariable<uint> m_lateStateCount;
        DataVariable<uint> m_keepAliveStateCount;
        #endregion
    }
    #endregion

    #region SubscriptionDiagnostics Class
    /// <summary>
    /// Represents an instance of the SubscriptionDiagnosticsType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class SubscriptionDiagnostics : DataVariable<SubscriptionDiagnosticsDataType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected SubscriptionDiagnostics(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = SubscriptionDiagnosticsType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new SubscriptionDiagnostics Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            SubscriptionDiagnostics instance = new SubscriptionDiagnostics(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new SubscriptionDiagnostics Construct(IServerInternal server)
        {
            SubscriptionDiagnostics instance = new SubscriptionDiagnostics(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                SubscriptionDiagnostics clone = new SubscriptionDiagnostics(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region SessionId
        /// <summary>
        /// A description for the SessionId Variable.
        /// </summary>
        public DataVariable<NodeId> SessionId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_sessionId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_sessionId != null)
                    {
                        RemoveChild(m_sessionId);
                    }

                    m_sessionId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSessionId(DataVariable<NodeId> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SessionId = replacement;

                SessionId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SessionId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_SessionId,
                    null);
            }
        }
        #endregion

        #region SubscriptionId
        /// <summary>
        /// A description for the SubscriptionId Variable.
        /// </summary>
        public DataVariable<uint> SubscriptionId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_subscriptionId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_subscriptionId != null)
                    {
                        RemoveChild(m_subscriptionId);
                    }

                    m_subscriptionId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSubscriptionId(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SubscriptionId = replacement;

                SubscriptionId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SubscriptionId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_SubscriptionId,
                    null);
            }
        }
        #endregion

        #region Priority
        /// <summary>
        /// A description for the Priority Variable.
        /// </summary>
        public DataVariable<byte> Priority
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_priority; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_priority != null)
                    {
                        RemoveChild(m_priority);
                    }

                    m_priority = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplacePriority(DataVariable<byte> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Priority = replacement;

                Priority.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Priority, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_Priority,
                    null);
            }
        }
        #endregion

        #region PublishingInterval
        /// <summary>
        /// A description for the PublishingInterval Variable.
        /// </summary>
        public DataVariable<double> PublishingInterval
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_publishingInterval; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_publishingInterval != null)
                    {
                        RemoveChild(m_publishingInterval);
                    }

                    m_publishingInterval = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplacePublishingInterval(DataVariable<double> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                PublishingInterval = replacement;

                PublishingInterval.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.PublishingInterval, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_PublishingInterval,
                    null);
            }
        }
        #endregion

        #region MaxKeepAliveCount
        /// <summary>
        /// A description for the MaxKeepAliveCount Variable.
        /// </summary>
        public DataVariable<uint> MaxKeepAliveCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_maxKeepAliveCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_maxKeepAliveCount != null)
                    {
                        RemoveChild(m_maxKeepAliveCount);
                    }

                    m_maxKeepAliveCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceMaxKeepAliveCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                MaxKeepAliveCount = replacement;

                MaxKeepAliveCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.MaxKeepAliveCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_MaxKeepAliveCount,
                    null);
            }
        }
        #endregion

        #region LifetimeCount
        /// <summary>
        /// A description for the LifetimeCount Variable.
        /// </summary>
        public DataVariable<uint> LifetimeCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_lifetimeCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_lifetimeCount != null)
                    {
                        RemoveChild(m_lifetimeCount);
                    }

                    m_lifetimeCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceLifetimeCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                LifetimeCount = replacement;

                LifetimeCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.LifetimeCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_LifetimeCount,
                    null);
            }
        }
        #endregion

        #region MaxNotificationsPerPublish
        /// <summary>
        /// A description for the MaxNotificationsPerPublish Variable.
        /// </summary>
        public DataVariable<uint> MaxNotificationsPerPublish
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_maxNotificationsPerPublish; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_maxNotificationsPerPublish != null)
                    {
                        RemoveChild(m_maxNotificationsPerPublish);
                    }

                    m_maxNotificationsPerPublish = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceMaxNotificationsPerPublish(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                MaxNotificationsPerPublish = replacement;

                MaxNotificationsPerPublish.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.MaxNotificationsPerPublish, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_MaxNotificationsPerPublish,
                    null);
            }
        }
        #endregion

        #region PublishingEnabled
        /// <summary>
        /// A description for the PublishingEnabled Variable.
        /// </summary>
        public DataVariable<bool> PublishingEnabled
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_publishingEnabled; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_publishingEnabled != null)
                    {
                        RemoveChild(m_publishingEnabled);
                    }

                    m_publishingEnabled = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplacePublishingEnabled(DataVariable<bool> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                PublishingEnabled = replacement;

                PublishingEnabled.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.PublishingEnabled, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_PublishingEnabled,
                    null);
            }
        }
        #endregion

        #region ModifyCount
        /// <summary>
        /// A description for the ModifyCount Variable.
        /// </summary>
        public DataVariable<uint> ModifyCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_modifyCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_modifyCount != null)
                    {
                        RemoveChild(m_modifyCount);
                    }

                    m_modifyCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceModifyCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ModifyCount = replacement;

                ModifyCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ModifyCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_ModifyCount,
                    null);
            }
        }
        #endregion

        #region EnableCount
        /// <summary>
        /// A description for the EnableCount Variable.
        /// </summary>
        public DataVariable<uint> EnableCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_enableCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_enableCount != null)
                    {
                        RemoveChild(m_enableCount);
                    }

                    m_enableCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceEnableCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                EnableCount = replacement;

                EnableCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.EnableCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_EnableCount,
                    null);
            }
        }
        #endregion

        #region DisableCount
        /// <summary>
        /// A description for the DisableCount Variable.
        /// </summary>
        public DataVariable<uint> DisableCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_disableCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_disableCount != null)
                    {
                        RemoveChild(m_disableCount);
                    }

                    m_disableCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceDisableCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                DisableCount = replacement;

                DisableCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.DisableCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_DisableCount,
                    null);
            }
        }
        #endregion

        #region RepublishRequestCount
        /// <summary>
        /// A description for the RepublishRequestCount Variable.
        /// </summary>
        public DataVariable<uint> RepublishRequestCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_republishRequestCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_republishRequestCount != null)
                    {
                        RemoveChild(m_republishRequestCount);
                    }

                    m_republishRequestCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceRepublishRequestCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                RepublishRequestCount = replacement;

                RepublishRequestCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.RepublishRequestCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_RepublishRequestCount,
                    null);
            }
        }
        #endregion

        #region RepublishMessageRequestCount
        /// <summary>
        /// A description for the RepublishMessageRequestCount Variable.
        /// </summary>
        public DataVariable<uint> RepublishMessageRequestCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_republishMessageRequestCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_republishMessageRequestCount != null)
                    {
                        RemoveChild(m_republishMessageRequestCount);
                    }

                    m_republishMessageRequestCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceRepublishMessageRequestCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                RepublishMessageRequestCount = replacement;

                RepublishMessageRequestCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.RepublishMessageRequestCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_RepublishMessageRequestCount,
                    null);
            }
        }
        #endregion

        #region RepublishMessageCount
        /// <summary>
        /// A description for the RepublishMessageCount Variable.
        /// </summary>
        public DataVariable<uint> RepublishMessageCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_republishMessageCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_republishMessageCount != null)
                    {
                        RemoveChild(m_republishMessageCount);
                    }

                    m_republishMessageCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceRepublishMessageCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                RepublishMessageCount = replacement;

                RepublishMessageCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.RepublishMessageCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_RepublishMessageCount,
                    null);
            }
        }
        #endregion

        #region TransferRequestCount
        /// <summary>
        /// A description for the TransferRequestCount Variable.
        /// </summary>
        public DataVariable<uint> TransferRequestCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_transferRequestCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_transferRequestCount != null)
                    {
                        RemoveChild(m_transferRequestCount);
                    }

                    m_transferRequestCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceTransferRequestCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                TransferRequestCount = replacement;

                TransferRequestCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.TransferRequestCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_TransferRequestCount,
                    null);
            }
        }
        #endregion

        #region TransferredToAltClientCount
        /// <summary>
        /// A description for the TransferredToAltClientCount Variable.
        /// </summary>
        public DataVariable<uint> TransferredToAltClientCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_transferredToAltClientCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_transferredToAltClientCount != null)
                    {
                        RemoveChild(m_transferredToAltClientCount);
                    }

                    m_transferredToAltClientCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceTransferredToAltClientCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                TransferredToAltClientCount = replacement;

                TransferredToAltClientCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.TransferredToAltClientCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_TransferredToAltClientCount,
                    null);
            }
        }
        #endregion

        #region TransferredToSameClientCount
        /// <summary>
        /// A description for the TransferredToSameClientCount Variable.
        /// </summary>
        public DataVariable<uint> TransferredToSameClientCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_transferredToSameClientCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_transferredToSameClientCount != null)
                    {
                        RemoveChild(m_transferredToSameClientCount);
                    }

                    m_transferredToSameClientCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceTransferredToSameClientCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                TransferredToSameClientCount = replacement;

                TransferredToSameClientCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.TransferredToSameClientCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_TransferredToSameClientCount,
                    null);
            }
        }
        #endregion

        #region PublishRequestCount
        /// <summary>
        /// A description for the PublishRequestCount Variable.
        /// </summary>
        public DataVariable<uint> PublishRequestCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_publishRequestCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_publishRequestCount != null)
                    {
                        RemoveChild(m_publishRequestCount);
                    }

                    m_publishRequestCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplacePublishRequestCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                PublishRequestCount = replacement;

                PublishRequestCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.PublishRequestCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_PublishRequestCount,
                    null);
            }
        }
        #endregion

        #region DataChangeNotificationsCount
        /// <summary>
        /// A description for the DataChangeNotificationsCount Variable.
        /// </summary>
        public DataVariable<uint> DataChangeNotificationsCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_dataChangeNotificationsCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_dataChangeNotificationsCount != null)
                    {
                        RemoveChild(m_dataChangeNotificationsCount);
                    }

                    m_dataChangeNotificationsCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceDataChangeNotificationsCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                DataChangeNotificationsCount = replacement;

                DataChangeNotificationsCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.DataChangeNotificationsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_DataChangeNotificationsCount,
                    null);
            }
        }
        #endregion

        #region EventNotificationsCount
        /// <summary>
        /// A description for the EventNotificationsCount Variable.
        /// </summary>
        public DataVariable<uint> EventNotificationsCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_eventNotificationsCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_eventNotificationsCount != null)
                    {
                        RemoveChild(m_eventNotificationsCount);
                    }

                    m_eventNotificationsCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceEventNotificationsCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                EventNotificationsCount = replacement;

                EventNotificationsCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.EventNotificationsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_EventNotificationsCount,
                    null);
            }
        }
        #endregion

        #region NotificationsCount
        /// <summary>
        /// A description for the NotificationsCount Variable.
        /// </summary>
        public DataVariable<uint> NotificationsCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_notificationsCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_notificationsCount != null)
                    {
                        RemoveChild(m_notificationsCount);
                    }

                    m_notificationsCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceNotificationsCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                NotificationsCount = replacement;

                NotificationsCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.NotificationsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_NotificationsCount,
                    null);
            }
        }
        #endregion

        #region LateStateCount
        /// <summary>
        /// A description for the LateStateCount Variable.
        /// </summary>
        public DataVariable<uint> LateStateCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_lateStateCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_lateStateCount != null)
                    {
                        RemoveChild(m_lateStateCount);
                    }

                    m_lateStateCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceLateStateCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                LateStateCount = replacement;

                LateStateCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.LateStateCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_LateStateCount,
                    null);
            }
        }
        #endregion

        #region KeepAliveStateCount
        /// <summary>
        /// A description for the KeepAliveStateCount Variable.
        /// </summary>
        public DataVariable<uint> KeepAliveStateCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_keepAliveStateCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_keepAliveStateCount != null)
                    {
                        RemoveChild(m_keepAliveStateCount);
                    }

                    m_keepAliveStateCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceKeepAliveStateCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                KeepAliveStateCount = replacement;

                KeepAliveStateCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.KeepAliveStateCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SubscriptionDiagnosticsType_KeepAliveStateCount,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                SubscriptionDiagnostics instance = source as SubscriptionDiagnostics;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                SubscriptionDiagnosticsType type = source as SubscriptionDiagnosticsType;

                if (type != null && type.SessionId != null)
                {
                    SessionId = (DataVariable<NodeId>)type.SessionId.Clone(this);
                    SessionId.Initialize(type.SessionId);
                }
                else if (instance != null && instance.SessionId != null)
                {
                    SessionId = (DataVariable<NodeId>)instance.SessionId.Clone(this);
                    SessionId.Initialize(instance.SessionId);
                }

                if (type != null && type.SubscriptionId != null)
                {
                    SubscriptionId = (DataVariable<uint>)type.SubscriptionId.Clone(this);
                    SubscriptionId.Initialize(type.SubscriptionId);
                }
                else if (instance != null && instance.SubscriptionId != null)
                {
                    SubscriptionId = (DataVariable<uint>)instance.SubscriptionId.Clone(this);
                    SubscriptionId.Initialize(instance.SubscriptionId);
                }

                if (type != null && type.Priority != null)
                {
                    Priority = (DataVariable<byte>)type.Priority.Clone(this);
                    Priority.Initialize(type.Priority);
                }
                else if (instance != null && instance.Priority != null)
                {
                    Priority = (DataVariable<byte>)instance.Priority.Clone(this);
                    Priority.Initialize(instance.Priority);
                }

                if (type != null && type.PublishingInterval != null)
                {
                    PublishingInterval = (DataVariable<double>)type.PublishingInterval.Clone(this);
                    PublishingInterval.Initialize(type.PublishingInterval);
                }
                else if (instance != null && instance.PublishingInterval != null)
                {
                    PublishingInterval = (DataVariable<double>)instance.PublishingInterval.Clone(this);
                    PublishingInterval.Initialize(instance.PublishingInterval);
                }

                if (type != null && type.MaxKeepAliveCount != null)
                {
                    MaxKeepAliveCount = (DataVariable<uint>)type.MaxKeepAliveCount.Clone(this);
                    MaxKeepAliveCount.Initialize(type.MaxKeepAliveCount);
                }
                else if (instance != null && instance.MaxKeepAliveCount != null)
                {
                    MaxKeepAliveCount = (DataVariable<uint>)instance.MaxKeepAliveCount.Clone(this);
                    MaxKeepAliveCount.Initialize(instance.MaxKeepAliveCount);
                }

                if (type != null && type.LifetimeCount != null)
                {
                    LifetimeCount = (DataVariable<uint>)type.LifetimeCount.Clone(this);
                    LifetimeCount.Initialize(type.LifetimeCount);
                }
                else if (instance != null && instance.LifetimeCount != null)
                {
                    LifetimeCount = (DataVariable<uint>)instance.LifetimeCount.Clone(this);
                    LifetimeCount.Initialize(instance.LifetimeCount);
                }

                if (type != null && type.MaxNotificationsPerPublish != null)
                {
                    MaxNotificationsPerPublish = (DataVariable<uint>)type.MaxNotificationsPerPublish.Clone(this);
                    MaxNotificationsPerPublish.Initialize(type.MaxNotificationsPerPublish);
                }
                else if (instance != null && instance.MaxNotificationsPerPublish != null)
                {
                    MaxNotificationsPerPublish = (DataVariable<uint>)instance.MaxNotificationsPerPublish.Clone(this);
                    MaxNotificationsPerPublish.Initialize(instance.MaxNotificationsPerPublish);
                }

                if (type != null && type.PublishingEnabled != null)
                {
                    PublishingEnabled = (DataVariable<bool>)type.PublishingEnabled.Clone(this);
                    PublishingEnabled.Initialize(type.PublishingEnabled);
                }
                else if (instance != null && instance.PublishingEnabled != null)
                {
                    PublishingEnabled = (DataVariable<bool>)instance.PublishingEnabled.Clone(this);
                    PublishingEnabled.Initialize(instance.PublishingEnabled);
                }

                if (type != null && type.ModifyCount != null)
                {
                    ModifyCount = (DataVariable<uint>)type.ModifyCount.Clone(this);
                    ModifyCount.Initialize(type.ModifyCount);
                }
                else if (instance != null && instance.ModifyCount != null)
                {
                    ModifyCount = (DataVariable<uint>)instance.ModifyCount.Clone(this);
                    ModifyCount.Initialize(instance.ModifyCount);
                }

                if (type != null && type.EnableCount != null)
                {
                    EnableCount = (DataVariable<uint>)type.EnableCount.Clone(this);
                    EnableCount.Initialize(type.EnableCount);
                }
                else if (instance != null && instance.EnableCount != null)
                {
                    EnableCount = (DataVariable<uint>)instance.EnableCount.Clone(this);
                    EnableCount.Initialize(instance.EnableCount);
                }

                if (type != null && type.DisableCount != null)
                {
                    DisableCount = (DataVariable<uint>)type.DisableCount.Clone(this);
                    DisableCount.Initialize(type.DisableCount);
                }
                else if (instance != null && instance.DisableCount != null)
                {
                    DisableCount = (DataVariable<uint>)instance.DisableCount.Clone(this);
                    DisableCount.Initialize(instance.DisableCount);
                }

                if (type != null && type.RepublishRequestCount != null)
                {
                    RepublishRequestCount = (DataVariable<uint>)type.RepublishRequestCount.Clone(this);
                    RepublishRequestCount.Initialize(type.RepublishRequestCount);
                }
                else if (instance != null && instance.RepublishRequestCount != null)
                {
                    RepublishRequestCount = (DataVariable<uint>)instance.RepublishRequestCount.Clone(this);
                    RepublishRequestCount.Initialize(instance.RepublishRequestCount);
                }

                if (type != null && type.RepublishMessageRequestCount != null)
                {
                    RepublishMessageRequestCount = (DataVariable<uint>)type.RepublishMessageRequestCount.Clone(this);
                    RepublishMessageRequestCount.Initialize(type.RepublishMessageRequestCount);
                }
                else if (instance != null && instance.RepublishMessageRequestCount != null)
                {
                    RepublishMessageRequestCount = (DataVariable<uint>)instance.RepublishMessageRequestCount.Clone(this);
                    RepublishMessageRequestCount.Initialize(instance.RepublishMessageRequestCount);
                }

                if (type != null && type.RepublishMessageCount != null)
                {
                    RepublishMessageCount = (DataVariable<uint>)type.RepublishMessageCount.Clone(this);
                    RepublishMessageCount.Initialize(type.RepublishMessageCount);
                }
                else if (instance != null && instance.RepublishMessageCount != null)
                {
                    RepublishMessageCount = (DataVariable<uint>)instance.RepublishMessageCount.Clone(this);
                    RepublishMessageCount.Initialize(instance.RepublishMessageCount);
                }

                if (type != null && type.TransferRequestCount != null)
                {
                    TransferRequestCount = (DataVariable<uint>)type.TransferRequestCount.Clone(this);
                    TransferRequestCount.Initialize(type.TransferRequestCount);
                }
                else if (instance != null && instance.TransferRequestCount != null)
                {
                    TransferRequestCount = (DataVariable<uint>)instance.TransferRequestCount.Clone(this);
                    TransferRequestCount.Initialize(instance.TransferRequestCount);
                }

                if (type != null && type.TransferredToAltClientCount != null)
                {
                    TransferredToAltClientCount = (DataVariable<uint>)type.TransferredToAltClientCount.Clone(this);
                    TransferredToAltClientCount.Initialize(type.TransferredToAltClientCount);
                }
                else if (instance != null && instance.TransferredToAltClientCount != null)
                {
                    TransferredToAltClientCount = (DataVariable<uint>)instance.TransferredToAltClientCount.Clone(this);
                    TransferredToAltClientCount.Initialize(instance.TransferredToAltClientCount);
                }

                if (type != null && type.TransferredToSameClientCount != null)
                {
                    TransferredToSameClientCount = (DataVariable<uint>)type.TransferredToSameClientCount.Clone(this);
                    TransferredToSameClientCount.Initialize(type.TransferredToSameClientCount);
                }
                else if (instance != null && instance.TransferredToSameClientCount != null)
                {
                    TransferredToSameClientCount = (DataVariable<uint>)instance.TransferredToSameClientCount.Clone(this);
                    TransferredToSameClientCount.Initialize(instance.TransferredToSameClientCount);
                }

                if (type != null && type.PublishRequestCount != null)
                {
                    PublishRequestCount = (DataVariable<uint>)type.PublishRequestCount.Clone(this);
                    PublishRequestCount.Initialize(type.PublishRequestCount);
                }
                else if (instance != null && instance.PublishRequestCount != null)
                {
                    PublishRequestCount = (DataVariable<uint>)instance.PublishRequestCount.Clone(this);
                    PublishRequestCount.Initialize(instance.PublishRequestCount);
                }

                if (type != null && type.DataChangeNotificationsCount != null)
                {
                    DataChangeNotificationsCount = (DataVariable<uint>)type.DataChangeNotificationsCount.Clone(this);
                    DataChangeNotificationsCount.Initialize(type.DataChangeNotificationsCount);
                }
                else if (instance != null && instance.DataChangeNotificationsCount != null)
                {
                    DataChangeNotificationsCount = (DataVariable<uint>)instance.DataChangeNotificationsCount.Clone(this);
                    DataChangeNotificationsCount.Initialize(instance.DataChangeNotificationsCount);
                }

                if (type != null && type.EventNotificationsCount != null)
                {
                    EventNotificationsCount = (DataVariable<uint>)type.EventNotificationsCount.Clone(this);
                    EventNotificationsCount.Initialize(type.EventNotificationsCount);
                }
                else if (instance != null && instance.EventNotificationsCount != null)
                {
                    EventNotificationsCount = (DataVariable<uint>)instance.EventNotificationsCount.Clone(this);
                    EventNotificationsCount.Initialize(instance.EventNotificationsCount);
                }

                if (type != null && type.NotificationsCount != null)
                {
                    NotificationsCount = (DataVariable<uint>)type.NotificationsCount.Clone(this);
                    NotificationsCount.Initialize(type.NotificationsCount);
                }
                else if (instance != null && instance.NotificationsCount != null)
                {
                    NotificationsCount = (DataVariable<uint>)instance.NotificationsCount.Clone(this);
                    NotificationsCount.Initialize(instance.NotificationsCount);
                }

                if (type != null && type.LateStateCount != null)
                {
                    LateStateCount = (DataVariable<uint>)type.LateStateCount.Clone(this);
                    LateStateCount.Initialize(type.LateStateCount);
                }
                else if (instance != null && instance.LateStateCount != null)
                {
                    LateStateCount = (DataVariable<uint>)instance.LateStateCount.Clone(this);
                    LateStateCount.Initialize(instance.LateStateCount);
                }

                if (type != null && type.KeepAliveStateCount != null)
                {
                    KeepAliveStateCount = (DataVariable<uint>)type.KeepAliveStateCount.Clone(this);
                    KeepAliveStateCount.Initialize(type.KeepAliveStateCount);
                }
                else if (instance != null && instance.KeepAliveStateCount != null)
                {
                    KeepAliveStateCount = (DataVariable<uint>)instance.KeepAliveStateCount.Clone(this);
                    KeepAliveStateCount.Initialize(instance.KeepAliveStateCount);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_sessionId = DataVariable<NodeId>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.SessionId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_SessionId);

            m_subscriptionId = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.SubscriptionId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_SubscriptionId);

            m_priority = DataVariable<byte>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Priority, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_Priority);

            m_publishingInterval = DataVariable<double>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.PublishingInterval, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_PublishingInterval);

            m_maxKeepAliveCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.MaxKeepAliveCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_MaxKeepAliveCount);

            m_lifetimeCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.LifetimeCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_LifetimeCount);

            m_maxNotificationsPerPublish = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.MaxNotificationsPerPublish, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_MaxNotificationsPerPublish);

            m_publishingEnabled = DataVariable<bool>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.PublishingEnabled, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_PublishingEnabled);

            m_modifyCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ModifyCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_ModifyCount);

            m_enableCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.EnableCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_EnableCount);

            m_disableCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.DisableCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_DisableCount);

            m_republishRequestCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.RepublishRequestCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_RepublishRequestCount);

            m_republishMessageRequestCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.RepublishMessageRequestCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_RepublishMessageRequestCount);

            m_republishMessageCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.RepublishMessageCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_RepublishMessageCount);

            m_transferRequestCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.TransferRequestCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_TransferRequestCount);

            m_transferredToAltClientCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.TransferredToAltClientCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_TransferredToAltClientCount);

            m_transferredToSameClientCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.TransferredToSameClientCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_TransferredToSameClientCount);

            m_publishRequestCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.PublishRequestCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_PublishRequestCount);

            m_dataChangeNotificationsCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.DataChangeNotificationsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_DataChangeNotificationsCount);

            m_eventNotificationsCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.EventNotificationsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_EventNotificationsCount);

            m_notificationsCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.NotificationsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_NotificationsCount);

            m_lateStateCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.LateStateCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_LateStateCount);

            m_keepAliveStateCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.KeepAliveStateCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SubscriptionDiagnosticsType_KeepAliveStateCount);
        }
        
        #region Variable/DataType Conversion Functions.
        /// <summary cref="VariableSource.UpdateValueFromChild" />
        public override void UpdateValueFromChild(VariableSource child)
        {
            lock (DataLock)
            {
                SubscriptionDiagnosticsDataType value = RawValue;

                if (value == null)
                {
                    value = new SubscriptionDiagnosticsDataType();
                }

                switch (child.NumericId)
                {
                    case Opc.Ua.Variables.SubscriptionDiagnosticsType_SessionId:
                    {
                        value.SessionId = SessionId.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SubscriptionDiagnosticsType_SubscriptionId:
                    {
                        value.SubscriptionId = SubscriptionId.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SubscriptionDiagnosticsType_Priority:
                    {
                        value.Priority = Priority.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SubscriptionDiagnosticsType_PublishingInterval:
                    {
                        value.PublishingInterval = PublishingInterval.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SubscriptionDiagnosticsType_MaxKeepAliveCount:
                    {
                        value.MaxKeepAliveCount = MaxKeepAliveCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SubscriptionDiagnosticsType_LifetimeCount:
                    {
                        value.LifetimeCount = LifetimeCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SubscriptionDiagnosticsType_MaxNotificationsPerPublish:
                    {
                        value.MaxNotificationsPerPublish = MaxNotificationsPerPublish.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SubscriptionDiagnosticsType_PublishingEnabled:
                    {
                        value.PublishingEnabled = PublishingEnabled.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SubscriptionDiagnosticsType_ModifyCount:
                    {
                        value.ModifyCount = ModifyCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SubscriptionDiagnosticsType_EnableCount:
                    {
                        value.EnableCount = EnableCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SubscriptionDiagnosticsType_DisableCount:
                    {
                        value.DisableCount = DisableCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SubscriptionDiagnosticsType_RepublishMessageRequestCount:
                    {
                        value.RepublishMessageRequestCount = RepublishMessageRequestCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SubscriptionDiagnosticsType_RepublishMessageCount:
                    {
                        value.RepublishMessageCount = RepublishMessageCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SubscriptionDiagnosticsType_TransferRequestCount:
                    {
                        value.TransferRequestCount = TransferRequestCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SubscriptionDiagnosticsType_TransferredToAltClientCount:
                    {
                        value.TransferredToAltClientCount = TransferredToAltClientCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SubscriptionDiagnosticsType_TransferredToSameClientCount:
                    {
                        value.TransferredToSameClientCount = TransferredToSameClientCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SubscriptionDiagnosticsType_PublishRequestCount:
                    {
                        value.PublishRequestCount = PublishRequestCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SubscriptionDiagnosticsType_DataChangeNotificationsCount:
                    {
                        value.DataChangeNotificationsCount = DataChangeNotificationsCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SubscriptionDiagnosticsType_EventNotificationsCount:
                    {
                        value.EventNotificationsCount = EventNotificationsCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SubscriptionDiagnosticsType_NotificationsCount:
                    {
                        value.NotificationsCount = NotificationsCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SubscriptionDiagnosticsType_LateStateCount:
                    {
                        value.LateStateCount = LateStateCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SubscriptionDiagnosticsType_KeepAliveStateCount:
                    {
                        value.KeepAliveStateCount = KeepAliveStateCount.Value;
                        break;
                    }

                    default:
                    {
                        return;
                    }
                }

                // triggers a data change.
                Value = value;
            }
        }

        /// <summary cref="VariableSource.UpdateChildrenFromValue" />
        public override void UpdateChildrenFromValue()
        {
            lock (DataLock)
            {
                SubscriptionDiagnosticsDataType value = RawValue;

                if (value == null)
                {
                    RawValue = value = new SubscriptionDiagnosticsDataType();
                }

                SessionId.Value = value.SessionId;
                SubscriptionId.Value = value.SubscriptionId;
                Priority.Value = value.Priority;
                PublishingInterval.Value = value.PublishingInterval;
                MaxKeepAliveCount.Value = value.MaxKeepAliveCount;
                LifetimeCount.Value = value.LifetimeCount;
                MaxNotificationsPerPublish.Value = value.MaxNotificationsPerPublish;
                PublishingEnabled.Value = value.PublishingEnabled;
                ModifyCount.Value = value.ModifyCount;
                EnableCount.Value = value.EnableCount;
                DisableCount.Value = value.DisableCount;
                RepublishMessageRequestCount.Value = value.RepublishMessageRequestCount;
                RepublishMessageCount.Value = value.RepublishMessageCount;
                TransferRequestCount.Value = value.TransferRequestCount;
                TransferredToAltClientCount.Value = value.TransferredToAltClientCount;
                TransferredToSameClientCount.Value = value.TransferredToSameClientCount;
                PublishRequestCount.Value = value.PublishRequestCount;
                DataChangeNotificationsCount.Value = value.DataChangeNotificationsCount;
                EventNotificationsCount.Value = value.EventNotificationsCount;
                NotificationsCount.Value = value.NotificationsCount;
                LateStateCount.Value = value.LateStateCount;
                KeepAliveStateCount.Value = value.KeepAliveStateCount;
            }
        }
        #endregion
        #endregion

        #region Private Fields
        private SubscriptionDiagnosticsType m_typeDefinition;
        DataVariable<NodeId> m_sessionId;
        DataVariable<uint> m_subscriptionId;
        DataVariable<byte> m_priority;
        DataVariable<double> m_publishingInterval;
        DataVariable<uint> m_maxKeepAliveCount;
        DataVariable<uint> m_lifetimeCount;
        DataVariable<uint> m_maxNotificationsPerPublish;
        DataVariable<bool> m_publishingEnabled;
        DataVariable<uint> m_modifyCount;
        DataVariable<uint> m_enableCount;
        DataVariable<uint> m_disableCount;
        DataVariable<uint> m_republishRequestCount;
        DataVariable<uint> m_republishMessageRequestCount;
        DataVariable<uint> m_republishMessageCount;
        DataVariable<uint> m_transferRequestCount;
        DataVariable<uint> m_transferredToAltClientCount;
        DataVariable<uint> m_transferredToSameClientCount;
        DataVariable<uint> m_publishRequestCount;
        DataVariable<uint> m_dataChangeNotificationsCount;
        DataVariable<uint> m_eventNotificationsCount;
        DataVariable<uint> m_notificationsCount;
        DataVariable<uint> m_lateStateCount;
        DataVariable<uint> m_keepAliveStateCount;
        #endregion
    }
    #endregion

    #region SessionDiagnosticsArrayType Class
    /// <summary>
    /// Represents the SessionDiagnosticsArrayType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class SessionDiagnosticsArrayType : VariableTypeSource<IList<SessionDiagnosticsDataType>>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public SessionDiagnosticsArrayType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.VariableTypes.SessionDiagnosticsArrayType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.SessionDiagnosticsArrayType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.VariableTypes.BaseDataVariableType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new SessionDiagnosticsArrayType FindSource(IServerInternal server)
        {
            SessionDiagnosticsArrayType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.VariableTypes.SessionDiagnosticsArrayType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as SessionDiagnosticsArrayType;

                if (type != null)
                {
                    return type;
                }

                type = new SessionDiagnosticsArrayType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                SessionDiagnosticsArrayType clone = new SessionDiagnosticsArrayType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                SessionDiagnosticsArrayType type = source as SessionDiagnosticsArrayType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endregion

    #region SessionDiagnosticsArray Class
    /// <summary>
    /// Represents an instance of the SessionDiagnosticsArrayType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class SessionDiagnosticsArray : DataVariable<IList<SessionDiagnosticsDataType>>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected SessionDiagnosticsArray(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = SessionDiagnosticsArrayType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new SessionDiagnosticsArray Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            SessionDiagnosticsArray instance = new SessionDiagnosticsArray(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new SessionDiagnosticsArray Construct(IServerInternal server)
        {
            SessionDiagnosticsArray instance = new SessionDiagnosticsArray(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                SessionDiagnosticsArray clone = new SessionDiagnosticsArray(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                SessionDiagnosticsArray instance = source as SessionDiagnosticsArray;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                SessionDiagnosticsArrayType type = source as SessionDiagnosticsArrayType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private SessionDiagnosticsArrayType m_typeDefinition;
        #endregion
    }
    #endregion

    #region SessionDiagnosticsVariableType Class
    /// <summary>
    /// Represents the SessionDiagnosticsVariableType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class SessionDiagnosticsVariableType : VariableTypeSource<SessionDiagnosticsDataType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public SessionDiagnosticsVariableType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.VariableTypes.SessionDiagnosticsVariableType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.SessionDiagnosticsVariableType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.VariableTypes.BaseDataVariableType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new SessionDiagnosticsVariableType FindSource(IServerInternal server)
        {
            SessionDiagnosticsVariableType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.VariableTypes.SessionDiagnosticsVariableType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as SessionDiagnosticsVariableType;

                if (type != null)
                {
                    return type;
                }

                type = new SessionDiagnosticsVariableType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                SessionDiagnosticsVariableType clone = new SessionDiagnosticsVariableType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region SessionId
        /// <summary>
        /// A description for the SessionId Variable.
        /// </summary>
        public DataVariable<NodeId> SessionId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_sessionId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_sessionId != null)
                    {
                        RemoveChild(m_sessionId);
                    }

                    m_sessionId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSessionId(DataVariable<NodeId> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SessionId = replacement;

                SessionId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SessionId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_SessionId,
                    null);
            }
        }
        #endregion

        #region SessionName
        /// <summary>
        /// A description for the SessionName Variable.
        /// </summary>
        public DataVariable<string> SessionName
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_sessionName; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_sessionName != null)
                    {
                        RemoveChild(m_sessionName);
                    }

                    m_sessionName = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSessionName(DataVariable<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SessionName = replacement;

                SessionName.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SessionName, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_SessionName,
                    null);
            }
        }
        #endregion

        #region ClientDescription
        /// <summary>
        /// A description for the ClientDescription Variable.
        /// </summary>
        public DataVariable<ApplicationDescription> ClientDescription
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_clientDescription; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_clientDescription != null)
                    {
                        RemoveChild(m_clientDescription);
                    }

                    m_clientDescription = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceClientDescription(DataVariable<ApplicationDescription> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ClientDescription = replacement;

                ClientDescription.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ClientDescription, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_ClientDescription,
                    null);
            }
        }
        #endregion

        #region ServerUri
        /// <summary>
        /// A description for the ServerUri Variable.
        /// </summary>
        public DataVariable<string> ServerUri
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_serverUri; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_serverUri != null)
                    {
                        RemoveChild(m_serverUri);
                    }

                    m_serverUri = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceServerUri(DataVariable<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ServerUri = replacement;

                ServerUri.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ServerUri, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_ServerUri,
                    null);
            }
        }
        #endregion

        #region EndpointUrl
        /// <summary>
        /// A description for the EndpointUrl Variable.
        /// </summary>
        public DataVariable<string> EndpointUrl
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_endpointUrl; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_endpointUrl != null)
                    {
                        RemoveChild(m_endpointUrl);
                    }

                    m_endpointUrl = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceEndpointUrl(DataVariable<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                EndpointUrl = replacement;

                EndpointUrl.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.EndpointUrl, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_EndpointUrl,
                    null);
            }
        }
        #endregion

        #region LocaleIds
        /// <summary>
        /// A description for the LocaleIds Variable.
        /// </summary>
        public DataVariable<IList<string>> LocaleIds
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_localeIds; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_localeIds != null)
                    {
                        RemoveChild(m_localeIds);
                    }

                    m_localeIds = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceLocaleIds(DataVariable<IList<string>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                LocaleIds = replacement;

                LocaleIds.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.LocaleIds, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_LocaleIds,
                    null);
            }
        }
        #endregion

        #region ActualSessionTimeout
        /// <summary>
        /// A description for the ActualSessionTimeout Variable.
        /// </summary>
        public DataVariable<double> ActualSessionTimeout
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_actualSessionTimeout; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_actualSessionTimeout != null)
                    {
                        RemoveChild(m_actualSessionTimeout);
                    }

                    m_actualSessionTimeout = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceActualSessionTimeout(DataVariable<double> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ActualSessionTimeout = replacement;

                ActualSessionTimeout.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ActualSessionTimeout, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_ActualSessionTimeout,
                    null);
            }
        }
        #endregion

        #region MaxResponseMessageSize
        /// <summary>
        /// A description for the MaxResponseMessageSize Variable.
        /// </summary>
        public DataVariable<uint> MaxResponseMessageSize
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_maxResponseMessageSize; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_maxResponseMessageSize != null)
                    {
                        RemoveChild(m_maxResponseMessageSize);
                    }

                    m_maxResponseMessageSize = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceMaxResponseMessageSize(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                MaxResponseMessageSize = replacement;

                MaxResponseMessageSize.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.MaxResponseMessageSize, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_MaxResponseMessageSize,
                    null);
            }
        }
        #endregion

        #region ClientConnectionTime
        /// <summary>
        /// A description for the ClientConnectionTime Variable.
        /// </summary>
        public DataVariable<DateTime> ClientConnectionTime
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_clientConnectionTime; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_clientConnectionTime != null)
                    {
                        RemoveChild(m_clientConnectionTime);
                    }

                    m_clientConnectionTime = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceClientConnectionTime(DataVariable<DateTime> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ClientConnectionTime = replacement;

                ClientConnectionTime.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ClientConnectionTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_ClientConnectionTime,
                    null);
            }
        }
        #endregion

        #region ClientLastContactTime
        /// <summary>
        /// A description for the ClientLastContactTime Variable.
        /// </summary>
        public DataVariable<DateTime> ClientLastContactTime
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_clientLastContactTime; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_clientLastContactTime != null)
                    {
                        RemoveChild(m_clientLastContactTime);
                    }

                    m_clientLastContactTime = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceClientLastContactTime(DataVariable<DateTime> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ClientLastContactTime = replacement;

                ClientLastContactTime.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ClientLastContactTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_ClientLastContactTime,
                    null);
            }
        }
        #endregion

        #region CurrentSubscriptionsCount
        /// <summary>
        /// A description for the CurrentSubscriptionsCount Variable.
        /// </summary>
        public DataVariable<uint> CurrentSubscriptionsCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_currentSubscriptionsCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_currentSubscriptionsCount != null)
                    {
                        RemoveChild(m_currentSubscriptionsCount);
                    }

                    m_currentSubscriptionsCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCurrentSubscriptionsCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CurrentSubscriptionsCount = replacement;

                CurrentSubscriptionsCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CurrentSubscriptionsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_CurrentSubscriptionsCount,
                    null);
            }
        }
        #endregion

        #region CurrentMonitoredItemsCount
        /// <summary>
        /// A description for the CurrentMonitoredItemsCount Variable.
        /// </summary>
        public DataVariable<uint> CurrentMonitoredItemsCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_currentMonitoredItemsCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_currentMonitoredItemsCount != null)
                    {
                        RemoveChild(m_currentMonitoredItemsCount);
                    }

                    m_currentMonitoredItemsCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCurrentMonitoredItemsCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CurrentMonitoredItemsCount = replacement;

                CurrentMonitoredItemsCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CurrentMonitoredItemsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_CurrentMonitoredItemsCount,
                    null);
            }
        }
        #endregion

        #region CurrentPublishRequestsInQueue
        /// <summary>
        /// A description for the CurrentPublishRequestsInQueue Variable.
        /// </summary>
        public DataVariable<uint> CurrentPublishRequestsInQueue
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_currentPublishRequestsInQueue; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_currentPublishRequestsInQueue != null)
                    {
                        RemoveChild(m_currentPublishRequestsInQueue);
                    }

                    m_currentPublishRequestsInQueue = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCurrentPublishRequestsInQueue(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CurrentPublishRequestsInQueue = replacement;

                CurrentPublishRequestsInQueue.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CurrentPublishRequestsInQueue, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_CurrentPublishRequestsInQueue,
                    null);
            }
        }
        #endregion

        #region CurrentPublishTimerExpirations
        /// <summary>
        /// A description for the CurrentPublishTimerExpirations Variable.
        /// </summary>
        public DataVariable<uint> CurrentPublishTimerExpirations
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_currentPublishTimerExpirations; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_currentPublishTimerExpirations != null)
                    {
                        RemoveChild(m_currentPublishTimerExpirations);
                    }

                    m_currentPublishTimerExpirations = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCurrentPublishTimerExpirations(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CurrentPublishTimerExpirations = replacement;

                CurrentPublishTimerExpirations.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CurrentPublishTimerExpirations, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_CurrentPublishTimerExpirations,
                    null);
            }
        }
        #endregion

        #region KeepAliveCount
        /// <summary>
        /// A description for the KeepAliveCount Variable.
        /// </summary>
        public DataVariable<uint> KeepAliveCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_keepAliveCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_keepAliveCount != null)
                    {
                        RemoveChild(m_keepAliveCount);
                    }

                    m_keepAliveCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceKeepAliveCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                KeepAliveCount = replacement;

                KeepAliveCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.KeepAliveCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_KeepAliveCount,
                    null);
            }
        }
        #endregion

        #region CurrentRepublishRequestsInQueue
        /// <summary>
        /// A description for the CurrentRepublishRequestsInQueue Variable.
        /// </summary>
        public DataVariable<uint> CurrentRepublishRequestsInQueue
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_currentRepublishRequestsInQueue; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_currentRepublishRequestsInQueue != null)
                    {
                        RemoveChild(m_currentRepublishRequestsInQueue);
                    }

                    m_currentRepublishRequestsInQueue = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCurrentRepublishRequestsInQueue(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CurrentRepublishRequestsInQueue = replacement;

                CurrentRepublishRequestsInQueue.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CurrentRepublishRequestsInQueue, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_CurrentRepublishRequestsInQueue,
                    null);
            }
        }
        #endregion

        #region MaxRepublishRequestsInQueue
        /// <summary>
        /// A description for the MaxRepublishRequestsInQueue Variable.
        /// </summary>
        public DataVariable<uint> MaxRepublishRequestsInQueue
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_maxRepublishRequestsInQueue; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_maxRepublishRequestsInQueue != null)
                    {
                        RemoveChild(m_maxRepublishRequestsInQueue);
                    }

                    m_maxRepublishRequestsInQueue = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceMaxRepublishRequestsInQueue(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                MaxRepublishRequestsInQueue = replacement;

                MaxRepublishRequestsInQueue.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.MaxRepublishRequestsInQueue, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_MaxRepublishRequestsInQueue,
                    null);
            }
        }
        #endregion

        #region RepublishCounter
        /// <summary>
        /// A description for the RepublishCounter Variable.
        /// </summary>
        public DataVariable<uint> RepublishCounter
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_republishCounter; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_republishCounter != null)
                    {
                        RemoveChild(m_republishCounter);
                    }

                    m_republishCounter = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceRepublishCounter(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                RepublishCounter = replacement;

                RepublishCounter.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.RepublishCounter, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_RepublishCounter,
                    null);
            }
        }
        #endregion

        #region PublishingCount
        /// <summary>
        /// A description for the PublishingCount Variable.
        /// </summary>
        public DataVariable<uint> PublishingCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_publishingCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_publishingCount != null)
                    {
                        RemoveChild(m_publishingCount);
                    }

                    m_publishingCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplacePublishingCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                PublishingCount = replacement;

                PublishingCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.PublishingCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_PublishingCount,
                    null);
            }
        }
        #endregion

        #region PublishingQueueOverflowCount
        /// <summary>
        /// A description for the PublishingQueueOverflowCount Variable.
        /// </summary>
        public DataVariable<uint> PublishingQueueOverflowCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_publishingQueueOverflowCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_publishingQueueOverflowCount != null)
                    {
                        RemoveChild(m_publishingQueueOverflowCount);
                    }

                    m_publishingQueueOverflowCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplacePublishingQueueOverflowCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                PublishingQueueOverflowCount = replacement;

                PublishingQueueOverflowCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.PublishingQueueOverflowCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_PublishingQueueOverflowCount,
                    null);
            }
        }
        #endregion

        #region ReadCount
        /// <summary>
        /// A description for the ReadCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> ReadCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_readCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_readCount != null)
                    {
                        RemoveChild(m_readCount);
                    }

                    m_readCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceReadCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ReadCount = replacement;

                ReadCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ReadCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_ReadCount,
                    null);
            }
        }
        #endregion

        #region HistoryReadCount
        /// <summary>
        /// A description for the HistoryReadCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> HistoryReadCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_historyReadCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_historyReadCount != null)
                    {
                        RemoveChild(m_historyReadCount);
                    }

                    m_historyReadCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceHistoryReadCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                HistoryReadCount = replacement;

                HistoryReadCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.HistoryReadCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_HistoryReadCount,
                    null);
            }
        }
        #endregion

        #region WriteCount
        /// <summary>
        /// A description for the WriteCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> WriteCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_writeCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_writeCount != null)
                    {
                        RemoveChild(m_writeCount);
                    }

                    m_writeCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceWriteCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                WriteCount = replacement;

                WriteCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.WriteCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_WriteCount,
                    null);
            }
        }
        #endregion

        #region HistoryUpdateCount
        /// <summary>
        /// A description for the HistoryUpdateCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> HistoryUpdateCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_historyUpdateCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_historyUpdateCount != null)
                    {
                        RemoveChild(m_historyUpdateCount);
                    }

                    m_historyUpdateCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceHistoryUpdateCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                HistoryUpdateCount = replacement;

                HistoryUpdateCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.HistoryUpdateCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_HistoryUpdateCount,
                    null);
            }
        }
        #endregion

        #region CallCount
        /// <summary>
        /// A description for the CallCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> CallCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_callCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_callCount != null)
                    {
                        RemoveChild(m_callCount);
                    }

                    m_callCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCallCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CallCount = replacement;

                CallCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CallCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_CallCount,
                    null);
            }
        }
        #endregion

        #region CreateMonitoredItemsCount
        /// <summary>
        /// A description for the CreateMonitoredItemsCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> CreateMonitoredItemsCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_createMonitoredItemsCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_createMonitoredItemsCount != null)
                    {
                        RemoveChild(m_createMonitoredItemsCount);
                    }

                    m_createMonitoredItemsCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCreateMonitoredItemsCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CreateMonitoredItemsCount = replacement;

                CreateMonitoredItemsCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CreateMonitoredItemsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_CreateMonitoredItemsCount,
                    null);
            }
        }
        #endregion

        #region ModifyMonitoredItemsCount
        /// <summary>
        /// A description for the ModifyMonitoredItemsCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> ModifyMonitoredItemsCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_modifyMonitoredItemsCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_modifyMonitoredItemsCount != null)
                    {
                        RemoveChild(m_modifyMonitoredItemsCount);
                    }

                    m_modifyMonitoredItemsCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceModifyMonitoredItemsCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ModifyMonitoredItemsCount = replacement;

                ModifyMonitoredItemsCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ModifyMonitoredItemsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_ModifyMonitoredItemsCount,
                    null);
            }
        }
        #endregion

        #region SetMonitoringModeCount
        /// <summary>
        /// A description for the SetMonitoringModeCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> SetMonitoringModeCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_setMonitoringModeCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_setMonitoringModeCount != null)
                    {
                        RemoveChild(m_setMonitoringModeCount);
                    }

                    m_setMonitoringModeCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSetMonitoringModeCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SetMonitoringModeCount = replacement;

                SetMonitoringModeCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SetMonitoringModeCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_SetMonitoringModeCount,
                    null);
            }
        }
        #endregion

        #region SetTriggeringCount
        /// <summary>
        /// A description for the SetTriggeringCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> SetTriggeringCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_setTriggeringCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_setTriggeringCount != null)
                    {
                        RemoveChild(m_setTriggeringCount);
                    }

                    m_setTriggeringCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSetTriggeringCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SetTriggeringCount = replacement;

                SetTriggeringCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SetTriggeringCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_SetTriggeringCount,
                    null);
            }
        }
        #endregion

        #region DeleteMonitoredItemsCount
        /// <summary>
        /// A description for the DeleteMonitoredItemsCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> DeleteMonitoredItemsCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_deleteMonitoredItemsCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_deleteMonitoredItemsCount != null)
                    {
                        RemoveChild(m_deleteMonitoredItemsCount);
                    }

                    m_deleteMonitoredItemsCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceDeleteMonitoredItemsCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                DeleteMonitoredItemsCount = replacement;

                DeleteMonitoredItemsCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.DeleteMonitoredItemsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_DeleteMonitoredItemsCount,
                    null);
            }
        }
        #endregion

        #region CreateSubscriptionCount
        /// <summary>
        /// A description for the CreateSubscriptionCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> CreateSubscriptionCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_createSubscriptionCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_createSubscriptionCount != null)
                    {
                        RemoveChild(m_createSubscriptionCount);
                    }

                    m_createSubscriptionCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCreateSubscriptionCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CreateSubscriptionCount = replacement;

                CreateSubscriptionCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CreateSubscriptionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_CreateSubscriptionCount,
                    null);
            }
        }
        #endregion

        #region ModifySubscriptionCount
        /// <summary>
        /// A description for the ModifySubscriptionCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> ModifySubscriptionCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_modifySubscriptionCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_modifySubscriptionCount != null)
                    {
                        RemoveChild(m_modifySubscriptionCount);
                    }

                    m_modifySubscriptionCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceModifySubscriptionCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ModifySubscriptionCount = replacement;

                ModifySubscriptionCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ModifySubscriptionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_ModifySubscriptionCount,
                    null);
            }
        }
        #endregion

        #region SetPublishingModeCount
        /// <summary>
        /// A description for the SetPublishingModeCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> SetPublishingModeCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_setPublishingModeCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_setPublishingModeCount != null)
                    {
                        RemoveChild(m_setPublishingModeCount);
                    }

                    m_setPublishingModeCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSetPublishingModeCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SetPublishingModeCount = replacement;

                SetPublishingModeCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SetPublishingModeCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_SetPublishingModeCount,
                    null);
            }
        }
        #endregion

        #region PublishCount
        /// <summary>
        /// A description for the PublishCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> PublishCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_publishCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_publishCount != null)
                    {
                        RemoveChild(m_publishCount);
                    }

                    m_publishCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplacePublishCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                PublishCount = replacement;

                PublishCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.PublishCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_PublishCount,
                    null);
            }
        }
        #endregion

        #region RepublishCount
        /// <summary>
        /// A description for the RepublishCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> RepublishCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_republishCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_republishCount != null)
                    {
                        RemoveChild(m_republishCount);
                    }

                    m_republishCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceRepublishCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                RepublishCount = replacement;

                RepublishCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.RepublishCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_RepublishCount,
                    null);
            }
        }
        #endregion

        #region TransferSubscriptionsCount
        /// <summary>
        /// A description for the TransferSubscriptionsCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> TransferSubscriptionsCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_transferSubscriptionsCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_transferSubscriptionsCount != null)
                    {
                        RemoveChild(m_transferSubscriptionsCount);
                    }

                    m_transferSubscriptionsCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceTransferSubscriptionsCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                TransferSubscriptionsCount = replacement;

                TransferSubscriptionsCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.TransferSubscriptionsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_TransferSubscriptionsCount,
                    null);
            }
        }
        #endregion

        #region DeleteSubscriptionsCount
        /// <summary>
        /// A description for the DeleteSubscriptionsCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> DeleteSubscriptionsCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_deleteSubscriptionsCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_deleteSubscriptionsCount != null)
                    {
                        RemoveChild(m_deleteSubscriptionsCount);
                    }

                    m_deleteSubscriptionsCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceDeleteSubscriptionsCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                DeleteSubscriptionsCount = replacement;

                DeleteSubscriptionsCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.DeleteSubscriptionsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_DeleteSubscriptionsCount,
                    null);
            }
        }
        #endregion

        #region AddNodesCount
        /// <summary>
        /// A description for the AddNodesCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> AddNodesCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_addNodesCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_addNodesCount != null)
                    {
                        RemoveChild(m_addNodesCount);
                    }

                    m_addNodesCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceAddNodesCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                AddNodesCount = replacement;

                AddNodesCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.AddNodesCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_AddNodesCount,
                    null);
            }
        }
        #endregion

        #region AddReferencesCount
        /// <summary>
        /// A description for the AddReferencesCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> AddReferencesCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_addReferencesCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_addReferencesCount != null)
                    {
                        RemoveChild(m_addReferencesCount);
                    }

                    m_addReferencesCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceAddReferencesCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                AddReferencesCount = replacement;

                AddReferencesCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.AddReferencesCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_AddReferencesCount,
                    null);
            }
        }
        #endregion

        #region DeleteNodesCount
        /// <summary>
        /// A description for the DeleteNodesCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> DeleteNodesCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_deleteNodesCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_deleteNodesCount != null)
                    {
                        RemoveChild(m_deleteNodesCount);
                    }

                    m_deleteNodesCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceDeleteNodesCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                DeleteNodesCount = replacement;

                DeleteNodesCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.DeleteNodesCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_DeleteNodesCount,
                    null);
            }
        }
        #endregion

        #region DeleteReferencesCount
        /// <summary>
        /// A description for the DeleteReferencesCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> DeleteReferencesCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_deleteReferencesCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_deleteReferencesCount != null)
                    {
                        RemoveChild(m_deleteReferencesCount);
                    }

                    m_deleteReferencesCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceDeleteReferencesCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                DeleteReferencesCount = replacement;

                DeleteReferencesCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.DeleteReferencesCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_DeleteReferencesCount,
                    null);
            }
        }
        #endregion

        #region BrowseCount
        /// <summary>
        /// A description for the BrowseCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> BrowseCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_browseCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_browseCount != null)
                    {
                        RemoveChild(m_browseCount);
                    }

                    m_browseCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceBrowseCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                BrowseCount = replacement;

                BrowseCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.BrowseCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_BrowseCount,
                    null);
            }
        }
        #endregion

        #region BrowseNextCount
        /// <summary>
        /// A description for the BrowseNextCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> BrowseNextCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_browseNextCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_browseNextCount != null)
                    {
                        RemoveChild(m_browseNextCount);
                    }

                    m_browseNextCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceBrowseNextCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                BrowseNextCount = replacement;

                BrowseNextCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.BrowseNextCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_BrowseNextCount,
                    null);
            }
        }
        #endregion

        #region TranslateBrowsePathsToNodeIdsCount
        /// <summary>
        /// A description for the TranslateBrowsePathsToNodeIdsCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> TranslateBrowsePathsToNodeIdsCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_translateBrowsePathsToNodeIdsCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_translateBrowsePathsToNodeIdsCount != null)
                    {
                        RemoveChild(m_translateBrowsePathsToNodeIdsCount);
                    }

                    m_translateBrowsePathsToNodeIdsCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceTranslateBrowsePathsToNodeIdsCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                TranslateBrowsePathsToNodeIdsCount = replacement;

                TranslateBrowsePathsToNodeIdsCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.TranslateBrowsePathsToNodeIdsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_TranslateBrowsePathsToNodeIdsCount,
                    null);
            }
        }
        #endregion

        #region QueryFirstCount
        /// <summary>
        /// A description for the QueryFirstCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> QueryFirstCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_queryFirstCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_queryFirstCount != null)
                    {
                        RemoveChild(m_queryFirstCount);
                    }

                    m_queryFirstCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceQueryFirstCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                QueryFirstCount = replacement;

                QueryFirstCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.QueryFirstCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_QueryFirstCount,
                    null);
            }
        }
        #endregion

        #region QueryNextCount
        /// <summary>
        /// A description for the QueryNextCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> QueryNextCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_queryNextCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_queryNextCount != null)
                    {
                        RemoveChild(m_queryNextCount);
                    }

                    m_queryNextCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceQueryNextCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                QueryNextCount = replacement;

                QueryNextCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.QueryNextCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_QueryNextCount,
                    null);
            }
        }
        #endregion

        #region RegisterNodesCount
        /// <summary>
        /// A description for the RegisterNodesCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> RegisterNodesCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_registerNodesCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_registerNodesCount != null)
                    {
                        RemoveChild(m_registerNodesCount);
                    }

                    m_registerNodesCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceRegisterNodesCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                RegisterNodesCount = replacement;

                RegisterNodesCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.RegisterNodesCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_RegisterNodesCount,
                    null);
            }
        }
        #endregion

        #region UnregisterNodesCount
        /// <summary>
        /// A description for the UnregisterNodesCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> UnregisterNodesCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_unregisterNodesCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_unregisterNodesCount != null)
                    {
                        RemoveChild(m_unregisterNodesCount);
                    }

                    m_unregisterNodesCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceUnregisterNodesCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                UnregisterNodesCount = replacement;

                UnregisterNodesCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.UnregisterNodesCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_UnregisterNodesCount,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                SessionDiagnosticsVariableType type = source as SessionDiagnosticsVariableType;

                if (type != null && type.SessionId != null)
                {
                    SessionId = (DataVariable<NodeId>)type.SessionId.Clone(this);
                    SessionId.Initialize(type.SessionId);
                }

                if (type != null && type.SessionName != null)
                {
                    SessionName = (DataVariable<string>)type.SessionName.Clone(this);
                    SessionName.Initialize(type.SessionName);
                }

                if (type != null && type.ClientDescription != null)
                {
                    ClientDescription = (DataVariable<ApplicationDescription>)type.ClientDescription.Clone(this);
                    ClientDescription.Initialize(type.ClientDescription);
                }

                if (type != null && type.ServerUri != null)
                {
                    ServerUri = (DataVariable<string>)type.ServerUri.Clone(this);
                    ServerUri.Initialize(type.ServerUri);
                }

                if (type != null && type.EndpointUrl != null)
                {
                    EndpointUrl = (DataVariable<string>)type.EndpointUrl.Clone(this);
                    EndpointUrl.Initialize(type.EndpointUrl);
                }

                if (type != null && type.LocaleIds != null)
                {
                    LocaleIds = (DataVariable<IList<string>>)type.LocaleIds.Clone(this);
                    LocaleIds.Initialize(type.LocaleIds);
                }

                if (type != null && type.ActualSessionTimeout != null)
                {
                    ActualSessionTimeout = (DataVariable<double>)type.ActualSessionTimeout.Clone(this);
                    ActualSessionTimeout.Initialize(type.ActualSessionTimeout);
                }

                if (type != null && type.MaxResponseMessageSize != null)
                {
                    MaxResponseMessageSize = (DataVariable<uint>)type.MaxResponseMessageSize.Clone(this);
                    MaxResponseMessageSize.Initialize(type.MaxResponseMessageSize);
                }

                if (type != null && type.ClientConnectionTime != null)
                {
                    ClientConnectionTime = (DataVariable<DateTime>)type.ClientConnectionTime.Clone(this);
                    ClientConnectionTime.Initialize(type.ClientConnectionTime);
                }

                if (type != null && type.ClientLastContactTime != null)
                {
                    ClientLastContactTime = (DataVariable<DateTime>)type.ClientLastContactTime.Clone(this);
                    ClientLastContactTime.Initialize(type.ClientLastContactTime);
                }

                if (type != null && type.CurrentSubscriptionsCount != null)
                {
                    CurrentSubscriptionsCount = (DataVariable<uint>)type.CurrentSubscriptionsCount.Clone(this);
                    CurrentSubscriptionsCount.Initialize(type.CurrentSubscriptionsCount);
                }

                if (type != null && type.CurrentMonitoredItemsCount != null)
                {
                    CurrentMonitoredItemsCount = (DataVariable<uint>)type.CurrentMonitoredItemsCount.Clone(this);
                    CurrentMonitoredItemsCount.Initialize(type.CurrentMonitoredItemsCount);
                }

                if (type != null && type.CurrentPublishRequestsInQueue != null)
                {
                    CurrentPublishRequestsInQueue = (DataVariable<uint>)type.CurrentPublishRequestsInQueue.Clone(this);
                    CurrentPublishRequestsInQueue.Initialize(type.CurrentPublishRequestsInQueue);
                }

                if (type != null && type.CurrentPublishTimerExpirations != null)
                {
                    CurrentPublishTimerExpirations = (DataVariable<uint>)type.CurrentPublishTimerExpirations.Clone(this);
                    CurrentPublishTimerExpirations.Initialize(type.CurrentPublishTimerExpirations);
                }

                if (type != null && type.KeepAliveCount != null)
                {
                    KeepAliveCount = (DataVariable<uint>)type.KeepAliveCount.Clone(this);
                    KeepAliveCount.Initialize(type.KeepAliveCount);
                }

                if (type != null && type.CurrentRepublishRequestsInQueue != null)
                {
                    CurrentRepublishRequestsInQueue = (DataVariable<uint>)type.CurrentRepublishRequestsInQueue.Clone(this);
                    CurrentRepublishRequestsInQueue.Initialize(type.CurrentRepublishRequestsInQueue);
                }

                if (type != null && type.MaxRepublishRequestsInQueue != null)
                {
                    MaxRepublishRequestsInQueue = (DataVariable<uint>)type.MaxRepublishRequestsInQueue.Clone(this);
                    MaxRepublishRequestsInQueue.Initialize(type.MaxRepublishRequestsInQueue);
                }

                if (type != null && type.RepublishCounter != null)
                {
                    RepublishCounter = (DataVariable<uint>)type.RepublishCounter.Clone(this);
                    RepublishCounter.Initialize(type.RepublishCounter);
                }

                if (type != null && type.PublishingCount != null)
                {
                    PublishingCount = (DataVariable<uint>)type.PublishingCount.Clone(this);
                    PublishingCount.Initialize(type.PublishingCount);
                }

                if (type != null && type.PublishingQueueOverflowCount != null)
                {
                    PublishingQueueOverflowCount = (DataVariable<uint>)type.PublishingQueueOverflowCount.Clone(this);
                    PublishingQueueOverflowCount.Initialize(type.PublishingQueueOverflowCount);
                }

                if (type != null && type.ReadCount != null)
                {
                    ReadCount = (DataVariable<ServiceCounterDataType>)type.ReadCount.Clone(this);
                    ReadCount.Initialize(type.ReadCount);
                }

                if (type != null && type.HistoryReadCount != null)
                {
                    HistoryReadCount = (DataVariable<ServiceCounterDataType>)type.HistoryReadCount.Clone(this);
                    HistoryReadCount.Initialize(type.HistoryReadCount);
                }

                if (type != null && type.WriteCount != null)
                {
                    WriteCount = (DataVariable<ServiceCounterDataType>)type.WriteCount.Clone(this);
                    WriteCount.Initialize(type.WriteCount);
                }

                if (type != null && type.HistoryUpdateCount != null)
                {
                    HistoryUpdateCount = (DataVariable<ServiceCounterDataType>)type.HistoryUpdateCount.Clone(this);
                    HistoryUpdateCount.Initialize(type.HistoryUpdateCount);
                }

                if (type != null && type.CallCount != null)
                {
                    CallCount = (DataVariable<ServiceCounterDataType>)type.CallCount.Clone(this);
                    CallCount.Initialize(type.CallCount);
                }

                if (type != null && type.CreateMonitoredItemsCount != null)
                {
                    CreateMonitoredItemsCount = (DataVariable<ServiceCounterDataType>)type.CreateMonitoredItemsCount.Clone(this);
                    CreateMonitoredItemsCount.Initialize(type.CreateMonitoredItemsCount);
                }

                if (type != null && type.ModifyMonitoredItemsCount != null)
                {
                    ModifyMonitoredItemsCount = (DataVariable<ServiceCounterDataType>)type.ModifyMonitoredItemsCount.Clone(this);
                    ModifyMonitoredItemsCount.Initialize(type.ModifyMonitoredItemsCount);
                }

                if (type != null && type.SetMonitoringModeCount != null)
                {
                    SetMonitoringModeCount = (DataVariable<ServiceCounterDataType>)type.SetMonitoringModeCount.Clone(this);
                    SetMonitoringModeCount.Initialize(type.SetMonitoringModeCount);
                }

                if (type != null && type.SetTriggeringCount != null)
                {
                    SetTriggeringCount = (DataVariable<ServiceCounterDataType>)type.SetTriggeringCount.Clone(this);
                    SetTriggeringCount.Initialize(type.SetTriggeringCount);
                }

                if (type != null && type.DeleteMonitoredItemsCount != null)
                {
                    DeleteMonitoredItemsCount = (DataVariable<ServiceCounterDataType>)type.DeleteMonitoredItemsCount.Clone(this);
                    DeleteMonitoredItemsCount.Initialize(type.DeleteMonitoredItemsCount);
                }

                if (type != null && type.CreateSubscriptionCount != null)
                {
                    CreateSubscriptionCount = (DataVariable<ServiceCounterDataType>)type.CreateSubscriptionCount.Clone(this);
                    CreateSubscriptionCount.Initialize(type.CreateSubscriptionCount);
                }

                if (type != null && type.ModifySubscriptionCount != null)
                {
                    ModifySubscriptionCount = (DataVariable<ServiceCounterDataType>)type.ModifySubscriptionCount.Clone(this);
                    ModifySubscriptionCount.Initialize(type.ModifySubscriptionCount);
                }

                if (type != null && type.SetPublishingModeCount != null)
                {
                    SetPublishingModeCount = (DataVariable<ServiceCounterDataType>)type.SetPublishingModeCount.Clone(this);
                    SetPublishingModeCount.Initialize(type.SetPublishingModeCount);
                }

                if (type != null && type.PublishCount != null)
                {
                    PublishCount = (DataVariable<ServiceCounterDataType>)type.PublishCount.Clone(this);
                    PublishCount.Initialize(type.PublishCount);
                }

                if (type != null && type.RepublishCount != null)
                {
                    RepublishCount = (DataVariable<ServiceCounterDataType>)type.RepublishCount.Clone(this);
                    RepublishCount.Initialize(type.RepublishCount);
                }

                if (type != null && type.TransferSubscriptionsCount != null)
                {
                    TransferSubscriptionsCount = (DataVariable<ServiceCounterDataType>)type.TransferSubscriptionsCount.Clone(this);
                    TransferSubscriptionsCount.Initialize(type.TransferSubscriptionsCount);
                }

                if (type != null && type.DeleteSubscriptionsCount != null)
                {
                    DeleteSubscriptionsCount = (DataVariable<ServiceCounterDataType>)type.DeleteSubscriptionsCount.Clone(this);
                    DeleteSubscriptionsCount.Initialize(type.DeleteSubscriptionsCount);
                }

                if (type != null && type.AddNodesCount != null)
                {
                    AddNodesCount = (DataVariable<ServiceCounterDataType>)type.AddNodesCount.Clone(this);
                    AddNodesCount.Initialize(type.AddNodesCount);
                }

                if (type != null && type.AddReferencesCount != null)
                {
                    AddReferencesCount = (DataVariable<ServiceCounterDataType>)type.AddReferencesCount.Clone(this);
                    AddReferencesCount.Initialize(type.AddReferencesCount);
                }

                if (type != null && type.DeleteNodesCount != null)
                {
                    DeleteNodesCount = (DataVariable<ServiceCounterDataType>)type.DeleteNodesCount.Clone(this);
                    DeleteNodesCount.Initialize(type.DeleteNodesCount);
                }

                if (type != null && type.DeleteReferencesCount != null)
                {
                    DeleteReferencesCount = (DataVariable<ServiceCounterDataType>)type.DeleteReferencesCount.Clone(this);
                    DeleteReferencesCount.Initialize(type.DeleteReferencesCount);
                }

                if (type != null && type.BrowseCount != null)
                {
                    BrowseCount = (DataVariable<ServiceCounterDataType>)type.BrowseCount.Clone(this);
                    BrowseCount.Initialize(type.BrowseCount);
                }

                if (type != null && type.BrowseNextCount != null)
                {
                    BrowseNextCount = (DataVariable<ServiceCounterDataType>)type.BrowseNextCount.Clone(this);
                    BrowseNextCount.Initialize(type.BrowseNextCount);
                }

                if (type != null && type.TranslateBrowsePathsToNodeIdsCount != null)
                {
                    TranslateBrowsePathsToNodeIdsCount = (DataVariable<ServiceCounterDataType>)type.TranslateBrowsePathsToNodeIdsCount.Clone(this);
                    TranslateBrowsePathsToNodeIdsCount.Initialize(type.TranslateBrowsePathsToNodeIdsCount);
                }

                if (type != null && type.QueryFirstCount != null)
                {
                    QueryFirstCount = (DataVariable<ServiceCounterDataType>)type.QueryFirstCount.Clone(this);
                    QueryFirstCount.Initialize(type.QueryFirstCount);
                }

                if (type != null && type.QueryNextCount != null)
                {
                    QueryNextCount = (DataVariable<ServiceCounterDataType>)type.QueryNextCount.Clone(this);
                    QueryNextCount.Initialize(type.QueryNextCount);
                }

                if (type != null && type.RegisterNodesCount != null)
                {
                    RegisterNodesCount = (DataVariable<ServiceCounterDataType>)type.RegisterNodesCount.Clone(this);
                    RegisterNodesCount.Initialize(type.RegisterNodesCount);
                }

                if (type != null && type.UnregisterNodesCount != null)
                {
                    UnregisterNodesCount = (DataVariable<ServiceCounterDataType>)type.UnregisterNodesCount.Clone(this);
                    UnregisterNodesCount.Initialize(type.UnregisterNodesCount);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_sessionId = DataVariable<NodeId>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_SessionId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SessionId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_SessionId);

            m_sessionName = DataVariable<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_SessionName, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SessionName, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_SessionName);

            m_clientDescription = DataVariable<ApplicationDescription>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_ClientDescription, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ClientDescription, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_ClientDescription);

            m_serverUri = DataVariable<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_ServerUri, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ServerUri, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_ServerUri);

            m_endpointUrl = DataVariable<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_EndpointUrl, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.EndpointUrl, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_EndpointUrl);

            m_localeIds = DataVariable<IList<string>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_LocaleIds, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.LocaleIds, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_LocaleIds);

            m_actualSessionTimeout = DataVariable<double>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_ActualSessionTimeout, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ActualSessionTimeout, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_ActualSessionTimeout);

            m_maxResponseMessageSize = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_MaxResponseMessageSize, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.MaxResponseMessageSize, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_MaxResponseMessageSize);

            m_clientConnectionTime = DataVariable<DateTime>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_ClientConnectionTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ClientConnectionTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_ClientConnectionTime);

            m_clientLastContactTime = DataVariable<DateTime>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_ClientLastContactTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ClientLastContactTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_ClientLastContactTime);

            m_currentSubscriptionsCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_CurrentSubscriptionsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.CurrentSubscriptionsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_CurrentSubscriptionsCount);

            m_currentMonitoredItemsCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_CurrentMonitoredItemsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.CurrentMonitoredItemsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_CurrentMonitoredItemsCount);

            m_currentPublishRequestsInQueue = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_CurrentPublishRequestsInQueue, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.CurrentPublishRequestsInQueue, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_CurrentPublishRequestsInQueue);

            m_currentPublishTimerExpirations = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_CurrentPublishTimerExpirations, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.CurrentPublishTimerExpirations, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_CurrentPublishTimerExpirations);

            m_keepAliveCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_KeepAliveCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.KeepAliveCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_KeepAliveCount);

            m_currentRepublishRequestsInQueue = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_CurrentRepublishRequestsInQueue, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.CurrentRepublishRequestsInQueue, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_CurrentRepublishRequestsInQueue);

            m_maxRepublishRequestsInQueue = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_MaxRepublishRequestsInQueue, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.MaxRepublishRequestsInQueue, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_MaxRepublishRequestsInQueue);

            m_republishCounter = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_RepublishCounter, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.RepublishCounter, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_RepublishCounter);

            m_publishingCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_PublishingCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.PublishingCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_PublishingCount);

            m_publishingQueueOverflowCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_PublishingQueueOverflowCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.PublishingQueueOverflowCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_PublishingQueueOverflowCount);

            m_readCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_ReadCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ReadCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_ReadCount);

            m_historyReadCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_HistoryReadCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.HistoryReadCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_HistoryReadCount);

            m_writeCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_WriteCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.WriteCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_WriteCount);

            m_historyUpdateCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_HistoryUpdateCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.HistoryUpdateCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_HistoryUpdateCount);

            m_callCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_CallCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.CallCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_CallCount);

            m_createMonitoredItemsCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_CreateMonitoredItemsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.CreateMonitoredItemsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_CreateMonitoredItemsCount);

            m_modifyMonitoredItemsCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_ModifyMonitoredItemsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ModifyMonitoredItemsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_ModifyMonitoredItemsCount);

            m_setMonitoringModeCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_SetMonitoringModeCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SetMonitoringModeCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_SetMonitoringModeCount);

            m_setTriggeringCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_SetTriggeringCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SetTriggeringCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_SetTriggeringCount);

            m_deleteMonitoredItemsCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_DeleteMonitoredItemsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.DeleteMonitoredItemsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_DeleteMonitoredItemsCount);

            m_createSubscriptionCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_CreateSubscriptionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.CreateSubscriptionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_CreateSubscriptionCount);

            m_modifySubscriptionCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_ModifySubscriptionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ModifySubscriptionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_ModifySubscriptionCount);

            m_setPublishingModeCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_SetPublishingModeCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SetPublishingModeCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_SetPublishingModeCount);

            m_publishCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_PublishCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.PublishCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_PublishCount);

            m_republishCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_RepublishCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.RepublishCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_RepublishCount);

            m_transferSubscriptionsCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_TransferSubscriptionsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.TransferSubscriptionsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_TransferSubscriptionsCount);

            m_deleteSubscriptionsCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_DeleteSubscriptionsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.DeleteSubscriptionsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_DeleteSubscriptionsCount);

            m_addNodesCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_AddNodesCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.AddNodesCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_AddNodesCount);

            m_addReferencesCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_AddReferencesCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.AddReferencesCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_AddReferencesCount);

            m_deleteNodesCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_DeleteNodesCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.DeleteNodesCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_DeleteNodesCount);

            m_deleteReferencesCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_DeleteReferencesCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.DeleteReferencesCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_DeleteReferencesCount);

            m_browseCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_BrowseCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.BrowseCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_BrowseCount);

            m_browseNextCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_BrowseNextCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.BrowseNextCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_BrowseNextCount);

            m_translateBrowsePathsToNodeIdsCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_TranslateBrowsePathsToNodeIdsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.TranslateBrowsePathsToNodeIdsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_TranslateBrowsePathsToNodeIdsCount);

            m_queryFirstCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_QueryFirstCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.QueryFirstCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_QueryFirstCount);

            m_queryNextCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_QueryNextCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.QueryNextCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_QueryNextCount);

            m_registerNodesCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_RegisterNodesCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.RegisterNodesCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_RegisterNodesCount);

            m_unregisterNodesCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionDiagnosticsVariableType_UnregisterNodesCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.UnregisterNodesCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_UnregisterNodesCount);
        }
        #endregion

        #region Private Fields
        DataVariable<NodeId> m_sessionId;
        DataVariable<string> m_sessionName;
        DataVariable<ApplicationDescription> m_clientDescription;
        DataVariable<string> m_serverUri;
        DataVariable<string> m_endpointUrl;
        DataVariable<IList<string>> m_localeIds;
        DataVariable<double> m_actualSessionTimeout;
        DataVariable<uint> m_maxResponseMessageSize;
        DataVariable<DateTime> m_clientConnectionTime;
        DataVariable<DateTime> m_clientLastContactTime;
        DataVariable<uint> m_currentSubscriptionsCount;
        DataVariable<uint> m_currentMonitoredItemsCount;
        DataVariable<uint> m_currentPublishRequestsInQueue;
        DataVariable<uint> m_currentPublishTimerExpirations;
        DataVariable<uint> m_keepAliveCount;
        DataVariable<uint> m_currentRepublishRequestsInQueue;
        DataVariable<uint> m_maxRepublishRequestsInQueue;
        DataVariable<uint> m_republishCounter;
        DataVariable<uint> m_publishingCount;
        DataVariable<uint> m_publishingQueueOverflowCount;
        DataVariable<ServiceCounterDataType> m_readCount;
        DataVariable<ServiceCounterDataType> m_historyReadCount;
        DataVariable<ServiceCounterDataType> m_writeCount;
        DataVariable<ServiceCounterDataType> m_historyUpdateCount;
        DataVariable<ServiceCounterDataType> m_callCount;
        DataVariable<ServiceCounterDataType> m_createMonitoredItemsCount;
        DataVariable<ServiceCounterDataType> m_modifyMonitoredItemsCount;
        DataVariable<ServiceCounterDataType> m_setMonitoringModeCount;
        DataVariable<ServiceCounterDataType> m_setTriggeringCount;
        DataVariable<ServiceCounterDataType> m_deleteMonitoredItemsCount;
        DataVariable<ServiceCounterDataType> m_createSubscriptionCount;
        DataVariable<ServiceCounterDataType> m_modifySubscriptionCount;
        DataVariable<ServiceCounterDataType> m_setPublishingModeCount;
        DataVariable<ServiceCounterDataType> m_publishCount;
        DataVariable<ServiceCounterDataType> m_republishCount;
        DataVariable<ServiceCounterDataType> m_transferSubscriptionsCount;
        DataVariable<ServiceCounterDataType> m_deleteSubscriptionsCount;
        DataVariable<ServiceCounterDataType> m_addNodesCount;
        DataVariable<ServiceCounterDataType> m_addReferencesCount;
        DataVariable<ServiceCounterDataType> m_deleteNodesCount;
        DataVariable<ServiceCounterDataType> m_deleteReferencesCount;
        DataVariable<ServiceCounterDataType> m_browseCount;
        DataVariable<ServiceCounterDataType> m_browseNextCount;
        DataVariable<ServiceCounterDataType> m_translateBrowsePathsToNodeIdsCount;
        DataVariable<ServiceCounterDataType> m_queryFirstCount;
        DataVariable<ServiceCounterDataType> m_queryNextCount;
        DataVariable<ServiceCounterDataType> m_registerNodesCount;
        DataVariable<ServiceCounterDataType> m_unregisterNodesCount;
        #endregion
    }
    #endregion

    #region SessionDiagnosticsVariable Class
    /// <summary>
    /// Represents an instance of the SessionDiagnosticsVariableType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class SessionDiagnosticsVariable : DataVariable<SessionDiagnosticsDataType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected SessionDiagnosticsVariable(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = SessionDiagnosticsVariableType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new SessionDiagnosticsVariable Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            SessionDiagnosticsVariable instance = new SessionDiagnosticsVariable(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new SessionDiagnosticsVariable Construct(IServerInternal server)
        {
            SessionDiagnosticsVariable instance = new SessionDiagnosticsVariable(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                SessionDiagnosticsVariable clone = new SessionDiagnosticsVariable(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region SessionId
        /// <summary>
        /// A description for the SessionId Variable.
        /// </summary>
        public DataVariable<NodeId> SessionId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_sessionId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_sessionId != null)
                    {
                        RemoveChild(m_sessionId);
                    }

                    m_sessionId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSessionId(DataVariable<NodeId> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SessionId = replacement;

                SessionId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SessionId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_SessionId,
                    null);
            }
        }
        #endregion

        #region SessionName
        /// <summary>
        /// A description for the SessionName Variable.
        /// </summary>
        public DataVariable<string> SessionName
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_sessionName; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_sessionName != null)
                    {
                        RemoveChild(m_sessionName);
                    }

                    m_sessionName = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSessionName(DataVariable<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SessionName = replacement;

                SessionName.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SessionName, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_SessionName,
                    null);
            }
        }
        #endregion

        #region ClientDescription
        /// <summary>
        /// A description for the ClientDescription Variable.
        /// </summary>
        public DataVariable<ApplicationDescription> ClientDescription
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_clientDescription; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_clientDescription != null)
                    {
                        RemoveChild(m_clientDescription);
                    }

                    m_clientDescription = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceClientDescription(DataVariable<ApplicationDescription> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ClientDescription = replacement;

                ClientDescription.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ClientDescription, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_ClientDescription,
                    null);
            }
        }
        #endregion

        #region ServerUri
        /// <summary>
        /// A description for the ServerUri Variable.
        /// </summary>
        public DataVariable<string> ServerUri
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_serverUri; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_serverUri != null)
                    {
                        RemoveChild(m_serverUri);
                    }

                    m_serverUri = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceServerUri(DataVariable<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ServerUri = replacement;

                ServerUri.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ServerUri, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_ServerUri,
                    null);
            }
        }
        #endregion

        #region EndpointUrl
        /// <summary>
        /// A description for the EndpointUrl Variable.
        /// </summary>
        public DataVariable<string> EndpointUrl
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_endpointUrl; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_endpointUrl != null)
                    {
                        RemoveChild(m_endpointUrl);
                    }

                    m_endpointUrl = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceEndpointUrl(DataVariable<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                EndpointUrl = replacement;

                EndpointUrl.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.EndpointUrl, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_EndpointUrl,
                    null);
            }
        }
        #endregion

        #region LocaleIds
        /// <summary>
        /// A description for the LocaleIds Variable.
        /// </summary>
        public DataVariable<IList<string>> LocaleIds
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_localeIds; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_localeIds != null)
                    {
                        RemoveChild(m_localeIds);
                    }

                    m_localeIds = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceLocaleIds(DataVariable<IList<string>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                LocaleIds = replacement;

                LocaleIds.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.LocaleIds, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_LocaleIds,
                    null);
            }
        }
        #endregion

        #region ActualSessionTimeout
        /// <summary>
        /// A description for the ActualSessionTimeout Variable.
        /// </summary>
        public DataVariable<double> ActualSessionTimeout
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_actualSessionTimeout; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_actualSessionTimeout != null)
                    {
                        RemoveChild(m_actualSessionTimeout);
                    }

                    m_actualSessionTimeout = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceActualSessionTimeout(DataVariable<double> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ActualSessionTimeout = replacement;

                ActualSessionTimeout.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ActualSessionTimeout, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_ActualSessionTimeout,
                    null);
            }
        }
        #endregion

        #region MaxResponseMessageSize
        /// <summary>
        /// A description for the MaxResponseMessageSize Variable.
        /// </summary>
        public DataVariable<uint> MaxResponseMessageSize
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_maxResponseMessageSize; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_maxResponseMessageSize != null)
                    {
                        RemoveChild(m_maxResponseMessageSize);
                    }

                    m_maxResponseMessageSize = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceMaxResponseMessageSize(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                MaxResponseMessageSize = replacement;

                MaxResponseMessageSize.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.MaxResponseMessageSize, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_MaxResponseMessageSize,
                    null);
            }
        }
        #endregion

        #region ClientConnectionTime
        /// <summary>
        /// A description for the ClientConnectionTime Variable.
        /// </summary>
        public DataVariable<DateTime> ClientConnectionTime
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_clientConnectionTime; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_clientConnectionTime != null)
                    {
                        RemoveChild(m_clientConnectionTime);
                    }

                    m_clientConnectionTime = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceClientConnectionTime(DataVariable<DateTime> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ClientConnectionTime = replacement;

                ClientConnectionTime.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ClientConnectionTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_ClientConnectionTime,
                    null);
            }
        }
        #endregion

        #region ClientLastContactTime
        /// <summary>
        /// A description for the ClientLastContactTime Variable.
        /// </summary>
        public DataVariable<DateTime> ClientLastContactTime
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_clientLastContactTime; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_clientLastContactTime != null)
                    {
                        RemoveChild(m_clientLastContactTime);
                    }

                    m_clientLastContactTime = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceClientLastContactTime(DataVariable<DateTime> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ClientLastContactTime = replacement;

                ClientLastContactTime.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ClientLastContactTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_ClientLastContactTime,
                    null);
            }
        }
        #endregion

        #region CurrentSubscriptionsCount
        /// <summary>
        /// A description for the CurrentSubscriptionsCount Variable.
        /// </summary>
        public DataVariable<uint> CurrentSubscriptionsCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_currentSubscriptionsCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_currentSubscriptionsCount != null)
                    {
                        RemoveChild(m_currentSubscriptionsCount);
                    }

                    m_currentSubscriptionsCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCurrentSubscriptionsCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CurrentSubscriptionsCount = replacement;

                CurrentSubscriptionsCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CurrentSubscriptionsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_CurrentSubscriptionsCount,
                    null);
            }
        }
        #endregion

        #region CurrentMonitoredItemsCount
        /// <summary>
        /// A description for the CurrentMonitoredItemsCount Variable.
        /// </summary>
        public DataVariable<uint> CurrentMonitoredItemsCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_currentMonitoredItemsCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_currentMonitoredItemsCount != null)
                    {
                        RemoveChild(m_currentMonitoredItemsCount);
                    }

                    m_currentMonitoredItemsCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCurrentMonitoredItemsCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CurrentMonitoredItemsCount = replacement;

                CurrentMonitoredItemsCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CurrentMonitoredItemsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_CurrentMonitoredItemsCount,
                    null);
            }
        }
        #endregion

        #region CurrentPublishRequestsInQueue
        /// <summary>
        /// A description for the CurrentPublishRequestsInQueue Variable.
        /// </summary>
        public DataVariable<uint> CurrentPublishRequestsInQueue
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_currentPublishRequestsInQueue; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_currentPublishRequestsInQueue != null)
                    {
                        RemoveChild(m_currentPublishRequestsInQueue);
                    }

                    m_currentPublishRequestsInQueue = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCurrentPublishRequestsInQueue(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CurrentPublishRequestsInQueue = replacement;

                CurrentPublishRequestsInQueue.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CurrentPublishRequestsInQueue, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_CurrentPublishRequestsInQueue,
                    null);
            }
        }
        #endregion

        #region CurrentPublishTimerExpirations
        /// <summary>
        /// A description for the CurrentPublishTimerExpirations Variable.
        /// </summary>
        public DataVariable<uint> CurrentPublishTimerExpirations
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_currentPublishTimerExpirations; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_currentPublishTimerExpirations != null)
                    {
                        RemoveChild(m_currentPublishTimerExpirations);
                    }

                    m_currentPublishTimerExpirations = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCurrentPublishTimerExpirations(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CurrentPublishTimerExpirations = replacement;

                CurrentPublishTimerExpirations.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CurrentPublishTimerExpirations, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_CurrentPublishTimerExpirations,
                    null);
            }
        }
        #endregion

        #region KeepAliveCount
        /// <summary>
        /// A description for the KeepAliveCount Variable.
        /// </summary>
        public DataVariable<uint> KeepAliveCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_keepAliveCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_keepAliveCount != null)
                    {
                        RemoveChild(m_keepAliveCount);
                    }

                    m_keepAliveCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceKeepAliveCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                KeepAliveCount = replacement;

                KeepAliveCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.KeepAliveCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_KeepAliveCount,
                    null);
            }
        }
        #endregion

        #region CurrentRepublishRequestsInQueue
        /// <summary>
        /// A description for the CurrentRepublishRequestsInQueue Variable.
        /// </summary>
        public DataVariable<uint> CurrentRepublishRequestsInQueue
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_currentRepublishRequestsInQueue; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_currentRepublishRequestsInQueue != null)
                    {
                        RemoveChild(m_currentRepublishRequestsInQueue);
                    }

                    m_currentRepublishRequestsInQueue = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCurrentRepublishRequestsInQueue(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CurrentRepublishRequestsInQueue = replacement;

                CurrentRepublishRequestsInQueue.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CurrentRepublishRequestsInQueue, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_CurrentRepublishRequestsInQueue,
                    null);
            }
        }
        #endregion

        #region MaxRepublishRequestsInQueue
        /// <summary>
        /// A description for the MaxRepublishRequestsInQueue Variable.
        /// </summary>
        public DataVariable<uint> MaxRepublishRequestsInQueue
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_maxRepublishRequestsInQueue; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_maxRepublishRequestsInQueue != null)
                    {
                        RemoveChild(m_maxRepublishRequestsInQueue);
                    }

                    m_maxRepublishRequestsInQueue = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceMaxRepublishRequestsInQueue(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                MaxRepublishRequestsInQueue = replacement;

                MaxRepublishRequestsInQueue.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.MaxRepublishRequestsInQueue, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_MaxRepublishRequestsInQueue,
                    null);
            }
        }
        #endregion

        #region RepublishCounter
        /// <summary>
        /// A description for the RepublishCounter Variable.
        /// </summary>
        public DataVariable<uint> RepublishCounter
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_republishCounter; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_republishCounter != null)
                    {
                        RemoveChild(m_republishCounter);
                    }

                    m_republishCounter = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceRepublishCounter(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                RepublishCounter = replacement;

                RepublishCounter.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.RepublishCounter, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_RepublishCounter,
                    null);
            }
        }
        #endregion

        #region PublishingCount
        /// <summary>
        /// A description for the PublishingCount Variable.
        /// </summary>
        public DataVariable<uint> PublishingCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_publishingCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_publishingCount != null)
                    {
                        RemoveChild(m_publishingCount);
                    }

                    m_publishingCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplacePublishingCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                PublishingCount = replacement;

                PublishingCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.PublishingCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_PublishingCount,
                    null);
            }
        }
        #endregion

        #region PublishingQueueOverflowCount
        /// <summary>
        /// A description for the PublishingQueueOverflowCount Variable.
        /// </summary>
        public DataVariable<uint> PublishingQueueOverflowCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_publishingQueueOverflowCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_publishingQueueOverflowCount != null)
                    {
                        RemoveChild(m_publishingQueueOverflowCount);
                    }

                    m_publishingQueueOverflowCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplacePublishingQueueOverflowCount(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                PublishingQueueOverflowCount = replacement;

                PublishingQueueOverflowCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.PublishingQueueOverflowCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_PublishingQueueOverflowCount,
                    null);
            }
        }
        #endregion

        #region ReadCount
        /// <summary>
        /// A description for the ReadCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> ReadCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_readCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_readCount != null)
                    {
                        RemoveChild(m_readCount);
                    }

                    m_readCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceReadCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ReadCount = replacement;

                ReadCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ReadCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_ReadCount,
                    null);
            }
        }
        #endregion

        #region HistoryReadCount
        /// <summary>
        /// A description for the HistoryReadCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> HistoryReadCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_historyReadCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_historyReadCount != null)
                    {
                        RemoveChild(m_historyReadCount);
                    }

                    m_historyReadCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceHistoryReadCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                HistoryReadCount = replacement;

                HistoryReadCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.HistoryReadCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_HistoryReadCount,
                    null);
            }
        }
        #endregion

        #region WriteCount
        /// <summary>
        /// A description for the WriteCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> WriteCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_writeCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_writeCount != null)
                    {
                        RemoveChild(m_writeCount);
                    }

                    m_writeCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceWriteCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                WriteCount = replacement;

                WriteCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.WriteCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_WriteCount,
                    null);
            }
        }
        #endregion

        #region HistoryUpdateCount
        /// <summary>
        /// A description for the HistoryUpdateCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> HistoryUpdateCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_historyUpdateCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_historyUpdateCount != null)
                    {
                        RemoveChild(m_historyUpdateCount);
                    }

                    m_historyUpdateCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceHistoryUpdateCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                HistoryUpdateCount = replacement;

                HistoryUpdateCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.HistoryUpdateCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_HistoryUpdateCount,
                    null);
            }
        }
        #endregion

        #region CallCount
        /// <summary>
        /// A description for the CallCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> CallCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_callCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_callCount != null)
                    {
                        RemoveChild(m_callCount);
                    }

                    m_callCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCallCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CallCount = replacement;

                CallCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CallCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_CallCount,
                    null);
            }
        }
        #endregion

        #region CreateMonitoredItemsCount
        /// <summary>
        /// A description for the CreateMonitoredItemsCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> CreateMonitoredItemsCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_createMonitoredItemsCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_createMonitoredItemsCount != null)
                    {
                        RemoveChild(m_createMonitoredItemsCount);
                    }

                    m_createMonitoredItemsCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCreateMonitoredItemsCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CreateMonitoredItemsCount = replacement;

                CreateMonitoredItemsCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CreateMonitoredItemsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_CreateMonitoredItemsCount,
                    null);
            }
        }
        #endregion

        #region ModifyMonitoredItemsCount
        /// <summary>
        /// A description for the ModifyMonitoredItemsCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> ModifyMonitoredItemsCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_modifyMonitoredItemsCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_modifyMonitoredItemsCount != null)
                    {
                        RemoveChild(m_modifyMonitoredItemsCount);
                    }

                    m_modifyMonitoredItemsCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceModifyMonitoredItemsCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ModifyMonitoredItemsCount = replacement;

                ModifyMonitoredItemsCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ModifyMonitoredItemsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_ModifyMonitoredItemsCount,
                    null);
            }
        }
        #endregion

        #region SetMonitoringModeCount
        /// <summary>
        /// A description for the SetMonitoringModeCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> SetMonitoringModeCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_setMonitoringModeCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_setMonitoringModeCount != null)
                    {
                        RemoveChild(m_setMonitoringModeCount);
                    }

                    m_setMonitoringModeCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSetMonitoringModeCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SetMonitoringModeCount = replacement;

                SetMonitoringModeCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SetMonitoringModeCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_SetMonitoringModeCount,
                    null);
            }
        }
        #endregion

        #region SetTriggeringCount
        /// <summary>
        /// A description for the SetTriggeringCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> SetTriggeringCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_setTriggeringCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_setTriggeringCount != null)
                    {
                        RemoveChild(m_setTriggeringCount);
                    }

                    m_setTriggeringCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSetTriggeringCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SetTriggeringCount = replacement;

                SetTriggeringCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SetTriggeringCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_SetTriggeringCount,
                    null);
            }
        }
        #endregion

        #region DeleteMonitoredItemsCount
        /// <summary>
        /// A description for the DeleteMonitoredItemsCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> DeleteMonitoredItemsCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_deleteMonitoredItemsCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_deleteMonitoredItemsCount != null)
                    {
                        RemoveChild(m_deleteMonitoredItemsCount);
                    }

                    m_deleteMonitoredItemsCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceDeleteMonitoredItemsCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                DeleteMonitoredItemsCount = replacement;

                DeleteMonitoredItemsCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.DeleteMonitoredItemsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_DeleteMonitoredItemsCount,
                    null);
            }
        }
        #endregion

        #region CreateSubscriptionCount
        /// <summary>
        /// A description for the CreateSubscriptionCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> CreateSubscriptionCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_createSubscriptionCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_createSubscriptionCount != null)
                    {
                        RemoveChild(m_createSubscriptionCount);
                    }

                    m_createSubscriptionCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCreateSubscriptionCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CreateSubscriptionCount = replacement;

                CreateSubscriptionCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CreateSubscriptionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_CreateSubscriptionCount,
                    null);
            }
        }
        #endregion

        #region ModifySubscriptionCount
        /// <summary>
        /// A description for the ModifySubscriptionCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> ModifySubscriptionCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_modifySubscriptionCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_modifySubscriptionCount != null)
                    {
                        RemoveChild(m_modifySubscriptionCount);
                    }

                    m_modifySubscriptionCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceModifySubscriptionCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ModifySubscriptionCount = replacement;

                ModifySubscriptionCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ModifySubscriptionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_ModifySubscriptionCount,
                    null);
            }
        }
        #endregion

        #region SetPublishingModeCount
        /// <summary>
        /// A description for the SetPublishingModeCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> SetPublishingModeCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_setPublishingModeCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_setPublishingModeCount != null)
                    {
                        RemoveChild(m_setPublishingModeCount);
                    }

                    m_setPublishingModeCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSetPublishingModeCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SetPublishingModeCount = replacement;

                SetPublishingModeCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SetPublishingModeCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_SetPublishingModeCount,
                    null);
            }
        }
        #endregion

        #region PublishCount
        /// <summary>
        /// A description for the PublishCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> PublishCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_publishCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_publishCount != null)
                    {
                        RemoveChild(m_publishCount);
                    }

                    m_publishCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplacePublishCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                PublishCount = replacement;

                PublishCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.PublishCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_PublishCount,
                    null);
            }
        }
        #endregion

        #region RepublishCount
        /// <summary>
        /// A description for the RepublishCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> RepublishCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_republishCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_republishCount != null)
                    {
                        RemoveChild(m_republishCount);
                    }

                    m_republishCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceRepublishCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                RepublishCount = replacement;

                RepublishCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.RepublishCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_RepublishCount,
                    null);
            }
        }
        #endregion

        #region TransferSubscriptionsCount
        /// <summary>
        /// A description for the TransferSubscriptionsCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> TransferSubscriptionsCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_transferSubscriptionsCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_transferSubscriptionsCount != null)
                    {
                        RemoveChild(m_transferSubscriptionsCount);
                    }

                    m_transferSubscriptionsCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceTransferSubscriptionsCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                TransferSubscriptionsCount = replacement;

                TransferSubscriptionsCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.TransferSubscriptionsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_TransferSubscriptionsCount,
                    null);
            }
        }
        #endregion

        #region DeleteSubscriptionsCount
        /// <summary>
        /// A description for the DeleteSubscriptionsCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> DeleteSubscriptionsCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_deleteSubscriptionsCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_deleteSubscriptionsCount != null)
                    {
                        RemoveChild(m_deleteSubscriptionsCount);
                    }

                    m_deleteSubscriptionsCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceDeleteSubscriptionsCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                DeleteSubscriptionsCount = replacement;

                DeleteSubscriptionsCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.DeleteSubscriptionsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_DeleteSubscriptionsCount,
                    null);
            }
        }
        #endregion

        #region AddNodesCount
        /// <summary>
        /// A description for the AddNodesCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> AddNodesCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_addNodesCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_addNodesCount != null)
                    {
                        RemoveChild(m_addNodesCount);
                    }

                    m_addNodesCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceAddNodesCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                AddNodesCount = replacement;

                AddNodesCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.AddNodesCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_AddNodesCount,
                    null);
            }
        }
        #endregion

        #region AddReferencesCount
        /// <summary>
        /// A description for the AddReferencesCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> AddReferencesCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_addReferencesCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_addReferencesCount != null)
                    {
                        RemoveChild(m_addReferencesCount);
                    }

                    m_addReferencesCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceAddReferencesCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                AddReferencesCount = replacement;

                AddReferencesCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.AddReferencesCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_AddReferencesCount,
                    null);
            }
        }
        #endregion

        #region DeleteNodesCount
        /// <summary>
        /// A description for the DeleteNodesCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> DeleteNodesCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_deleteNodesCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_deleteNodesCount != null)
                    {
                        RemoveChild(m_deleteNodesCount);
                    }

                    m_deleteNodesCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceDeleteNodesCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                DeleteNodesCount = replacement;

                DeleteNodesCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.DeleteNodesCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_DeleteNodesCount,
                    null);
            }
        }
        #endregion

        #region DeleteReferencesCount
        /// <summary>
        /// A description for the DeleteReferencesCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> DeleteReferencesCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_deleteReferencesCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_deleteReferencesCount != null)
                    {
                        RemoveChild(m_deleteReferencesCount);
                    }

                    m_deleteReferencesCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceDeleteReferencesCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                DeleteReferencesCount = replacement;

                DeleteReferencesCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.DeleteReferencesCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_DeleteReferencesCount,
                    null);
            }
        }
        #endregion

        #region BrowseCount
        /// <summary>
        /// A description for the BrowseCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> BrowseCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_browseCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_browseCount != null)
                    {
                        RemoveChild(m_browseCount);
                    }

                    m_browseCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceBrowseCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                BrowseCount = replacement;

                BrowseCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.BrowseCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_BrowseCount,
                    null);
            }
        }
        #endregion

        #region BrowseNextCount
        /// <summary>
        /// A description for the BrowseNextCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> BrowseNextCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_browseNextCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_browseNextCount != null)
                    {
                        RemoveChild(m_browseNextCount);
                    }

                    m_browseNextCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceBrowseNextCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                BrowseNextCount = replacement;

                BrowseNextCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.BrowseNextCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_BrowseNextCount,
                    null);
            }
        }
        #endregion

        #region TranslateBrowsePathsToNodeIdsCount
        /// <summary>
        /// A description for the TranslateBrowsePathsToNodeIdsCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> TranslateBrowsePathsToNodeIdsCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_translateBrowsePathsToNodeIdsCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_translateBrowsePathsToNodeIdsCount != null)
                    {
                        RemoveChild(m_translateBrowsePathsToNodeIdsCount);
                    }

                    m_translateBrowsePathsToNodeIdsCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceTranslateBrowsePathsToNodeIdsCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                TranslateBrowsePathsToNodeIdsCount = replacement;

                TranslateBrowsePathsToNodeIdsCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.TranslateBrowsePathsToNodeIdsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_TranslateBrowsePathsToNodeIdsCount,
                    null);
            }
        }
        #endregion

        #region QueryFirstCount
        /// <summary>
        /// A description for the QueryFirstCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> QueryFirstCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_queryFirstCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_queryFirstCount != null)
                    {
                        RemoveChild(m_queryFirstCount);
                    }

                    m_queryFirstCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceQueryFirstCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                QueryFirstCount = replacement;

                QueryFirstCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.QueryFirstCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_QueryFirstCount,
                    null);
            }
        }
        #endregion

        #region QueryNextCount
        /// <summary>
        /// A description for the QueryNextCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> QueryNextCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_queryNextCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_queryNextCount != null)
                    {
                        RemoveChild(m_queryNextCount);
                    }

                    m_queryNextCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceQueryNextCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                QueryNextCount = replacement;

                QueryNextCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.QueryNextCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_QueryNextCount,
                    null);
            }
        }
        #endregion

        #region RegisterNodesCount
        /// <summary>
        /// A description for the RegisterNodesCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> RegisterNodesCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_registerNodesCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_registerNodesCount != null)
                    {
                        RemoveChild(m_registerNodesCount);
                    }

                    m_registerNodesCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceRegisterNodesCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                RegisterNodesCount = replacement;

                RegisterNodesCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.RegisterNodesCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_RegisterNodesCount,
                    null);
            }
        }
        #endregion

        #region UnregisterNodesCount
        /// <summary>
        /// A description for the UnregisterNodesCount Variable.
        /// </summary>
        public DataVariable<ServiceCounterDataType> UnregisterNodesCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_unregisterNodesCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_unregisterNodesCount != null)
                    {
                        RemoveChild(m_unregisterNodesCount);
                    }

                    m_unregisterNodesCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceUnregisterNodesCount(DataVariable<ServiceCounterDataType> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                UnregisterNodesCount = replacement;

                UnregisterNodesCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.UnregisterNodesCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionDiagnosticsVariableType_UnregisterNodesCount,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                SessionDiagnosticsVariable instance = source as SessionDiagnosticsVariable;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                SessionDiagnosticsVariableType type = source as SessionDiagnosticsVariableType;

                if (type != null && type.SessionId != null)
                {
                    SessionId = (DataVariable<NodeId>)type.SessionId.Clone(this);
                    SessionId.Initialize(type.SessionId);
                }
                else if (instance != null && instance.SessionId != null)
                {
                    SessionId = (DataVariable<NodeId>)instance.SessionId.Clone(this);
                    SessionId.Initialize(instance.SessionId);
                }

                if (type != null && type.SessionName != null)
                {
                    SessionName = (DataVariable<string>)type.SessionName.Clone(this);
                    SessionName.Initialize(type.SessionName);
                }
                else if (instance != null && instance.SessionName != null)
                {
                    SessionName = (DataVariable<string>)instance.SessionName.Clone(this);
                    SessionName.Initialize(instance.SessionName);
                }

                if (type != null && type.ClientDescription != null)
                {
                    ClientDescription = (DataVariable<ApplicationDescription>)type.ClientDescription.Clone(this);
                    ClientDescription.Initialize(type.ClientDescription);
                }
                else if (instance != null && instance.ClientDescription != null)
                {
                    ClientDescription = (DataVariable<ApplicationDescription>)instance.ClientDescription.Clone(this);
                    ClientDescription.Initialize(instance.ClientDescription);
                }

                if (type != null && type.ServerUri != null)
                {
                    ServerUri = (DataVariable<string>)type.ServerUri.Clone(this);
                    ServerUri.Initialize(type.ServerUri);
                }
                else if (instance != null && instance.ServerUri != null)
                {
                    ServerUri = (DataVariable<string>)instance.ServerUri.Clone(this);
                    ServerUri.Initialize(instance.ServerUri);
                }

                if (type != null && type.EndpointUrl != null)
                {
                    EndpointUrl = (DataVariable<string>)type.EndpointUrl.Clone(this);
                    EndpointUrl.Initialize(type.EndpointUrl);
                }
                else if (instance != null && instance.EndpointUrl != null)
                {
                    EndpointUrl = (DataVariable<string>)instance.EndpointUrl.Clone(this);
                    EndpointUrl.Initialize(instance.EndpointUrl);
                }

                if (type != null && type.LocaleIds != null)
                {
                    LocaleIds = (DataVariable<IList<string>>)type.LocaleIds.Clone(this);
                    LocaleIds.Initialize(type.LocaleIds);
                }
                else if (instance != null && instance.LocaleIds != null)
                {
                    LocaleIds = (DataVariable<IList<string>>)instance.LocaleIds.Clone(this);
                    LocaleIds.Initialize(instance.LocaleIds);
                }

                if (type != null && type.ActualSessionTimeout != null)
                {
                    ActualSessionTimeout = (DataVariable<double>)type.ActualSessionTimeout.Clone(this);
                    ActualSessionTimeout.Initialize(type.ActualSessionTimeout);
                }
                else if (instance != null && instance.ActualSessionTimeout != null)
                {
                    ActualSessionTimeout = (DataVariable<double>)instance.ActualSessionTimeout.Clone(this);
                    ActualSessionTimeout.Initialize(instance.ActualSessionTimeout);
                }

                if (type != null && type.MaxResponseMessageSize != null)
                {
                    MaxResponseMessageSize = (DataVariable<uint>)type.MaxResponseMessageSize.Clone(this);
                    MaxResponseMessageSize.Initialize(type.MaxResponseMessageSize);
                }
                else if (instance != null && instance.MaxResponseMessageSize != null)
                {
                    MaxResponseMessageSize = (DataVariable<uint>)instance.MaxResponseMessageSize.Clone(this);
                    MaxResponseMessageSize.Initialize(instance.MaxResponseMessageSize);
                }

                if (type != null && type.ClientConnectionTime != null)
                {
                    ClientConnectionTime = (DataVariable<DateTime>)type.ClientConnectionTime.Clone(this);
                    ClientConnectionTime.Initialize(type.ClientConnectionTime);
                }
                else if (instance != null && instance.ClientConnectionTime != null)
                {
                    ClientConnectionTime = (DataVariable<DateTime>)instance.ClientConnectionTime.Clone(this);
                    ClientConnectionTime.Initialize(instance.ClientConnectionTime);
                }

                if (type != null && type.ClientLastContactTime != null)
                {
                    ClientLastContactTime = (DataVariable<DateTime>)type.ClientLastContactTime.Clone(this);
                    ClientLastContactTime.Initialize(type.ClientLastContactTime);
                }
                else if (instance != null && instance.ClientLastContactTime != null)
                {
                    ClientLastContactTime = (DataVariable<DateTime>)instance.ClientLastContactTime.Clone(this);
                    ClientLastContactTime.Initialize(instance.ClientLastContactTime);
                }

                if (type != null && type.CurrentSubscriptionsCount != null)
                {
                    CurrentSubscriptionsCount = (DataVariable<uint>)type.CurrentSubscriptionsCount.Clone(this);
                    CurrentSubscriptionsCount.Initialize(type.CurrentSubscriptionsCount);
                }
                else if (instance != null && instance.CurrentSubscriptionsCount != null)
                {
                    CurrentSubscriptionsCount = (DataVariable<uint>)instance.CurrentSubscriptionsCount.Clone(this);
                    CurrentSubscriptionsCount.Initialize(instance.CurrentSubscriptionsCount);
                }

                if (type != null && type.CurrentMonitoredItemsCount != null)
                {
                    CurrentMonitoredItemsCount = (DataVariable<uint>)type.CurrentMonitoredItemsCount.Clone(this);
                    CurrentMonitoredItemsCount.Initialize(type.CurrentMonitoredItemsCount);
                }
                else if (instance != null && instance.CurrentMonitoredItemsCount != null)
                {
                    CurrentMonitoredItemsCount = (DataVariable<uint>)instance.CurrentMonitoredItemsCount.Clone(this);
                    CurrentMonitoredItemsCount.Initialize(instance.CurrentMonitoredItemsCount);
                }

                if (type != null && type.CurrentPublishRequestsInQueue != null)
                {
                    CurrentPublishRequestsInQueue = (DataVariable<uint>)type.CurrentPublishRequestsInQueue.Clone(this);
                    CurrentPublishRequestsInQueue.Initialize(type.CurrentPublishRequestsInQueue);
                }
                else if (instance != null && instance.CurrentPublishRequestsInQueue != null)
                {
                    CurrentPublishRequestsInQueue = (DataVariable<uint>)instance.CurrentPublishRequestsInQueue.Clone(this);
                    CurrentPublishRequestsInQueue.Initialize(instance.CurrentPublishRequestsInQueue);
                }

                if (type != null && type.CurrentPublishTimerExpirations != null)
                {
                    CurrentPublishTimerExpirations = (DataVariable<uint>)type.CurrentPublishTimerExpirations.Clone(this);
                    CurrentPublishTimerExpirations.Initialize(type.CurrentPublishTimerExpirations);
                }
                else if (instance != null && instance.CurrentPublishTimerExpirations != null)
                {
                    CurrentPublishTimerExpirations = (DataVariable<uint>)instance.CurrentPublishTimerExpirations.Clone(this);
                    CurrentPublishTimerExpirations.Initialize(instance.CurrentPublishTimerExpirations);
                }

                if (type != null && type.KeepAliveCount != null)
                {
                    KeepAliveCount = (DataVariable<uint>)type.KeepAliveCount.Clone(this);
                    KeepAliveCount.Initialize(type.KeepAliveCount);
                }
                else if (instance != null && instance.KeepAliveCount != null)
                {
                    KeepAliveCount = (DataVariable<uint>)instance.KeepAliveCount.Clone(this);
                    KeepAliveCount.Initialize(instance.KeepAliveCount);
                }

                if (type != null && type.CurrentRepublishRequestsInQueue != null)
                {
                    CurrentRepublishRequestsInQueue = (DataVariable<uint>)type.CurrentRepublishRequestsInQueue.Clone(this);
                    CurrentRepublishRequestsInQueue.Initialize(type.CurrentRepublishRequestsInQueue);
                }
                else if (instance != null && instance.CurrentRepublishRequestsInQueue != null)
                {
                    CurrentRepublishRequestsInQueue = (DataVariable<uint>)instance.CurrentRepublishRequestsInQueue.Clone(this);
                    CurrentRepublishRequestsInQueue.Initialize(instance.CurrentRepublishRequestsInQueue);
                }

                if (type != null && type.MaxRepublishRequestsInQueue != null)
                {
                    MaxRepublishRequestsInQueue = (DataVariable<uint>)type.MaxRepublishRequestsInQueue.Clone(this);
                    MaxRepublishRequestsInQueue.Initialize(type.MaxRepublishRequestsInQueue);
                }
                else if (instance != null && instance.MaxRepublishRequestsInQueue != null)
                {
                    MaxRepublishRequestsInQueue = (DataVariable<uint>)instance.MaxRepublishRequestsInQueue.Clone(this);
                    MaxRepublishRequestsInQueue.Initialize(instance.MaxRepublishRequestsInQueue);
                }

                if (type != null && type.RepublishCounter != null)
                {
                    RepublishCounter = (DataVariable<uint>)type.RepublishCounter.Clone(this);
                    RepublishCounter.Initialize(type.RepublishCounter);
                }
                else if (instance != null && instance.RepublishCounter != null)
                {
                    RepublishCounter = (DataVariable<uint>)instance.RepublishCounter.Clone(this);
                    RepublishCounter.Initialize(instance.RepublishCounter);
                }

                if (type != null && type.PublishingCount != null)
                {
                    PublishingCount = (DataVariable<uint>)type.PublishingCount.Clone(this);
                    PublishingCount.Initialize(type.PublishingCount);
                }
                else if (instance != null && instance.PublishingCount != null)
                {
                    PublishingCount = (DataVariable<uint>)instance.PublishingCount.Clone(this);
                    PublishingCount.Initialize(instance.PublishingCount);
                }

                if (type != null && type.PublishingQueueOverflowCount != null)
                {
                    PublishingQueueOverflowCount = (DataVariable<uint>)type.PublishingQueueOverflowCount.Clone(this);
                    PublishingQueueOverflowCount.Initialize(type.PublishingQueueOverflowCount);
                }
                else if (instance != null && instance.PublishingQueueOverflowCount != null)
                {
                    PublishingQueueOverflowCount = (DataVariable<uint>)instance.PublishingQueueOverflowCount.Clone(this);
                    PublishingQueueOverflowCount.Initialize(instance.PublishingQueueOverflowCount);
                }

                if (type != null && type.ReadCount != null)
                {
                    ReadCount = (DataVariable<ServiceCounterDataType>)type.ReadCount.Clone(this);
                    ReadCount.Initialize(type.ReadCount);
                }
                else if (instance != null && instance.ReadCount != null)
                {
                    ReadCount = (DataVariable<ServiceCounterDataType>)instance.ReadCount.Clone(this);
                    ReadCount.Initialize(instance.ReadCount);
                }

                if (type != null && type.HistoryReadCount != null)
                {
                    HistoryReadCount = (DataVariable<ServiceCounterDataType>)type.HistoryReadCount.Clone(this);
                    HistoryReadCount.Initialize(type.HistoryReadCount);
                }
                else if (instance != null && instance.HistoryReadCount != null)
                {
                    HistoryReadCount = (DataVariable<ServiceCounterDataType>)instance.HistoryReadCount.Clone(this);
                    HistoryReadCount.Initialize(instance.HistoryReadCount);
                }

                if (type != null && type.WriteCount != null)
                {
                    WriteCount = (DataVariable<ServiceCounterDataType>)type.WriteCount.Clone(this);
                    WriteCount.Initialize(type.WriteCount);
                }
                else if (instance != null && instance.WriteCount != null)
                {
                    WriteCount = (DataVariable<ServiceCounterDataType>)instance.WriteCount.Clone(this);
                    WriteCount.Initialize(instance.WriteCount);
                }

                if (type != null && type.HistoryUpdateCount != null)
                {
                    HistoryUpdateCount = (DataVariable<ServiceCounterDataType>)type.HistoryUpdateCount.Clone(this);
                    HistoryUpdateCount.Initialize(type.HistoryUpdateCount);
                }
                else if (instance != null && instance.HistoryUpdateCount != null)
                {
                    HistoryUpdateCount = (DataVariable<ServiceCounterDataType>)instance.HistoryUpdateCount.Clone(this);
                    HistoryUpdateCount.Initialize(instance.HistoryUpdateCount);
                }

                if (type != null && type.CallCount != null)
                {
                    CallCount = (DataVariable<ServiceCounterDataType>)type.CallCount.Clone(this);
                    CallCount.Initialize(type.CallCount);
                }
                else if (instance != null && instance.CallCount != null)
                {
                    CallCount = (DataVariable<ServiceCounterDataType>)instance.CallCount.Clone(this);
                    CallCount.Initialize(instance.CallCount);
                }

                if (type != null && type.CreateMonitoredItemsCount != null)
                {
                    CreateMonitoredItemsCount = (DataVariable<ServiceCounterDataType>)type.CreateMonitoredItemsCount.Clone(this);
                    CreateMonitoredItemsCount.Initialize(type.CreateMonitoredItemsCount);
                }
                else if (instance != null && instance.CreateMonitoredItemsCount != null)
                {
                    CreateMonitoredItemsCount = (DataVariable<ServiceCounterDataType>)instance.CreateMonitoredItemsCount.Clone(this);
                    CreateMonitoredItemsCount.Initialize(instance.CreateMonitoredItemsCount);
                }

                if (type != null && type.ModifyMonitoredItemsCount != null)
                {
                    ModifyMonitoredItemsCount = (DataVariable<ServiceCounterDataType>)type.ModifyMonitoredItemsCount.Clone(this);
                    ModifyMonitoredItemsCount.Initialize(type.ModifyMonitoredItemsCount);
                }
                else if (instance != null && instance.ModifyMonitoredItemsCount != null)
                {
                    ModifyMonitoredItemsCount = (DataVariable<ServiceCounterDataType>)instance.ModifyMonitoredItemsCount.Clone(this);
                    ModifyMonitoredItemsCount.Initialize(instance.ModifyMonitoredItemsCount);
                }

                if (type != null && type.SetMonitoringModeCount != null)
                {
                    SetMonitoringModeCount = (DataVariable<ServiceCounterDataType>)type.SetMonitoringModeCount.Clone(this);
                    SetMonitoringModeCount.Initialize(type.SetMonitoringModeCount);
                }
                else if (instance != null && instance.SetMonitoringModeCount != null)
                {
                    SetMonitoringModeCount = (DataVariable<ServiceCounterDataType>)instance.SetMonitoringModeCount.Clone(this);
                    SetMonitoringModeCount.Initialize(instance.SetMonitoringModeCount);
                }

                if (type != null && type.SetTriggeringCount != null)
                {
                    SetTriggeringCount = (DataVariable<ServiceCounterDataType>)type.SetTriggeringCount.Clone(this);
                    SetTriggeringCount.Initialize(type.SetTriggeringCount);
                }
                else if (instance != null && instance.SetTriggeringCount != null)
                {
                    SetTriggeringCount = (DataVariable<ServiceCounterDataType>)instance.SetTriggeringCount.Clone(this);
                    SetTriggeringCount.Initialize(instance.SetTriggeringCount);
                }

                if (type != null && type.DeleteMonitoredItemsCount != null)
                {
                    DeleteMonitoredItemsCount = (DataVariable<ServiceCounterDataType>)type.DeleteMonitoredItemsCount.Clone(this);
                    DeleteMonitoredItemsCount.Initialize(type.DeleteMonitoredItemsCount);
                }
                else if (instance != null && instance.DeleteMonitoredItemsCount != null)
                {
                    DeleteMonitoredItemsCount = (DataVariable<ServiceCounterDataType>)instance.DeleteMonitoredItemsCount.Clone(this);
                    DeleteMonitoredItemsCount.Initialize(instance.DeleteMonitoredItemsCount);
                }

                if (type != null && type.CreateSubscriptionCount != null)
                {
                    CreateSubscriptionCount = (DataVariable<ServiceCounterDataType>)type.CreateSubscriptionCount.Clone(this);
                    CreateSubscriptionCount.Initialize(type.CreateSubscriptionCount);
                }
                else if (instance != null && instance.CreateSubscriptionCount != null)
                {
                    CreateSubscriptionCount = (DataVariable<ServiceCounterDataType>)instance.CreateSubscriptionCount.Clone(this);
                    CreateSubscriptionCount.Initialize(instance.CreateSubscriptionCount);
                }

                if (type != null && type.ModifySubscriptionCount != null)
                {
                    ModifySubscriptionCount = (DataVariable<ServiceCounterDataType>)type.ModifySubscriptionCount.Clone(this);
                    ModifySubscriptionCount.Initialize(type.ModifySubscriptionCount);
                }
                else if (instance != null && instance.ModifySubscriptionCount != null)
                {
                    ModifySubscriptionCount = (DataVariable<ServiceCounterDataType>)instance.ModifySubscriptionCount.Clone(this);
                    ModifySubscriptionCount.Initialize(instance.ModifySubscriptionCount);
                }

                if (type != null && type.SetPublishingModeCount != null)
                {
                    SetPublishingModeCount = (DataVariable<ServiceCounterDataType>)type.SetPublishingModeCount.Clone(this);
                    SetPublishingModeCount.Initialize(type.SetPublishingModeCount);
                }
                else if (instance != null && instance.SetPublishingModeCount != null)
                {
                    SetPublishingModeCount = (DataVariable<ServiceCounterDataType>)instance.SetPublishingModeCount.Clone(this);
                    SetPublishingModeCount.Initialize(instance.SetPublishingModeCount);
                }

                if (type != null && type.PublishCount != null)
                {
                    PublishCount = (DataVariable<ServiceCounterDataType>)type.PublishCount.Clone(this);
                    PublishCount.Initialize(type.PublishCount);
                }
                else if (instance != null && instance.PublishCount != null)
                {
                    PublishCount = (DataVariable<ServiceCounterDataType>)instance.PublishCount.Clone(this);
                    PublishCount.Initialize(instance.PublishCount);
                }

                if (type != null && type.RepublishCount != null)
                {
                    RepublishCount = (DataVariable<ServiceCounterDataType>)type.RepublishCount.Clone(this);
                    RepublishCount.Initialize(type.RepublishCount);
                }
                else if (instance != null && instance.RepublishCount != null)
                {
                    RepublishCount = (DataVariable<ServiceCounterDataType>)instance.RepublishCount.Clone(this);
                    RepublishCount.Initialize(instance.RepublishCount);
                }

                if (type != null && type.TransferSubscriptionsCount != null)
                {
                    TransferSubscriptionsCount = (DataVariable<ServiceCounterDataType>)type.TransferSubscriptionsCount.Clone(this);
                    TransferSubscriptionsCount.Initialize(type.TransferSubscriptionsCount);
                }
                else if (instance != null && instance.TransferSubscriptionsCount != null)
                {
                    TransferSubscriptionsCount = (DataVariable<ServiceCounterDataType>)instance.TransferSubscriptionsCount.Clone(this);
                    TransferSubscriptionsCount.Initialize(instance.TransferSubscriptionsCount);
                }

                if (type != null && type.DeleteSubscriptionsCount != null)
                {
                    DeleteSubscriptionsCount = (DataVariable<ServiceCounterDataType>)type.DeleteSubscriptionsCount.Clone(this);
                    DeleteSubscriptionsCount.Initialize(type.DeleteSubscriptionsCount);
                }
                else if (instance != null && instance.DeleteSubscriptionsCount != null)
                {
                    DeleteSubscriptionsCount = (DataVariable<ServiceCounterDataType>)instance.DeleteSubscriptionsCount.Clone(this);
                    DeleteSubscriptionsCount.Initialize(instance.DeleteSubscriptionsCount);
                }

                if (type != null && type.AddNodesCount != null)
                {
                    AddNodesCount = (DataVariable<ServiceCounterDataType>)type.AddNodesCount.Clone(this);
                    AddNodesCount.Initialize(type.AddNodesCount);
                }
                else if (instance != null && instance.AddNodesCount != null)
                {
                    AddNodesCount = (DataVariable<ServiceCounterDataType>)instance.AddNodesCount.Clone(this);
                    AddNodesCount.Initialize(instance.AddNodesCount);
                }

                if (type != null && type.AddReferencesCount != null)
                {
                    AddReferencesCount = (DataVariable<ServiceCounterDataType>)type.AddReferencesCount.Clone(this);
                    AddReferencesCount.Initialize(type.AddReferencesCount);
                }
                else if (instance != null && instance.AddReferencesCount != null)
                {
                    AddReferencesCount = (DataVariable<ServiceCounterDataType>)instance.AddReferencesCount.Clone(this);
                    AddReferencesCount.Initialize(instance.AddReferencesCount);
                }

                if (type != null && type.DeleteNodesCount != null)
                {
                    DeleteNodesCount = (DataVariable<ServiceCounterDataType>)type.DeleteNodesCount.Clone(this);
                    DeleteNodesCount.Initialize(type.DeleteNodesCount);
                }
                else if (instance != null && instance.DeleteNodesCount != null)
                {
                    DeleteNodesCount = (DataVariable<ServiceCounterDataType>)instance.DeleteNodesCount.Clone(this);
                    DeleteNodesCount.Initialize(instance.DeleteNodesCount);
                }

                if (type != null && type.DeleteReferencesCount != null)
                {
                    DeleteReferencesCount = (DataVariable<ServiceCounterDataType>)type.DeleteReferencesCount.Clone(this);
                    DeleteReferencesCount.Initialize(type.DeleteReferencesCount);
                }
                else if (instance != null && instance.DeleteReferencesCount != null)
                {
                    DeleteReferencesCount = (DataVariable<ServiceCounterDataType>)instance.DeleteReferencesCount.Clone(this);
                    DeleteReferencesCount.Initialize(instance.DeleteReferencesCount);
                }

                if (type != null && type.BrowseCount != null)
                {
                    BrowseCount = (DataVariable<ServiceCounterDataType>)type.BrowseCount.Clone(this);
                    BrowseCount.Initialize(type.BrowseCount);
                }
                else if (instance != null && instance.BrowseCount != null)
                {
                    BrowseCount = (DataVariable<ServiceCounterDataType>)instance.BrowseCount.Clone(this);
                    BrowseCount.Initialize(instance.BrowseCount);
                }

                if (type != null && type.BrowseNextCount != null)
                {
                    BrowseNextCount = (DataVariable<ServiceCounterDataType>)type.BrowseNextCount.Clone(this);
                    BrowseNextCount.Initialize(type.BrowseNextCount);
                }
                else if (instance != null && instance.BrowseNextCount != null)
                {
                    BrowseNextCount = (DataVariable<ServiceCounterDataType>)instance.BrowseNextCount.Clone(this);
                    BrowseNextCount.Initialize(instance.BrowseNextCount);
                }

                if (type != null && type.TranslateBrowsePathsToNodeIdsCount != null)
                {
                    TranslateBrowsePathsToNodeIdsCount = (DataVariable<ServiceCounterDataType>)type.TranslateBrowsePathsToNodeIdsCount.Clone(this);
                    TranslateBrowsePathsToNodeIdsCount.Initialize(type.TranslateBrowsePathsToNodeIdsCount);
                }
                else if (instance != null && instance.TranslateBrowsePathsToNodeIdsCount != null)
                {
                    TranslateBrowsePathsToNodeIdsCount = (DataVariable<ServiceCounterDataType>)instance.TranslateBrowsePathsToNodeIdsCount.Clone(this);
                    TranslateBrowsePathsToNodeIdsCount.Initialize(instance.TranslateBrowsePathsToNodeIdsCount);
                }

                if (type != null && type.QueryFirstCount != null)
                {
                    QueryFirstCount = (DataVariable<ServiceCounterDataType>)type.QueryFirstCount.Clone(this);
                    QueryFirstCount.Initialize(type.QueryFirstCount);
                }
                else if (instance != null && instance.QueryFirstCount != null)
                {
                    QueryFirstCount = (DataVariable<ServiceCounterDataType>)instance.QueryFirstCount.Clone(this);
                    QueryFirstCount.Initialize(instance.QueryFirstCount);
                }

                if (type != null && type.QueryNextCount != null)
                {
                    QueryNextCount = (DataVariable<ServiceCounterDataType>)type.QueryNextCount.Clone(this);
                    QueryNextCount.Initialize(type.QueryNextCount);
                }
                else if (instance != null && instance.QueryNextCount != null)
                {
                    QueryNextCount = (DataVariable<ServiceCounterDataType>)instance.QueryNextCount.Clone(this);
                    QueryNextCount.Initialize(instance.QueryNextCount);
                }

                if (type != null && type.RegisterNodesCount != null)
                {
                    RegisterNodesCount = (DataVariable<ServiceCounterDataType>)type.RegisterNodesCount.Clone(this);
                    RegisterNodesCount.Initialize(type.RegisterNodesCount);
                }
                else if (instance != null && instance.RegisterNodesCount != null)
                {
                    RegisterNodesCount = (DataVariable<ServiceCounterDataType>)instance.RegisterNodesCount.Clone(this);
                    RegisterNodesCount.Initialize(instance.RegisterNodesCount);
                }

                if (type != null && type.UnregisterNodesCount != null)
                {
                    UnregisterNodesCount = (DataVariable<ServiceCounterDataType>)type.UnregisterNodesCount.Clone(this);
                    UnregisterNodesCount.Initialize(type.UnregisterNodesCount);
                }
                else if (instance != null && instance.UnregisterNodesCount != null)
                {
                    UnregisterNodesCount = (DataVariable<ServiceCounterDataType>)instance.UnregisterNodesCount.Clone(this);
                    UnregisterNodesCount.Initialize(instance.UnregisterNodesCount);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_sessionId = DataVariable<NodeId>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.SessionId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_SessionId);

            m_sessionName = DataVariable<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.SessionName, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_SessionName);

            m_clientDescription = DataVariable<ApplicationDescription>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ClientDescription, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_ClientDescription);

            m_serverUri = DataVariable<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ServerUri, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_ServerUri);

            m_endpointUrl = DataVariable<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.EndpointUrl, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_EndpointUrl);

            m_localeIds = DataVariable<IList<string>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.LocaleIds, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_LocaleIds);

            m_actualSessionTimeout = DataVariable<double>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ActualSessionTimeout, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_ActualSessionTimeout);

            m_maxResponseMessageSize = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.MaxResponseMessageSize, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_MaxResponseMessageSize);

            m_clientConnectionTime = DataVariable<DateTime>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ClientConnectionTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_ClientConnectionTime);

            m_clientLastContactTime = DataVariable<DateTime>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ClientLastContactTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_ClientLastContactTime);

            m_currentSubscriptionsCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.CurrentSubscriptionsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_CurrentSubscriptionsCount);

            m_currentMonitoredItemsCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.CurrentMonitoredItemsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_CurrentMonitoredItemsCount);

            m_currentPublishRequestsInQueue = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.CurrentPublishRequestsInQueue, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_CurrentPublishRequestsInQueue);

            m_currentPublishTimerExpirations = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.CurrentPublishTimerExpirations, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_CurrentPublishTimerExpirations);

            m_keepAliveCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.KeepAliveCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_KeepAliveCount);

            m_currentRepublishRequestsInQueue = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.CurrentRepublishRequestsInQueue, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_CurrentRepublishRequestsInQueue);

            m_maxRepublishRequestsInQueue = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.MaxRepublishRequestsInQueue, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_MaxRepublishRequestsInQueue);

            m_republishCounter = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.RepublishCounter, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_RepublishCounter);

            m_publishingCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.PublishingCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_PublishingCount);

            m_publishingQueueOverflowCount = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.PublishingQueueOverflowCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_PublishingQueueOverflowCount);

            m_readCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ReadCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_ReadCount);

            m_historyReadCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.HistoryReadCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_HistoryReadCount);

            m_writeCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.WriteCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_WriteCount);

            m_historyUpdateCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.HistoryUpdateCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_HistoryUpdateCount);

            m_callCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.CallCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_CallCount);

            m_createMonitoredItemsCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.CreateMonitoredItemsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_CreateMonitoredItemsCount);

            m_modifyMonitoredItemsCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ModifyMonitoredItemsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_ModifyMonitoredItemsCount);

            m_setMonitoringModeCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.SetMonitoringModeCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_SetMonitoringModeCount);

            m_setTriggeringCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.SetTriggeringCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_SetTriggeringCount);

            m_deleteMonitoredItemsCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.DeleteMonitoredItemsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_DeleteMonitoredItemsCount);

            m_createSubscriptionCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.CreateSubscriptionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_CreateSubscriptionCount);

            m_modifySubscriptionCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ModifySubscriptionCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_ModifySubscriptionCount);

            m_setPublishingModeCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.SetPublishingModeCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_SetPublishingModeCount);

            m_publishCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.PublishCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_PublishCount);

            m_republishCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.RepublishCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_RepublishCount);

            m_transferSubscriptionsCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.TransferSubscriptionsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_TransferSubscriptionsCount);

            m_deleteSubscriptionsCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.DeleteSubscriptionsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_DeleteSubscriptionsCount);

            m_addNodesCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.AddNodesCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_AddNodesCount);

            m_addReferencesCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.AddReferencesCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_AddReferencesCount);

            m_deleteNodesCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.DeleteNodesCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_DeleteNodesCount);

            m_deleteReferencesCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.DeleteReferencesCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_DeleteReferencesCount);

            m_browseCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.BrowseCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_BrowseCount);

            m_browseNextCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.BrowseNextCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_BrowseNextCount);

            m_translateBrowsePathsToNodeIdsCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.TranslateBrowsePathsToNodeIdsCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_TranslateBrowsePathsToNodeIdsCount);

            m_queryFirstCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.QueryFirstCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_QueryFirstCount);

            m_queryNextCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.QueryNextCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_QueryNextCount);

            m_registerNodesCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.RegisterNodesCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_RegisterNodesCount);

            m_unregisterNodesCount = DataVariable<ServiceCounterDataType>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.UnregisterNodesCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionDiagnosticsVariableType_UnregisterNodesCount);
        }
        
        #region Variable/DataType Conversion Functions.
        /// <summary cref="VariableSource.UpdateValueFromChild" />
        public override void UpdateValueFromChild(VariableSource child)
        {
            lock (DataLock)
            {
                SessionDiagnosticsDataType value = RawValue;

                if (value == null)
                {
                    value = new SessionDiagnosticsDataType();
                }

                switch (child.NumericId)
                {
                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_SessionId:
                    {
                        value.SessionId = SessionId.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_SessionName:
                    {
                        value.SessionName = SessionName.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_ClientDescription:
                    {
                        value.ClientDescription = ClientDescription.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_ServerUri:
                    {
                        value.ServerUri = ServerUri.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_EndpointUrl:
                    {
                        value.EndpointUrl = EndpointUrl.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_LocaleIds:
                    {
                        value.LocaleIds = new StringCollection(LocaleIds.Value);
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_ActualSessionTimeout:
                    {
                        value.ActualSessionTimeout = ActualSessionTimeout.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_ClientConnectionTime:
                    {
                        value.ClientConnectionTime = ClientConnectionTime.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_ClientLastContactTime:
                    {
                        value.ClientLastContactTime = ClientLastContactTime.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_CurrentSubscriptionsCount:
                    {
                        value.CurrentSubscriptionsCount = CurrentSubscriptionsCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_CurrentMonitoredItemsCount:
                    {
                        value.CurrentMonitoredItemsCount = CurrentMonitoredItemsCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_CurrentPublishRequestsInQueue:
                    {
                        value.CurrentPublishRequestsInQueue = CurrentPublishRequestsInQueue.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_CurrentPublishTimerExpirations:
                    {
                        value.CurrentPublishTimerExpirations = CurrentPublishTimerExpirations.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_KeepAliveCount:
                    {
                        value.KeepAliveCount = KeepAliveCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_CurrentRepublishRequestsInQueue:
                    {
                        value.CurrentRepublishRequestsInQueue = CurrentRepublishRequestsInQueue.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_MaxRepublishRequestsInQueue:
                    {
                        value.MaxRepublishRequestsInQueue = MaxRepublishRequestsInQueue.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_RepublishCounter:
                    {
                        value.RepublishCounter = RepublishCounter.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_PublishingCount:
                    {
                        value.PublishingCount = PublishingCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_PublishingQueueOverflowCount:
                    {
                        value.PublishingQueueOverflowCount = PublishingQueueOverflowCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_ReadCount:
                    {
                        value.ReadCount = ReadCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_HistoryReadCount:
                    {
                        value.HistoryReadCount = HistoryReadCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_WriteCount:
                    {
                        value.WriteCount = WriteCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_HistoryUpdateCount:
                    {
                        value.HistoryUpdateCount = HistoryUpdateCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_CallCount:
                    {
                        value.CallCount = CallCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_CreateMonitoredItemsCount:
                    {
                        value.CreateMonitoredItemsCount = CreateMonitoredItemsCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_ModifyMonitoredItemsCount:
                    {
                        value.ModifyMonitoredItemsCount = ModifyMonitoredItemsCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_SetMonitoringModeCount:
                    {
                        value.SetMonitoringModeCount = SetMonitoringModeCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_SetTriggeringCount:
                    {
                        value.SetTriggeringCount = SetTriggeringCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_DeleteMonitoredItemsCount:
                    {
                        value.DeleteMonitoredItemsCount = DeleteMonitoredItemsCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_CreateSubscriptionCount:
                    {
                        value.CreateSubscriptionCount = CreateSubscriptionCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_ModifySubscriptionCount:
                    {
                        value.ModifySubscriptionCount = ModifySubscriptionCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_SetPublishingModeCount:
                    {
                        value.SetPublishingModeCount = SetPublishingModeCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_PublishCount:
                    {
                        value.PublishCount = PublishCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_RepublishCount:
                    {
                        value.RepublishCount = RepublishCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_TransferSubscriptionsCount:
                    {
                        value.TransferSubscriptionsCount = TransferSubscriptionsCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_DeleteSubscriptionsCount:
                    {
                        value.DeleteSubscriptionsCount = DeleteSubscriptionsCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_AddNodesCount:
                    {
                        value.AddNodesCount = AddNodesCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_AddReferencesCount:
                    {
                        value.AddReferencesCount = AddReferencesCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_DeleteNodesCount:
                    {
                        value.DeleteNodesCount = DeleteNodesCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_DeleteReferencesCount:
                    {
                        value.DeleteReferencesCount = DeleteReferencesCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_BrowseCount:
                    {
                        value.BrowseCount = BrowseCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_BrowseNextCount:
                    {
                        value.BrowseNextCount = BrowseNextCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_TranslateBrowsePathsToNodeIdsCount:
                    {
                        value.TranslateBrowsePathsToNodeIdsCount = TranslateBrowsePathsToNodeIdsCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_QueryFirstCount:
                    {
                        value.QueryFirstCount = QueryFirstCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_QueryNextCount:
                    {
                        value.QueryNextCount = QueryNextCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_RegisterNodesCount:
                    {
                        value.RegisterNodesCount = RegisterNodesCount.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionDiagnosticsVariableType_UnregisterNodesCount:
                    {
                        value.UnregisterNodesCount = UnregisterNodesCount.Value;
                        break;
                    }

                    default:
                    {
                        return;
                    }
                }

                // triggers a data change.
                Value = value;
            }
        }

        /// <summary cref="VariableSource.UpdateChildrenFromValue" />
        public override void UpdateChildrenFromValue()
        {
            lock (DataLock)
            {
                SessionDiagnosticsDataType value = RawValue;

                if (value == null)
                {
                    RawValue = value = new SessionDiagnosticsDataType();
                }

                SessionId.Value = value.SessionId;
                SessionName.Value = value.SessionName;
                ClientDescription.Value = value.ClientDescription;
                ServerUri.Value = value.ServerUri;
                EndpointUrl.Value = value.EndpointUrl;
                LocaleIds.Value = new StringCollection(value.LocaleIds);
                ActualSessionTimeout.Value = value.ActualSessionTimeout;
                ClientConnectionTime.Value = value.ClientConnectionTime;
                ClientLastContactTime.Value = value.ClientLastContactTime;
                CurrentSubscriptionsCount.Value = value.CurrentSubscriptionsCount;
                CurrentMonitoredItemsCount.Value = value.CurrentMonitoredItemsCount;
                CurrentPublishRequestsInQueue.Value = value.CurrentPublishRequestsInQueue;
                CurrentPublishTimerExpirations.Value = value.CurrentPublishTimerExpirations;
                KeepAliveCount.Value = value.KeepAliveCount;
                CurrentRepublishRequestsInQueue.Value = value.CurrentRepublishRequestsInQueue;
                MaxRepublishRequestsInQueue.Value = value.MaxRepublishRequestsInQueue;
                RepublishCounter.Value = value.RepublishCounter;
                PublishingCount.Value = value.PublishingCount;
                PublishingQueueOverflowCount.Value = value.PublishingQueueOverflowCount;
                ReadCount.Value = value.ReadCount;
                HistoryReadCount.Value = value.HistoryReadCount;
                WriteCount.Value = value.WriteCount;
                HistoryUpdateCount.Value = value.HistoryUpdateCount;
                CallCount.Value = value.CallCount;
                CreateMonitoredItemsCount.Value = value.CreateMonitoredItemsCount;
                ModifyMonitoredItemsCount.Value = value.ModifyMonitoredItemsCount;
                SetMonitoringModeCount.Value = value.SetMonitoringModeCount;
                SetTriggeringCount.Value = value.SetTriggeringCount;
                DeleteMonitoredItemsCount.Value = value.DeleteMonitoredItemsCount;
                CreateSubscriptionCount.Value = value.CreateSubscriptionCount;
                ModifySubscriptionCount.Value = value.ModifySubscriptionCount;
                SetPublishingModeCount.Value = value.SetPublishingModeCount;
                PublishCount.Value = value.PublishCount;
                RepublishCount.Value = value.RepublishCount;
                TransferSubscriptionsCount.Value = value.TransferSubscriptionsCount;
                DeleteSubscriptionsCount.Value = value.DeleteSubscriptionsCount;
                AddNodesCount.Value = value.AddNodesCount;
                AddReferencesCount.Value = value.AddReferencesCount;
                DeleteNodesCount.Value = value.DeleteNodesCount;
                DeleteReferencesCount.Value = value.DeleteReferencesCount;
                BrowseCount.Value = value.BrowseCount;
                BrowseNextCount.Value = value.BrowseNextCount;
                TranslateBrowsePathsToNodeIdsCount.Value = value.TranslateBrowsePathsToNodeIdsCount;
                QueryFirstCount.Value = value.QueryFirstCount;
                QueryNextCount.Value = value.QueryNextCount;
                RegisterNodesCount.Value = value.RegisterNodesCount;
                UnregisterNodesCount.Value = value.UnregisterNodesCount;
            }
        }
        #endregion
        #endregion

        #region Private Fields
        private SessionDiagnosticsVariableType m_typeDefinition;
        DataVariable<NodeId> m_sessionId;
        DataVariable<string> m_sessionName;
        DataVariable<ApplicationDescription> m_clientDescription;
        DataVariable<string> m_serverUri;
        DataVariable<string> m_endpointUrl;
        DataVariable<IList<string>> m_localeIds;
        DataVariable<double> m_actualSessionTimeout;
        DataVariable<uint> m_maxResponseMessageSize;
        DataVariable<DateTime> m_clientConnectionTime;
        DataVariable<DateTime> m_clientLastContactTime;
        DataVariable<uint> m_currentSubscriptionsCount;
        DataVariable<uint> m_currentMonitoredItemsCount;
        DataVariable<uint> m_currentPublishRequestsInQueue;
        DataVariable<uint> m_currentPublishTimerExpirations;
        DataVariable<uint> m_keepAliveCount;
        DataVariable<uint> m_currentRepublishRequestsInQueue;
        DataVariable<uint> m_maxRepublishRequestsInQueue;
        DataVariable<uint> m_republishCounter;
        DataVariable<uint> m_publishingCount;
        DataVariable<uint> m_publishingQueueOverflowCount;
        DataVariable<ServiceCounterDataType> m_readCount;
        DataVariable<ServiceCounterDataType> m_historyReadCount;
        DataVariable<ServiceCounterDataType> m_writeCount;
        DataVariable<ServiceCounterDataType> m_historyUpdateCount;
        DataVariable<ServiceCounterDataType> m_callCount;
        DataVariable<ServiceCounterDataType> m_createMonitoredItemsCount;
        DataVariable<ServiceCounterDataType> m_modifyMonitoredItemsCount;
        DataVariable<ServiceCounterDataType> m_setMonitoringModeCount;
        DataVariable<ServiceCounterDataType> m_setTriggeringCount;
        DataVariable<ServiceCounterDataType> m_deleteMonitoredItemsCount;
        DataVariable<ServiceCounterDataType> m_createSubscriptionCount;
        DataVariable<ServiceCounterDataType> m_modifySubscriptionCount;
        DataVariable<ServiceCounterDataType> m_setPublishingModeCount;
        DataVariable<ServiceCounterDataType> m_publishCount;
        DataVariable<ServiceCounterDataType> m_republishCount;
        DataVariable<ServiceCounterDataType> m_transferSubscriptionsCount;
        DataVariable<ServiceCounterDataType> m_deleteSubscriptionsCount;
        DataVariable<ServiceCounterDataType> m_addNodesCount;
        DataVariable<ServiceCounterDataType> m_addReferencesCount;
        DataVariable<ServiceCounterDataType> m_deleteNodesCount;
        DataVariable<ServiceCounterDataType> m_deleteReferencesCount;
        DataVariable<ServiceCounterDataType> m_browseCount;
        DataVariable<ServiceCounterDataType> m_browseNextCount;
        DataVariable<ServiceCounterDataType> m_translateBrowsePathsToNodeIdsCount;
        DataVariable<ServiceCounterDataType> m_queryFirstCount;
        DataVariable<ServiceCounterDataType> m_queryNextCount;
        DataVariable<ServiceCounterDataType> m_registerNodesCount;
        DataVariable<ServiceCounterDataType> m_unregisterNodesCount;
        #endregion
    }
    #endregion

    #region SessionSecurityDiagnosticsArrayType Class
    /// <summary>
    /// Represents the SessionSecurityDiagnosticsArrayType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class SessionSecurityDiagnosticsArrayType : VariableTypeSource<IList<SessionSecurityDiagnosticsDataType>>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public SessionSecurityDiagnosticsArrayType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.VariableTypes.SessionSecurityDiagnosticsArrayType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.SessionSecurityDiagnosticsArrayType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.VariableTypes.BaseDataVariableType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new SessionSecurityDiagnosticsArrayType FindSource(IServerInternal server)
        {
            SessionSecurityDiagnosticsArrayType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.VariableTypes.SessionSecurityDiagnosticsArrayType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as SessionSecurityDiagnosticsArrayType;

                if (type != null)
                {
                    return type;
                }

                type = new SessionSecurityDiagnosticsArrayType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                SessionSecurityDiagnosticsArrayType clone = new SessionSecurityDiagnosticsArrayType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                SessionSecurityDiagnosticsArrayType type = source as SessionSecurityDiagnosticsArrayType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endregion

    #region SessionSecurityDiagnosticsArray Class
    /// <summary>
    /// Represents an instance of the SessionSecurityDiagnosticsArrayType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class SessionSecurityDiagnosticsArray : DataVariable<IList<SessionSecurityDiagnosticsDataType>>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected SessionSecurityDiagnosticsArray(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = SessionSecurityDiagnosticsArrayType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new SessionSecurityDiagnosticsArray Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            SessionSecurityDiagnosticsArray instance = new SessionSecurityDiagnosticsArray(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new SessionSecurityDiagnosticsArray Construct(IServerInternal server)
        {
            SessionSecurityDiagnosticsArray instance = new SessionSecurityDiagnosticsArray(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                SessionSecurityDiagnosticsArray clone = new SessionSecurityDiagnosticsArray(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                SessionSecurityDiagnosticsArray instance = source as SessionSecurityDiagnosticsArray;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                SessionSecurityDiagnosticsArrayType type = source as SessionSecurityDiagnosticsArrayType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private SessionSecurityDiagnosticsArrayType m_typeDefinition;
        #endregion
    }
    #endregion

    #region SessionSecurityDiagnosticsType Class
    /// <summary>
    /// Represents the SessionSecurityDiagnosticsType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class SessionSecurityDiagnosticsType : VariableTypeSource<SessionSecurityDiagnosticsDataType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public SessionSecurityDiagnosticsType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.VariableTypes.SessionSecurityDiagnosticsType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.SessionSecurityDiagnosticsType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.VariableTypes.BaseDataVariableType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new SessionSecurityDiagnosticsType FindSource(IServerInternal server)
        {
            SessionSecurityDiagnosticsType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.VariableTypes.SessionSecurityDiagnosticsType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as SessionSecurityDiagnosticsType;

                if (type != null)
                {
                    return type;
                }

                type = new SessionSecurityDiagnosticsType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                SessionSecurityDiagnosticsType clone = new SessionSecurityDiagnosticsType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region SessionId
        /// <summary>
        /// A description for the SessionId Variable.
        /// </summary>
        public DataVariable<NodeId> SessionId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_sessionId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_sessionId != null)
                    {
                        RemoveChild(m_sessionId);
                    }

                    m_sessionId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSessionId(DataVariable<NodeId> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SessionId = replacement;

                SessionId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SessionId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionSecurityDiagnosticsType_SessionId,
                    null);
            }
        }
        #endregion

        #region ClientUserIdOfSession
        /// <summary>
        /// A description for the ClientUserIdOfSession Variable.
        /// </summary>
        public DataVariable<string> ClientUserIdOfSession
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_clientUserIdOfSession; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_clientUserIdOfSession != null)
                    {
                        RemoveChild(m_clientUserIdOfSession);
                    }

                    m_clientUserIdOfSession = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceClientUserIdOfSession(DataVariable<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ClientUserIdOfSession = replacement;

                ClientUserIdOfSession.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ClientUserIdOfSession, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionSecurityDiagnosticsType_ClientUserIdOfSession,
                    null);
            }
        }
        #endregion

        #region ClientUserIdHistory
        /// <summary>
        /// A description for the ClientUserIdHistory Variable.
        /// </summary>
        public DataVariable<IList<string>> ClientUserIdHistory
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_clientUserIdHistory; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_clientUserIdHistory != null)
                    {
                        RemoveChild(m_clientUserIdHistory);
                    }

                    m_clientUserIdHistory = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceClientUserIdHistory(DataVariable<IList<string>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ClientUserIdHistory = replacement;

                ClientUserIdHistory.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ClientUserIdHistory, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionSecurityDiagnosticsType_ClientUserIdHistory,
                    null);
            }
        }
        #endregion

        #region AuthenticationMechanism
        /// <summary>
        /// A description for the AuthenticationMechanism Variable.
        /// </summary>
        public DataVariable<string> AuthenticationMechanism
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_authenticationMechanism; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_authenticationMechanism != null)
                    {
                        RemoveChild(m_authenticationMechanism);
                    }

                    m_authenticationMechanism = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceAuthenticationMechanism(DataVariable<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                AuthenticationMechanism = replacement;

                AuthenticationMechanism.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.AuthenticationMechanism, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionSecurityDiagnosticsType_AuthenticationMechanism,
                    null);
            }
        }
        #endregion

        #region Encoding
        /// <summary>
        /// A description for the Encoding Variable.
        /// </summary>
        public DataVariable<string> Encoding
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_encoding; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_encoding != null)
                    {
                        RemoveChild(m_encoding);
                    }

                    m_encoding = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceEncoding(DataVariable<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Encoding = replacement;

                Encoding.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Encoding, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionSecurityDiagnosticsType_Encoding,
                    null);
            }
        }
        #endregion

        #region TransportProtocol
        /// <summary>
        /// A description for the TransportProtocol Variable.
        /// </summary>
        public DataVariable<string> TransportProtocol
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_transportProtocol; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_transportProtocol != null)
                    {
                        RemoveChild(m_transportProtocol);
                    }

                    m_transportProtocol = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceTransportProtocol(DataVariable<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                TransportProtocol = replacement;

                TransportProtocol.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.TransportProtocol, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionSecurityDiagnosticsType_TransportProtocol,
                    null);
            }
        }
        #endregion

        #region SecurityMode
        /// <summary>
        /// A description for the SecurityMode Variable.
        /// </summary>
        public DataVariable<MessageSecurityMode> SecurityMode
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_securityMode; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_securityMode != null)
                    {
                        RemoveChild(m_securityMode);
                    }

                    m_securityMode = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSecurityMode(DataVariable<MessageSecurityMode> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SecurityMode = replacement;

                SecurityMode.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SecurityMode, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionSecurityDiagnosticsType_SecurityMode,
                    null);
            }
        }
        #endregion

        #region SecurityPolicyUri
        /// <summary>
        /// A description for the SecurityPolicyUri Variable.
        /// </summary>
        public DataVariable<string> SecurityPolicyUri
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_securityPolicyUri; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_securityPolicyUri != null)
                    {
                        RemoveChild(m_securityPolicyUri);
                    }

                    m_securityPolicyUri = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSecurityPolicyUri(DataVariable<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SecurityPolicyUri = replacement;

                SecurityPolicyUri.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SecurityPolicyUri, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionSecurityDiagnosticsType_SecurityPolicyUri,
                    null);
            }
        }
        #endregion

        #region ClientCertificate
        /// <summary>
        /// A description for the ClientCertificate Variable.
        /// </summary>
        public DataVariable<byte[]> ClientCertificate
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_clientCertificate; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_clientCertificate != null)
                    {
                        RemoveChild(m_clientCertificate);
                    }

                    m_clientCertificate = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceClientCertificate(DataVariable<byte[]> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ClientCertificate = replacement;

                ClientCertificate.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ClientCertificate, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionSecurityDiagnosticsType_ClientCertificate,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                SessionSecurityDiagnosticsType type = source as SessionSecurityDiagnosticsType;

                if (type != null && type.SessionId != null)
                {
                    SessionId = (DataVariable<NodeId>)type.SessionId.Clone(this);
                    SessionId.Initialize(type.SessionId);
                }

                if (type != null && type.ClientUserIdOfSession != null)
                {
                    ClientUserIdOfSession = (DataVariable<string>)type.ClientUserIdOfSession.Clone(this);
                    ClientUserIdOfSession.Initialize(type.ClientUserIdOfSession);
                }

                if (type != null && type.ClientUserIdHistory != null)
                {
                    ClientUserIdHistory = (DataVariable<IList<string>>)type.ClientUserIdHistory.Clone(this);
                    ClientUserIdHistory.Initialize(type.ClientUserIdHistory);
                }

                if (type != null && type.AuthenticationMechanism != null)
                {
                    AuthenticationMechanism = (DataVariable<string>)type.AuthenticationMechanism.Clone(this);
                    AuthenticationMechanism.Initialize(type.AuthenticationMechanism);
                }

                if (type != null && type.Encoding != null)
                {
                    Encoding = (DataVariable<string>)type.Encoding.Clone(this);
                    Encoding.Initialize(type.Encoding);
                }

                if (type != null && type.TransportProtocol != null)
                {
                    TransportProtocol = (DataVariable<string>)type.TransportProtocol.Clone(this);
                    TransportProtocol.Initialize(type.TransportProtocol);
                }

                if (type != null && type.SecurityMode != null)
                {
                    SecurityMode = (DataVariable<MessageSecurityMode>)type.SecurityMode.Clone(this);
                    SecurityMode.Initialize(type.SecurityMode);
                }

                if (type != null && type.SecurityPolicyUri != null)
                {
                    SecurityPolicyUri = (DataVariable<string>)type.SecurityPolicyUri.Clone(this);
                    SecurityPolicyUri.Initialize(type.SecurityPolicyUri);
                }

                if (type != null && type.ClientCertificate != null)
                {
                    ClientCertificate = (DataVariable<byte[]>)type.ClientCertificate.Clone(this);
                    ClientCertificate.Initialize(type.ClientCertificate);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_sessionId = DataVariable<NodeId>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionSecurityDiagnosticsType_SessionId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SessionId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionSecurityDiagnosticsType_SessionId);

            m_clientUserIdOfSession = DataVariable<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionSecurityDiagnosticsType_ClientUserIdOfSession, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ClientUserIdOfSession, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionSecurityDiagnosticsType_ClientUserIdOfSession);

            m_clientUserIdHistory = DataVariable<IList<string>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionSecurityDiagnosticsType_ClientUserIdHistory, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ClientUserIdHistory, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionSecurityDiagnosticsType_ClientUserIdHistory);

            m_authenticationMechanism = DataVariable<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionSecurityDiagnosticsType_AuthenticationMechanism, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.AuthenticationMechanism, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionSecurityDiagnosticsType_AuthenticationMechanism);

            m_encoding = DataVariable<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionSecurityDiagnosticsType_Encoding, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Encoding, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionSecurityDiagnosticsType_Encoding);

            m_transportProtocol = DataVariable<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionSecurityDiagnosticsType_TransportProtocol, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.TransportProtocol, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionSecurityDiagnosticsType_TransportProtocol);

            m_securityMode = DataVariable<MessageSecurityMode>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionSecurityDiagnosticsType_SecurityMode, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SecurityMode, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionSecurityDiagnosticsType_SecurityMode);

            m_securityPolicyUri = DataVariable<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionSecurityDiagnosticsType_SecurityPolicyUri, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SecurityPolicyUri, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionSecurityDiagnosticsType_SecurityPolicyUri);

            m_clientCertificate = DataVariable<byte[]>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SessionSecurityDiagnosticsType_ClientCertificate, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ClientCertificate, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionSecurityDiagnosticsType_ClientCertificate);
        }
        #endregion

        #region Private Fields
        DataVariable<NodeId> m_sessionId;
        DataVariable<string> m_clientUserIdOfSession;
        DataVariable<IList<string>> m_clientUserIdHistory;
        DataVariable<string> m_authenticationMechanism;
        DataVariable<string> m_encoding;
        DataVariable<string> m_transportProtocol;
        DataVariable<MessageSecurityMode> m_securityMode;
        DataVariable<string> m_securityPolicyUri;
        DataVariable<byte[]> m_clientCertificate;
        #endregion
    }
    #endregion

    #region SessionSecurityDiagnostics Class
    /// <summary>
    /// Represents an instance of the SessionSecurityDiagnosticsType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class SessionSecurityDiagnostics : DataVariable<SessionSecurityDiagnosticsDataType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected SessionSecurityDiagnostics(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = SessionSecurityDiagnosticsType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new SessionSecurityDiagnostics Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            SessionSecurityDiagnostics instance = new SessionSecurityDiagnostics(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new SessionSecurityDiagnostics Construct(IServerInternal server)
        {
            SessionSecurityDiagnostics instance = new SessionSecurityDiagnostics(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                SessionSecurityDiagnostics clone = new SessionSecurityDiagnostics(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region SessionId
        /// <summary>
        /// A description for the SessionId Variable.
        /// </summary>
        public DataVariable<NodeId> SessionId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_sessionId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_sessionId != null)
                    {
                        RemoveChild(m_sessionId);
                    }

                    m_sessionId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSessionId(DataVariable<NodeId> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SessionId = replacement;

                SessionId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SessionId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionSecurityDiagnosticsType_SessionId,
                    null);
            }
        }
        #endregion

        #region ClientUserIdOfSession
        /// <summary>
        /// A description for the ClientUserIdOfSession Variable.
        /// </summary>
        public DataVariable<string> ClientUserIdOfSession
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_clientUserIdOfSession; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_clientUserIdOfSession != null)
                    {
                        RemoveChild(m_clientUserIdOfSession);
                    }

                    m_clientUserIdOfSession = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceClientUserIdOfSession(DataVariable<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ClientUserIdOfSession = replacement;

                ClientUserIdOfSession.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ClientUserIdOfSession, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionSecurityDiagnosticsType_ClientUserIdOfSession,
                    null);
            }
        }
        #endregion

        #region ClientUserIdHistory
        /// <summary>
        /// A description for the ClientUserIdHistory Variable.
        /// </summary>
        public DataVariable<IList<string>> ClientUserIdHistory
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_clientUserIdHistory; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_clientUserIdHistory != null)
                    {
                        RemoveChild(m_clientUserIdHistory);
                    }

                    m_clientUserIdHistory = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceClientUserIdHistory(DataVariable<IList<string>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ClientUserIdHistory = replacement;

                ClientUserIdHistory.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ClientUserIdHistory, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionSecurityDiagnosticsType_ClientUserIdHistory,
                    null);
            }
        }
        #endregion

        #region AuthenticationMechanism
        /// <summary>
        /// A description for the AuthenticationMechanism Variable.
        /// </summary>
        public DataVariable<string> AuthenticationMechanism
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_authenticationMechanism; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_authenticationMechanism != null)
                    {
                        RemoveChild(m_authenticationMechanism);
                    }

                    m_authenticationMechanism = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceAuthenticationMechanism(DataVariable<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                AuthenticationMechanism = replacement;

                AuthenticationMechanism.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.AuthenticationMechanism, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionSecurityDiagnosticsType_AuthenticationMechanism,
                    null);
            }
        }
        #endregion

        #region Encoding
        /// <summary>
        /// A description for the Encoding Variable.
        /// </summary>
        public DataVariable<string> Encoding
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_encoding; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_encoding != null)
                    {
                        RemoveChild(m_encoding);
                    }

                    m_encoding = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceEncoding(DataVariable<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Encoding = replacement;

                Encoding.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Encoding, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionSecurityDiagnosticsType_Encoding,
                    null);
            }
        }
        #endregion

        #region TransportProtocol
        /// <summary>
        /// A description for the TransportProtocol Variable.
        /// </summary>
        public DataVariable<string> TransportProtocol
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_transportProtocol; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_transportProtocol != null)
                    {
                        RemoveChild(m_transportProtocol);
                    }

                    m_transportProtocol = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceTransportProtocol(DataVariable<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                TransportProtocol = replacement;

                TransportProtocol.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.TransportProtocol, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionSecurityDiagnosticsType_TransportProtocol,
                    null);
            }
        }
        #endregion

        #region SecurityMode
        /// <summary>
        /// A description for the SecurityMode Variable.
        /// </summary>
        public DataVariable<MessageSecurityMode> SecurityMode
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_securityMode; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_securityMode != null)
                    {
                        RemoveChild(m_securityMode);
                    }

                    m_securityMode = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSecurityMode(DataVariable<MessageSecurityMode> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SecurityMode = replacement;

                SecurityMode.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SecurityMode, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionSecurityDiagnosticsType_SecurityMode,
                    null);
            }
        }
        #endregion

        #region SecurityPolicyUri
        /// <summary>
        /// A description for the SecurityPolicyUri Variable.
        /// </summary>
        public DataVariable<string> SecurityPolicyUri
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_securityPolicyUri; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_securityPolicyUri != null)
                    {
                        RemoveChild(m_securityPolicyUri);
                    }

                    m_securityPolicyUri = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSecurityPolicyUri(DataVariable<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SecurityPolicyUri = replacement;

                SecurityPolicyUri.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SecurityPolicyUri, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionSecurityDiagnosticsType_SecurityPolicyUri,
                    null);
            }
        }
        #endregion

        #region ClientCertificate
        /// <summary>
        /// A description for the ClientCertificate Variable.
        /// </summary>
        public DataVariable<byte[]> ClientCertificate
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_clientCertificate; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_clientCertificate != null)
                    {
                        RemoveChild(m_clientCertificate);
                    }

                    m_clientCertificate = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceClientCertificate(DataVariable<byte[]> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ClientCertificate = replacement;

                ClientCertificate.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ClientCertificate, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SessionSecurityDiagnosticsType_ClientCertificate,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                SessionSecurityDiagnostics instance = source as SessionSecurityDiagnostics;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                SessionSecurityDiagnosticsType type = source as SessionSecurityDiagnosticsType;

                if (type != null && type.SessionId != null)
                {
                    SessionId = (DataVariable<NodeId>)type.SessionId.Clone(this);
                    SessionId.Initialize(type.SessionId);
                }
                else if (instance != null && instance.SessionId != null)
                {
                    SessionId = (DataVariable<NodeId>)instance.SessionId.Clone(this);
                    SessionId.Initialize(instance.SessionId);
                }

                if (type != null && type.ClientUserIdOfSession != null)
                {
                    ClientUserIdOfSession = (DataVariable<string>)type.ClientUserIdOfSession.Clone(this);
                    ClientUserIdOfSession.Initialize(type.ClientUserIdOfSession);
                }
                else if (instance != null && instance.ClientUserIdOfSession != null)
                {
                    ClientUserIdOfSession = (DataVariable<string>)instance.ClientUserIdOfSession.Clone(this);
                    ClientUserIdOfSession.Initialize(instance.ClientUserIdOfSession);
                }

                if (type != null && type.ClientUserIdHistory != null)
                {
                    ClientUserIdHistory = (DataVariable<IList<string>>)type.ClientUserIdHistory.Clone(this);
                    ClientUserIdHistory.Initialize(type.ClientUserIdHistory);
                }
                else if (instance != null && instance.ClientUserIdHistory != null)
                {
                    ClientUserIdHistory = (DataVariable<IList<string>>)instance.ClientUserIdHistory.Clone(this);
                    ClientUserIdHistory.Initialize(instance.ClientUserIdHistory);
                }

                if (type != null && type.AuthenticationMechanism != null)
                {
                    AuthenticationMechanism = (DataVariable<string>)type.AuthenticationMechanism.Clone(this);
                    AuthenticationMechanism.Initialize(type.AuthenticationMechanism);
                }
                else if (instance != null && instance.AuthenticationMechanism != null)
                {
                    AuthenticationMechanism = (DataVariable<string>)instance.AuthenticationMechanism.Clone(this);
                    AuthenticationMechanism.Initialize(instance.AuthenticationMechanism);
                }

                if (type != null && type.Encoding != null)
                {
                    Encoding = (DataVariable<string>)type.Encoding.Clone(this);
                    Encoding.Initialize(type.Encoding);
                }
                else if (instance != null && instance.Encoding != null)
                {
                    Encoding = (DataVariable<string>)instance.Encoding.Clone(this);
                    Encoding.Initialize(instance.Encoding);
                }

                if (type != null && type.TransportProtocol != null)
                {
                    TransportProtocol = (DataVariable<string>)type.TransportProtocol.Clone(this);
                    TransportProtocol.Initialize(type.TransportProtocol);
                }
                else if (instance != null && instance.TransportProtocol != null)
                {
                    TransportProtocol = (DataVariable<string>)instance.TransportProtocol.Clone(this);
                    TransportProtocol.Initialize(instance.TransportProtocol);
                }

                if (type != null && type.SecurityMode != null)
                {
                    SecurityMode = (DataVariable<MessageSecurityMode>)type.SecurityMode.Clone(this);
                    SecurityMode.Initialize(type.SecurityMode);
                }
                else if (instance != null && instance.SecurityMode != null)
                {
                    SecurityMode = (DataVariable<MessageSecurityMode>)instance.SecurityMode.Clone(this);
                    SecurityMode.Initialize(instance.SecurityMode);
                }

                if (type != null && type.SecurityPolicyUri != null)
                {
                    SecurityPolicyUri = (DataVariable<string>)type.SecurityPolicyUri.Clone(this);
                    SecurityPolicyUri.Initialize(type.SecurityPolicyUri);
                }
                else if (instance != null && instance.SecurityPolicyUri != null)
                {
                    SecurityPolicyUri = (DataVariable<string>)instance.SecurityPolicyUri.Clone(this);
                    SecurityPolicyUri.Initialize(instance.SecurityPolicyUri);
                }

                if (type != null && type.ClientCertificate != null)
                {
                    ClientCertificate = (DataVariable<byte[]>)type.ClientCertificate.Clone(this);
                    ClientCertificate.Initialize(type.ClientCertificate);
                }
                else if (instance != null && instance.ClientCertificate != null)
                {
                    ClientCertificate = (DataVariable<byte[]>)instance.ClientCertificate.Clone(this);
                    ClientCertificate.Initialize(instance.ClientCertificate);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_sessionId = DataVariable<NodeId>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.SessionId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionSecurityDiagnosticsType_SessionId);

            m_clientUserIdOfSession = DataVariable<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ClientUserIdOfSession, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionSecurityDiagnosticsType_ClientUserIdOfSession);

            m_clientUserIdHistory = DataVariable<IList<string>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ClientUserIdHistory, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionSecurityDiagnosticsType_ClientUserIdHistory);

            m_authenticationMechanism = DataVariable<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.AuthenticationMechanism, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionSecurityDiagnosticsType_AuthenticationMechanism);

            m_encoding = DataVariable<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Encoding, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionSecurityDiagnosticsType_Encoding);

            m_transportProtocol = DataVariable<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.TransportProtocol, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionSecurityDiagnosticsType_TransportProtocol);

            m_securityMode = DataVariable<MessageSecurityMode>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.SecurityMode, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionSecurityDiagnosticsType_SecurityMode);

            m_securityPolicyUri = DataVariable<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.SecurityPolicyUri, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionSecurityDiagnosticsType_SecurityPolicyUri);

            m_clientCertificate = DataVariable<byte[]>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ClientCertificate, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SessionSecurityDiagnosticsType_ClientCertificate);
        }
        
        #region Variable/DataType Conversion Functions.
        /// <summary cref="VariableSource.UpdateValueFromChild" />
        public override void UpdateValueFromChild(VariableSource child)
        {
            lock (DataLock)
            {
                SessionSecurityDiagnosticsDataType value = RawValue;

                if (value == null)
                {
                    value = new SessionSecurityDiagnosticsDataType();
                }

                switch (child.NumericId)
                {
                    case Opc.Ua.Variables.SessionSecurityDiagnosticsType_SessionId:
                    {
                        value.SessionId = SessionId.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionSecurityDiagnosticsType_ClientUserIdOfSession:
                    {
                        value.ClientUserIdOfSession = ClientUserIdOfSession.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionSecurityDiagnosticsType_ClientUserIdHistory:
                    {
                        value.ClientUserIdHistory = new StringCollection(ClientUserIdHistory.Value);
                        break;
                    }

                    case Opc.Ua.Variables.SessionSecurityDiagnosticsType_AuthenticationMechanism:
                    {
                        value.AuthenticationMechanism = AuthenticationMechanism.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionSecurityDiagnosticsType_Encoding:
                    {
                        value.Encoding = Encoding.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionSecurityDiagnosticsType_TransportProtocol:
                    {
                        value.TransportProtocol = TransportProtocol.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionSecurityDiagnosticsType_SecurityMode:
                    {
                        value.SecurityMode = SecurityMode.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionSecurityDiagnosticsType_SecurityPolicyUri:
                    {
                        value.SecurityPolicyUri = SecurityPolicyUri.Value;
                        break;
                    }

                    case Opc.Ua.Variables.SessionSecurityDiagnosticsType_ClientCertificate:
                    {
                        value.ClientCertificate = ClientCertificate.Value;
                        break;
                    }

                    default:
                    {
                        return;
                    }
                }

                // triggers a data change.
                Value = value;
            }
        }

        /// <summary cref="VariableSource.UpdateChildrenFromValue" />
        public override void UpdateChildrenFromValue()
        {
            lock (DataLock)
            {
                SessionSecurityDiagnosticsDataType value = RawValue;

                if (value == null)
                {
                    RawValue = value = new SessionSecurityDiagnosticsDataType();
                }

                SessionId.Value = value.SessionId;
                ClientUserIdOfSession.Value = value.ClientUserIdOfSession;
                ClientUserIdHistory.Value = new StringCollection(value.ClientUserIdHistory);
                AuthenticationMechanism.Value = value.AuthenticationMechanism;
                Encoding.Value = value.Encoding;
                TransportProtocol.Value = value.TransportProtocol;
                SecurityMode.Value = value.SecurityMode;
                SecurityPolicyUri.Value = value.SecurityPolicyUri;
                ClientCertificate.Value = value.ClientCertificate;
            }
        }
        #endregion
        #endregion

        #region Private Fields
        private SessionSecurityDiagnosticsType m_typeDefinition;
        DataVariable<NodeId> m_sessionId;
        DataVariable<string> m_clientUserIdOfSession;
        DataVariable<IList<string>> m_clientUserIdHistory;
        DataVariable<string> m_authenticationMechanism;
        DataVariable<string> m_encoding;
        DataVariable<string> m_transportProtocol;
        DataVariable<MessageSecurityMode> m_securityMode;
        DataVariable<string> m_securityPolicyUri;
        DataVariable<byte[]> m_clientCertificate;
        #endregion
    }
    #endregion

    #region StateVariableType Class
    /// <summary>
    /// Represents the StateVariableType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class StateVariableType : VariableTypeSource<LocalizedText>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public StateVariableType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.VariableTypes.StateVariableType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.StateVariableType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.VariableTypes.BaseDataVariableType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new StateVariableType FindSource(IServerInternal server)
        {
            StateVariableType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.VariableTypes.StateVariableType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as StateVariableType;

                if (type != null)
                {
                    return type;
                }

                type = new StateVariableType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                StateVariableType clone = new StateVariableType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region Id
        /// <summary>
        /// A description for the Id Variable.
        /// </summary>
        public DataVariable<object> Id
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_id; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_id != null)
                    {
                        RemoveChild(m_id);
                    }

                    m_id = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceId(DataVariable<object> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Id = replacement;

                Id.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Id, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.StateVariableType_Id,
                    null);
            }
        }
        #endregion

        #region Name
        /// <summary>
        /// A description for the Name Variable.
        /// </summary>
        public DataVariable<QualifiedName> Name
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_name; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_name != null)
                    {
                        RemoveChild(m_name);
                    }

                    m_name = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceName(DataVariable<QualifiedName> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Name = replacement;

                Name.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Name, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.StateVariableType_Name,
                    null);
            }
        }
        #endregion

        #region Number
        /// <summary>
        /// A description for the Number Variable.
        /// </summary>
        public DataVariable<uint> Number
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_number; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_number != null)
                    {
                        RemoveChild(m_number);
                    }

                    m_number = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceNumber(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Number = replacement;

                Number.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Number, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.StateVariableType_Number,
                    null);
            }
        }
        #endregion

        #region EffectiveDisplayName
        /// <summary>
        /// A description for the EffectiveDisplayName Variable.
        /// </summary>
        public DataVariable<LocalizedText> EffectiveDisplayName
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_effectiveDisplayName; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_effectiveDisplayName != null)
                    {
                        RemoveChild(m_effectiveDisplayName);
                    }

                    m_effectiveDisplayName = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceEffectiveDisplayName(DataVariable<LocalizedText> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                EffectiveDisplayName = replacement;

                EffectiveDisplayName.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.EffectiveDisplayName, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.StateVariableType_EffectiveDisplayName,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                StateVariableType type = source as StateVariableType;

                if (type != null && type.Id != null)
                {
                    Id = (DataVariable<object>)type.Id.Clone(this);
                    Id.Initialize(type.Id);
                }

                if (type != null && type.Name != null)
                {
                    Name = (DataVariable<QualifiedName>)type.Name.Clone(this);
                    Name.Initialize(type.Name);
                }

                if (type != null && type.Number != null)
                {
                    Number = (DataVariable<uint>)type.Number.Clone(this);
                    Number.Initialize(type.Number);
                }

                if (type != null && type.EffectiveDisplayName != null)
                {
                    EffectiveDisplayName = (DataVariable<LocalizedText>)type.EffectiveDisplayName.Clone(this);
                    EffectiveDisplayName.Initialize(type.EffectiveDisplayName);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_id = DataVariable<object>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.StateVariableType_Id, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Id, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.StateVariableType_Id);

            m_name = DataVariable<QualifiedName>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.StateVariableType_Name, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Name, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.StateVariableType_Name);

            m_number = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.StateVariableType_Number, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Number, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.StateVariableType_Number);

            m_effectiveDisplayName = DataVariable<LocalizedText>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.StateVariableType_EffectiveDisplayName, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.EffectiveDisplayName, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.StateVariableType_EffectiveDisplayName);
        }
        #endregion

        #region Private Fields
        DataVariable<object> m_id;
        DataVariable<QualifiedName> m_name;
        DataVariable<uint> m_number;
        DataVariable<LocalizedText> m_effectiveDisplayName;
        #endregion
    }
    #endregion

    #region StateVariable Class
    /// <summary>
    /// Represents an instance of the StateVariableType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class StateVariable : DataVariable<LocalizedText>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected StateVariable(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = StateVariableType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new StateVariable Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            StateVariable instance = new StateVariable(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new StateVariable Construct(IServerInternal server)
        {
            StateVariable instance = new StateVariable(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                StateVariable clone = new StateVariable(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region Id
        /// <summary>
        /// A description for the Id Variable.
        /// </summary>
        public DataVariable<object> Id
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_id; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_id != null)
                    {
                        RemoveChild(m_id);
                    }

                    m_id = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceId(DataVariable<object> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Id = replacement;

                Id.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Id, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.StateVariableType_Id,
                    null);
            }
        }
        #endregion

        #region Name
        /// <summary>
        /// A description for the Name Variable.
        /// </summary>
        public DataVariable<QualifiedName> Name
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_name; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_name != null)
                    {
                        RemoveChild(m_name);
                    }

                    m_name = value; 
                }
            }
        }

        /// <summary>
        /// Whether the Name node is specified for the node.
        /// </summary>
        public bool NameSpecified
        {
        	get 
            { 
                lock (DataLock)
                {
                    return m_name != null; 
                }
            }
        }

        /// <summary>
        /// Specifies the optional child.
        /// </summary>
        public void SpecifyName(DataVariable<QualifiedName> replacement)
        {
            CheckNodeManagerState();

            lock (DataLock)
            {
                if (NameSpecified)
                {
                    Name = (DataVariable<QualifiedName>)DeleteChild(m_name);
                }

                if (replacement != null)
                {       
                    Name = replacement;

                    Name.Create(
                        this.NodeId, 
                        new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                        null,
                        new QualifiedName(Opc.Ua.BrowseNames.Name, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                        Opc.Ua.Variables.StateVariableType_Name,
                        null);
                }
            }
        }
        #endregion

        #region Number
        /// <summary>
        /// A description for the Number Variable.
        /// </summary>
        public DataVariable<uint> Number
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_number; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_number != null)
                    {
                        RemoveChild(m_number);
                    }

                    m_number = value; 
                }
            }
        }

        /// <summary>
        /// Whether the Number node is specified for the node.
        /// </summary>
        public bool NumberSpecified
        {
        	get 
            { 
                lock (DataLock)
                {
                    return m_number != null; 
                }
            }
        }

        /// <summary>
        /// Specifies the optional child.
        /// </summary>
        public void SpecifyNumber(DataVariable<uint> replacement)
        {
            CheckNodeManagerState();

            lock (DataLock)
            {
                if (NumberSpecified)
                {
                    Number = (DataVariable<uint>)DeleteChild(m_number);
                }

                if (replacement != null)
                {       
                    Number = replacement;

                    Number.Create(
                        this.NodeId, 
                        new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                        null,
                        new QualifiedName(Opc.Ua.BrowseNames.Number, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                        Opc.Ua.Variables.StateVariableType_Number,
                        null);
                }
            }
        }
        #endregion

        #region EffectiveDisplayName
        /// <summary>
        /// A description for the EffectiveDisplayName Variable.
        /// </summary>
        public DataVariable<LocalizedText> EffectiveDisplayName
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_effectiveDisplayName; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_effectiveDisplayName != null)
                    {
                        RemoveChild(m_effectiveDisplayName);
                    }

                    m_effectiveDisplayName = value; 
                }
            }
        }

        /// <summary>
        /// Whether the EffectiveDisplayName node is specified for the node.
        /// </summary>
        public bool EffectiveDisplayNameSpecified
        {
        	get 
            { 
                lock (DataLock)
                {
                    return m_effectiveDisplayName != null; 
                }
            }
        }

        /// <summary>
        /// Specifies the optional child.
        /// </summary>
        public void SpecifyEffectiveDisplayName(DataVariable<LocalizedText> replacement)
        {
            CheckNodeManagerState();

            lock (DataLock)
            {
                if (EffectiveDisplayNameSpecified)
                {
                    EffectiveDisplayName = (DataVariable<LocalizedText>)DeleteChild(m_effectiveDisplayName);
                }

                if (replacement != null)
                {       
                    EffectiveDisplayName = replacement;

                    EffectiveDisplayName.Create(
                        this.NodeId, 
                        new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                        null,
                        new QualifiedName(Opc.Ua.BrowseNames.EffectiveDisplayName, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                        Opc.Ua.Variables.StateVariableType_EffectiveDisplayName,
                        null);
                }
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                StateVariable instance = source as StateVariable;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                StateVariableType type = source as StateVariableType;

                if (type != null && type.Id != null)
                {
                    Id = (DataVariable<object>)type.Id.Clone(this);
                    Id.Initialize(type.Id);
                }
                else if (instance != null && instance.Id != null)
                {
                    Id = (DataVariable<object>)instance.Id.Clone(this);
                    Id.Initialize(instance.Id);
                }

                if (type != null && type.Name != null)
                {
                    Name = (DataVariable<QualifiedName>)type.Name.Clone(this);
                    Name.Initialize(type.Name);
                }
                else if (instance != null && instance.Name != null)
                {
                    Name = (DataVariable<QualifiedName>)instance.Name.Clone(this);
                    Name.Initialize(instance.Name);
                }

                if (type != null && type.Number != null)
                {
                    Number = (DataVariable<uint>)type.Number.Clone(this);
                    Number.Initialize(type.Number);
                }
                else if (instance != null && instance.Number != null)
                {
                    Number = (DataVariable<uint>)instance.Number.Clone(this);
                    Number.Initialize(instance.Number);
                }

                if (type != null && type.EffectiveDisplayName != null)
                {
                    EffectiveDisplayName = (DataVariable<LocalizedText>)type.EffectiveDisplayName.Clone(this);
                    EffectiveDisplayName.Initialize(type.EffectiveDisplayName);
                }
                else if (instance != null && instance.EffectiveDisplayName != null)
                {
                    EffectiveDisplayName = (DataVariable<LocalizedText>)instance.EffectiveDisplayName.Clone(this);
                    EffectiveDisplayName.Initialize(instance.EffectiveDisplayName);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_id = DataVariable<object>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Id, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.StateVariableType_Id);
        }
        
        /// <summary cref="NodeSource.CreateChildren" />
        protected override void CreateChildren(object configuration)
        {
            base.CreateChildren(configuration);
                            
            Name = (DataVariable<QualifiedName>)InitializeOptionalChild(
                new ConstructInstanceDelegate(DataVariable<QualifiedName>.Construct), 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Name, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.StateVariableType_Name,
                configuration);

            Number = (DataVariable<uint>)InitializeOptionalChild(
                new ConstructInstanceDelegate(DataVariable<uint>.Construct), 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Number, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.StateVariableType_Number,
                configuration);

            EffectiveDisplayName = (DataVariable<LocalizedText>)InitializeOptionalChild(
                new ConstructInstanceDelegate(DataVariable<LocalizedText>.Construct), 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.EffectiveDisplayName, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.StateVariableType_EffectiveDisplayName,
                configuration);
        }
        #endregion

        #region Private Fields
        private StateVariableType m_typeDefinition;
        DataVariable<object> m_id;
        DataVariable<QualifiedName> m_name;
        DataVariable<uint> m_number;
        DataVariable<LocalizedText> m_effectiveDisplayName;
        #endregion
    }
    #endregion

    #region FiniteStateVariableType Class
    /// <summary>
    /// Represents the FiniteStateVariableType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class FiniteStateVariableType : VariableTypeSource<LocalizedText>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public FiniteStateVariableType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.VariableTypes.FiniteStateVariableType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.FiniteStateVariableType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.VariableTypes.BaseDataVariableType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new FiniteStateVariableType FindSource(IServerInternal server)
        {
            FiniteStateVariableType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.VariableTypes.FiniteStateVariableType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as FiniteStateVariableType;

                if (type != null)
                {
                    return type;
                }

                type = new FiniteStateVariableType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                FiniteStateVariableType clone = new FiniteStateVariableType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region Id
        /// <summary>
        /// A description for the Id Variable.
        /// </summary>
        public DataVariable<NodeId> Id
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_id; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_id != null)
                    {
                        RemoveChild(m_id);
                    }

                    m_id = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceId(DataVariable<NodeId> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Id = replacement;

                Id.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Id, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.FiniteStateVariableType_Id,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                FiniteStateVariableType type = source as FiniteStateVariableType;

                if (type != null && type.Id != null)
                {
                    Id = (DataVariable<NodeId>)type.Id.Clone(this);
                    Id.Initialize(type.Id);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_id = DataVariable<NodeId>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.FiniteStateVariableType_Id, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Id, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.FiniteStateVariableType_Id);
        }
        #endregion

        #region Private Fields
        DataVariable<NodeId> m_id;
        #endregion
    }
    #endregion

    #region FiniteStateVariable Class
    /// <summary>
    /// Represents an instance of the FiniteStateVariableType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class FiniteStateVariable : DataVariable<LocalizedText>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected FiniteStateVariable(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = FiniteStateVariableType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new FiniteStateVariable Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            FiniteStateVariable instance = new FiniteStateVariable(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new FiniteStateVariable Construct(IServerInternal server)
        {
            FiniteStateVariable instance = new FiniteStateVariable(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                FiniteStateVariable clone = new FiniteStateVariable(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region Id
        /// <summary>
        /// A description for the Id Variable.
        /// </summary>
        public DataVariable<NodeId> Id
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_id; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_id != null)
                    {
                        RemoveChild(m_id);
                    }

                    m_id = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceId(DataVariable<NodeId> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Id = replacement;

                Id.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Id, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.FiniteStateVariableType_Id,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                FiniteStateVariable instance = source as FiniteStateVariable;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                FiniteStateVariableType type = source as FiniteStateVariableType;

                if (type != null && type.Id != null)
                {
                    Id = (DataVariable<NodeId>)type.Id.Clone(this);
                    Id.Initialize(type.Id);
                }
                else if (instance != null && instance.Id != null)
                {
                    Id = (DataVariable<NodeId>)instance.Id.Clone(this);
                    Id.Initialize(instance.Id);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_id = DataVariable<NodeId>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Id, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.FiniteStateVariableType_Id);
        }
        #endregion

        #region Private Fields
        private FiniteStateVariableType m_typeDefinition;
        DataVariable<NodeId> m_id;
        #endregion
    }
    #endregion

    #region TransitionVariableType Class
    /// <summary>
    /// Represents the TransitionVariableType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class TransitionVariableType : VariableTypeSource<LocalizedText>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public TransitionVariableType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.VariableTypes.TransitionVariableType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.TransitionVariableType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.VariableTypes.BaseDataVariableType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new TransitionVariableType FindSource(IServerInternal server)
        {
            TransitionVariableType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.VariableTypes.TransitionVariableType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as TransitionVariableType;

                if (type != null)
                {
                    return type;
                }

                type = new TransitionVariableType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                TransitionVariableType clone = new TransitionVariableType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region Id
        /// <summary>
        /// A description for the Id Variable.
        /// </summary>
        public DataVariable<object> Id
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_id; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_id != null)
                    {
                        RemoveChild(m_id);
                    }

                    m_id = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceId(DataVariable<object> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Id = replacement;

                Id.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Id, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.TransitionVariableType_Id,
                    null);
            }
        }
        #endregion

        #region Name
        /// <summary>
        /// A description for the Name Variable.
        /// </summary>
        public DataVariable<QualifiedName> Name
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_name; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_name != null)
                    {
                        RemoveChild(m_name);
                    }

                    m_name = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceName(DataVariable<QualifiedName> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Name = replacement;

                Name.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Name, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.TransitionVariableType_Name,
                    null);
            }
        }
        #endregion

        #region Number
        /// <summary>
        /// A description for the Number Variable.
        /// </summary>
        public DataVariable<uint> Number
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_number; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_number != null)
                    {
                        RemoveChild(m_number);
                    }

                    m_number = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceNumber(DataVariable<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Number = replacement;

                Number.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Number, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.TransitionVariableType_Number,
                    null);
            }
        }
        #endregion

        #region TransitionTime
        /// <summary>
        /// A description for the TransitionTime Variable.
        /// </summary>
        public DataVariable<DateTime> TransitionTime
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_transitionTime; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_transitionTime != null)
                    {
                        RemoveChild(m_transitionTime);
                    }

                    m_transitionTime = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceTransitionTime(DataVariable<DateTime> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                TransitionTime = replacement;

                TransitionTime.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.TransitionTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.TransitionVariableType_TransitionTime,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                TransitionVariableType type = source as TransitionVariableType;

                if (type != null && type.Id != null)
                {
                    Id = (DataVariable<object>)type.Id.Clone(this);
                    Id.Initialize(type.Id);
                }

                if (type != null && type.Name != null)
                {
                    Name = (DataVariable<QualifiedName>)type.Name.Clone(this);
                    Name.Initialize(type.Name);
                }

                if (type != null && type.Number != null)
                {
                    Number = (DataVariable<uint>)type.Number.Clone(this);
                    Number.Initialize(type.Number);
                }

                if (type != null && type.TransitionTime != null)
                {
                    TransitionTime = (DataVariable<DateTime>)type.TransitionTime.Clone(this);
                    TransitionTime.Initialize(type.TransitionTime);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_id = DataVariable<object>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.TransitionVariableType_Id, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Id, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.TransitionVariableType_Id);

            m_name = DataVariable<QualifiedName>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.TransitionVariableType_Name, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Name, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.TransitionVariableType_Name);

            m_number = DataVariable<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.TransitionVariableType_Number, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Number, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.TransitionVariableType_Number);

            m_transitionTime = DataVariable<DateTime>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.TransitionVariableType_TransitionTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.TransitionTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.TransitionVariableType_TransitionTime);
        }
        #endregion

        #region Private Fields
        DataVariable<object> m_id;
        DataVariable<QualifiedName> m_name;
        DataVariable<uint> m_number;
        DataVariable<DateTime> m_transitionTime;
        #endregion
    }
    #endregion

    #region TransitionVariable Class
    /// <summary>
    /// Represents an instance of the TransitionVariableType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class TransitionVariable : DataVariable<LocalizedText>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected TransitionVariable(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = TransitionVariableType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new TransitionVariable Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            TransitionVariable instance = new TransitionVariable(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new TransitionVariable Construct(IServerInternal server)
        {
            TransitionVariable instance = new TransitionVariable(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                TransitionVariable clone = new TransitionVariable(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region Id
        /// <summary>
        /// A description for the Id Variable.
        /// </summary>
        public DataVariable<object> Id
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_id; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_id != null)
                    {
                        RemoveChild(m_id);
                    }

                    m_id = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceId(DataVariable<object> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Id = replacement;

                Id.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Id, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.TransitionVariableType_Id,
                    null);
            }
        }
        #endregion

        #region Name
        /// <summary>
        /// A description for the Name Variable.
        /// </summary>
        public DataVariable<QualifiedName> Name
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_name; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_name != null)
                    {
                        RemoveChild(m_name);
                    }

                    m_name = value; 
                }
            }
        }

        /// <summary>
        /// Whether the Name node is specified for the node.
        /// </summary>
        public bool NameSpecified
        {
        	get 
            { 
                lock (DataLock)
                {
                    return m_name != null; 
                }
            }
        }

        /// <summary>
        /// Specifies the optional child.
        /// </summary>
        public void SpecifyName(DataVariable<QualifiedName> replacement)
        {
            CheckNodeManagerState();

            lock (DataLock)
            {
                if (NameSpecified)
                {
                    Name = (DataVariable<QualifiedName>)DeleteChild(m_name);
                }

                if (replacement != null)
                {       
                    Name = replacement;

                    Name.Create(
                        this.NodeId, 
                        new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                        null,
                        new QualifiedName(Opc.Ua.BrowseNames.Name, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                        Opc.Ua.Variables.TransitionVariableType_Name,
                        null);
                }
            }
        }
        #endregion

        #region Number
        /// <summary>
        /// A description for the Number Variable.
        /// </summary>
        public DataVariable<uint> Number
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_number; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_number != null)
                    {
                        RemoveChild(m_number);
                    }

                    m_number = value; 
                }
            }
        }

        /// <summary>
        /// Whether the Number node is specified for the node.
        /// </summary>
        public bool NumberSpecified
        {
        	get 
            { 
                lock (DataLock)
                {
                    return m_number != null; 
                }
            }
        }

        /// <summary>
        /// Specifies the optional child.
        /// </summary>
        public void SpecifyNumber(DataVariable<uint> replacement)
        {
            CheckNodeManagerState();

            lock (DataLock)
            {
                if (NumberSpecified)
                {
                    Number = (DataVariable<uint>)DeleteChild(m_number);
                }

                if (replacement != null)
                {       
                    Number = replacement;

                    Number.Create(
                        this.NodeId, 
                        new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                        null,
                        new QualifiedName(Opc.Ua.BrowseNames.Number, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                        Opc.Ua.Variables.TransitionVariableType_Number,
                        null);
                }
            }
        }
        #endregion

        #region TransitionTime
        /// <summary>
        /// A description for the TransitionTime Variable.
        /// </summary>
        public DataVariable<DateTime> TransitionTime
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_transitionTime; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_transitionTime != null)
                    {
                        RemoveChild(m_transitionTime);
                    }

                    m_transitionTime = value; 
                }
            }
        }

        /// <summary>
        /// Whether the TransitionTime node is specified for the node.
        /// </summary>
        public bool TransitionTimeSpecified
        {
        	get 
            { 
                lock (DataLock)
                {
                    return m_transitionTime != null; 
                }
            }
        }

        /// <summary>
        /// Specifies the optional child.
        /// </summary>
        public void SpecifyTransitionTime(DataVariable<DateTime> replacement)
        {
            CheckNodeManagerState();

            lock (DataLock)
            {
                if (TransitionTimeSpecified)
                {
                    TransitionTime = (DataVariable<DateTime>)DeleteChild(m_transitionTime);
                }

                if (replacement != null)
                {       
                    TransitionTime = replacement;

                    TransitionTime.Create(
                        this.NodeId, 
                        new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                        null,
                        new QualifiedName(Opc.Ua.BrowseNames.TransitionTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                        Opc.Ua.Variables.TransitionVariableType_TransitionTime,
                        null);
                }
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                TransitionVariable instance = source as TransitionVariable;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                TransitionVariableType type = source as TransitionVariableType;

                if (type != null && type.Id != null)
                {
                    Id = (DataVariable<object>)type.Id.Clone(this);
                    Id.Initialize(type.Id);
                }
                else if (instance != null && instance.Id != null)
                {
                    Id = (DataVariable<object>)instance.Id.Clone(this);
                    Id.Initialize(instance.Id);
                }

                if (type != null && type.Name != null)
                {
                    Name = (DataVariable<QualifiedName>)type.Name.Clone(this);
                    Name.Initialize(type.Name);
                }
                else if (instance != null && instance.Name != null)
                {
                    Name = (DataVariable<QualifiedName>)instance.Name.Clone(this);
                    Name.Initialize(instance.Name);
                }

                if (type != null && type.Number != null)
                {
                    Number = (DataVariable<uint>)type.Number.Clone(this);
                    Number.Initialize(type.Number);
                }
                else if (instance != null && instance.Number != null)
                {
                    Number = (DataVariable<uint>)instance.Number.Clone(this);
                    Number.Initialize(instance.Number);
                }

                if (type != null && type.TransitionTime != null)
                {
                    TransitionTime = (DataVariable<DateTime>)type.TransitionTime.Clone(this);
                    TransitionTime.Initialize(type.TransitionTime);
                }
                else if (instance != null && instance.TransitionTime != null)
                {
                    TransitionTime = (DataVariable<DateTime>)instance.TransitionTime.Clone(this);
                    TransitionTime.Initialize(instance.TransitionTime);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_id = DataVariable<object>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Id, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.TransitionVariableType_Id);
        }
        
        /// <summary cref="NodeSource.CreateChildren" />
        protected override void CreateChildren(object configuration)
        {
            base.CreateChildren(configuration);
                            
            Name = (DataVariable<QualifiedName>)InitializeOptionalChild(
                new ConstructInstanceDelegate(DataVariable<QualifiedName>.Construct), 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Name, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.TransitionVariableType_Name,
                configuration);

            Number = (DataVariable<uint>)InitializeOptionalChild(
                new ConstructInstanceDelegate(DataVariable<uint>.Construct), 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Number, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.TransitionVariableType_Number,
                configuration);

            TransitionTime = (DataVariable<DateTime>)InitializeOptionalChild(
                new ConstructInstanceDelegate(DataVariable<DateTime>.Construct), 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.TransitionTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.TransitionVariableType_TransitionTime,
                configuration);
        }
        #endregion

        #region Private Fields
        private TransitionVariableType m_typeDefinition;
        DataVariable<object> m_id;
        DataVariable<QualifiedName> m_name;
        DataVariable<uint> m_number;
        DataVariable<DateTime> m_transitionTime;
        #endregion
    }
    #endregion

    #region FiniteTransitionVariableType Class
    /// <summary>
    /// Represents the FiniteTransitionVariableType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class FiniteTransitionVariableType : VariableTypeSource<LocalizedText>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public FiniteTransitionVariableType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.VariableTypes.FiniteTransitionVariableType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.FiniteTransitionVariableType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.VariableTypes.BaseDataVariableType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new FiniteTransitionVariableType FindSource(IServerInternal server)
        {
            FiniteTransitionVariableType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.VariableTypes.FiniteTransitionVariableType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as FiniteTransitionVariableType;

                if (type != null)
                {
                    return type;
                }

                type = new FiniteTransitionVariableType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                FiniteTransitionVariableType clone = new FiniteTransitionVariableType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region Id
        /// <summary>
        /// A description for the Id Variable.
        /// </summary>
        public DataVariable<NodeId> Id
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_id; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_id != null)
                    {
                        RemoveChild(m_id);
                    }

                    m_id = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceId(DataVariable<NodeId> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Id = replacement;

                Id.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Id, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.FiniteTransitionVariableType_Id,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                FiniteTransitionVariableType type = source as FiniteTransitionVariableType;

                if (type != null && type.Id != null)
                {
                    Id = (DataVariable<NodeId>)type.Id.Clone(this);
                    Id.Initialize(type.Id);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_id = DataVariable<NodeId>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.FiniteTransitionVariableType_Id, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Id, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.FiniteTransitionVariableType_Id);
        }
        #endregion

        #region Private Fields
        DataVariable<NodeId> m_id;
        #endregion
    }
    #endregion

    #region FiniteTransitionVariable Class
    /// <summary>
    /// Represents an instance of the FiniteTransitionVariableType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class FiniteTransitionVariable : DataVariable<LocalizedText>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected FiniteTransitionVariable(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = FiniteTransitionVariableType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new FiniteTransitionVariable Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            FiniteTransitionVariable instance = new FiniteTransitionVariable(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new FiniteTransitionVariable Construct(IServerInternal server)
        {
            FiniteTransitionVariable instance = new FiniteTransitionVariable(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                FiniteTransitionVariable clone = new FiniteTransitionVariable(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region Id
        /// <summary>
        /// A description for the Id Variable.
        /// </summary>
        public DataVariable<NodeId> Id
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_id; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_id != null)
                    {
                        RemoveChild(m_id);
                    }

                    m_id = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceId(DataVariable<NodeId> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Id = replacement;

                Id.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Id, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.FiniteTransitionVariableType_Id,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                FiniteTransitionVariable instance = source as FiniteTransitionVariable;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                FiniteTransitionVariableType type = source as FiniteTransitionVariableType;

                if (type != null && type.Id != null)
                {
                    Id = (DataVariable<NodeId>)type.Id.Clone(this);
                    Id.Initialize(type.Id);
                }
                else if (instance != null && instance.Id != null)
                {
                    Id = (DataVariable<NodeId>)instance.Id.Clone(this);
                    Id.Initialize(instance.Id);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_id = DataVariable<NodeId>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Id, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.FiniteTransitionVariableType_Id);
        }
        #endregion

        #region Private Fields
        private FiniteTransitionVariableType m_typeDefinition;
        DataVariable<NodeId> m_id;
        #endregion
    }
    #endregion

    #region StateMachineType Class
    /// <summary>
    /// Represents the StateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class StateMachineType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public StateMachineType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.StateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.StateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseObjectType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new StateMachineType FindSource(IServerInternal server)
        {
            StateMachineType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.StateMachineType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as StateMachineType;

                if (type != null)
                {
                    return type;
                }

                type = new StateMachineType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                StateMachineType clone = new StateMachineType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region CurrentState
        /// <summary>
        /// A description for the CurrentState Variable.
        /// </summary>
        public StateVariable CurrentState
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_currentState; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_currentState != null)
                    {
                        RemoveChild(m_currentState);
                    }

                    m_currentState = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCurrentState(StateVariable replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CurrentState = replacement;

                CurrentState.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CurrentState, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.StateMachineType_CurrentState,
                    null);
            }
        }
        #endregion

        #region LastTransition
        /// <summary>
        /// A description for the LastTransition Variable.
        /// </summary>
        public TransitionVariable LastTransition
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_lastTransition; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_lastTransition != null)
                    {
                        RemoveChild(m_lastTransition);
                    }

                    m_lastTransition = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceLastTransition(TransitionVariable replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                LastTransition = replacement;

                LastTransition.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.LastTransition, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.StateMachineType_LastTransition,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                StateMachineType type = source as StateMachineType;

                if (type != null && type.CurrentState != null)
                {
                    CurrentState = (StateVariable)type.CurrentState.Clone(this);
                    CurrentState.Initialize(type.CurrentState);
                }

                if (type != null && type.LastTransition != null)
                {
                    LastTransition = (TransitionVariable)type.LastTransition.Clone(this);
                    LastTransition.Initialize(type.LastTransition);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_currentState = StateVariable.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.StateMachineType_CurrentState, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.CurrentState, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.StateMachineType_CurrentState);

            m_lastTransition = TransitionVariable.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.StateMachineType_LastTransition, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.LastTransition, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.StateMachineType_LastTransition);
        }
        #endregion

        #region Private Fields
        StateVariable m_currentState;
        TransitionVariable m_lastTransition;
        #endregion
    }
    #endregion

    #region StateMachine Class
    /// <summary>
    /// Represents an instance of the StateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class StateMachine : ObjectSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected StateMachine(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = StateMachineType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new StateMachine Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            StateMachine instance = new StateMachine(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new StateMachine Construct(IServerInternal server)
        {
            StateMachine instance = new StateMachine(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                StateMachine clone = new StateMachine(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region CurrentState
        /// <summary>
        /// A description for the CurrentState Variable.
        /// </summary>
        public StateVariable CurrentState
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_currentState; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_currentState != null)
                    {
                        RemoveChild(m_currentState);
                    }

                    m_currentState = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCurrentState(StateVariable replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CurrentState = replacement;

                CurrentState.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CurrentState, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.StateMachineType_CurrentState,
                    null);
            }
        }
        #endregion

        #region LastTransition
        /// <summary>
        /// A description for the LastTransition Variable.
        /// </summary>
        public TransitionVariable LastTransition
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_lastTransition; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_lastTransition != null)
                    {
                        RemoveChild(m_lastTransition);
                    }

                    m_lastTransition = value; 
                }
            }
        }

        /// <summary>
        /// Whether the LastTransition node is specified for the node.
        /// </summary>
        public bool LastTransitionSpecified
        {
        	get 
            { 
                lock (DataLock)
                {
                    return m_lastTransition != null; 
                }
            }
        }

        /// <summary>
        /// Specifies the optional child.
        /// </summary>
        public void SpecifyLastTransition(TransitionVariable replacement)
        {
            CheckNodeManagerState();

            lock (DataLock)
            {
                if (LastTransitionSpecified)
                {
                    LastTransition = (TransitionVariable)DeleteChild(m_lastTransition);
                }

                if (replacement != null)
                {       
                    LastTransition = replacement;

                    LastTransition.Create(
                        this.NodeId, 
                        new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                        null,
                        new QualifiedName(Opc.Ua.BrowseNames.LastTransition, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                        Opc.Ua.Variables.StateMachineType_LastTransition,
                        null);
                }
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                StateMachine instance = source as StateMachine;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                StateMachineType type = source as StateMachineType;

                if (type != null && type.CurrentState != null)
                {
                    CurrentState = (StateVariable)type.CurrentState.Clone(this);
                    CurrentState.Initialize(type.CurrentState);
                }
                else if (instance != null && instance.CurrentState != null)
                {
                    CurrentState = (StateVariable)instance.CurrentState.Clone(this);
                    CurrentState.Initialize(instance.CurrentState);
                }

                if (type != null && type.LastTransition != null)
                {
                    LastTransition = (TransitionVariable)type.LastTransition.Clone(this);
                    LastTransition.Initialize(type.LastTransition);
                }
                else if (instance != null && instance.LastTransition != null)
                {
                    LastTransition = (TransitionVariable)instance.LastTransition.Clone(this);
                    LastTransition.Initialize(instance.LastTransition);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_currentState = StateVariable.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.CurrentState, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.StateMachineType_CurrentState);
        }
        
        /// <summary cref="NodeSource.CreateChildren" />
        protected override void CreateChildren(object configuration)
        {
            base.CreateChildren(configuration);
                            
            LastTransition = (TransitionVariable)InitializeOptionalChild(
                new ConstructInstanceDelegate(TransitionVariable.Construct), 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.LastTransition, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.StateMachineType_LastTransition,
                configuration);
        }
        #endregion

        #region Private Fields
        private StateMachineType m_typeDefinition;
        StateVariable m_currentState;
        TransitionVariable m_lastTransition;
        #endregion
    }
    #endregion

    #region FiniteStateMachineType Class
    /// <summary>
    /// Represents the FiniteStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class FiniteStateMachineType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public FiniteStateMachineType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.FiniteStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.FiniteStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseObjectType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new FiniteStateMachineType FindSource(IServerInternal server)
        {
            FiniteStateMachineType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.FiniteStateMachineType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as FiniteStateMachineType;

                if (type != null)
                {
                    return type;
                }

                type = new FiniteStateMachineType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                FiniteStateMachineType clone = new FiniteStateMachineType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region CurrentState
        /// <summary>
        /// A description for the CurrentState Variable.
        /// </summary>
        public FiniteStateVariable CurrentState
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_currentState; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_currentState != null)
                    {
                        RemoveChild(m_currentState);
                    }

                    m_currentState = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCurrentState(FiniteStateVariable replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CurrentState = replacement;

                CurrentState.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CurrentState, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.FiniteStateMachineType_CurrentState,
                    null);
            }
        }
        #endregion

        #region LastTransition
        /// <summary>
        /// A description for the LastTransition Variable.
        /// </summary>
        public FiniteTransitionVariable LastTransition
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_lastTransition; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_lastTransition != null)
                    {
                        RemoveChild(m_lastTransition);
                    }

                    m_lastTransition = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceLastTransition(FiniteTransitionVariable replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                LastTransition = replacement;

                LastTransition.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.LastTransition, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.FiniteStateMachineType_LastTransition,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                FiniteStateMachineType type = source as FiniteStateMachineType;

                if (type != null && type.CurrentState != null)
                {
                    CurrentState = (FiniteStateVariable)type.CurrentState.Clone(this);
                    CurrentState.Initialize(type.CurrentState);
                }

                if (type != null && type.LastTransition != null)
                {
                    LastTransition = (FiniteTransitionVariable)type.LastTransition.Clone(this);
                    LastTransition.Initialize(type.LastTransition);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_currentState = FiniteStateVariable.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.FiniteStateMachineType_CurrentState, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.CurrentState, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.FiniteStateMachineType_CurrentState);

            m_lastTransition = FiniteTransitionVariable.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.FiniteStateMachineType_LastTransition, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.LastTransition, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.FiniteStateMachineType_LastTransition);
        }
        #endregion

        #region Private Fields
        FiniteStateVariable m_currentState;
        FiniteTransitionVariable m_lastTransition;
        #endregion
    }
    #endregion

    #region FiniteStateMachine Class
    /// <summary>
    /// Represents an instance of the FiniteStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class FiniteStateMachine : ObjectSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected FiniteStateMachine(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = FiniteStateMachineType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new FiniteStateMachine Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            FiniteStateMachine instance = new FiniteStateMachine(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new FiniteStateMachine Construct(IServerInternal server)
        {
            FiniteStateMachine instance = new FiniteStateMachine(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                FiniteStateMachine clone = new FiniteStateMachine(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region CurrentState
        /// <summary>
        /// A description for the CurrentState Variable.
        /// </summary>
        public FiniteStateVariable CurrentState
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_currentState; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_currentState != null)
                    {
                        RemoveChild(m_currentState);
                    }

                    m_currentState = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCurrentState(FiniteStateVariable replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CurrentState = replacement;

                CurrentState.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CurrentState, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.FiniteStateMachineType_CurrentState,
                    null);
            }
        }
        #endregion

        #region LastTransition
        /// <summary>
        /// A description for the LastTransition Variable.
        /// </summary>
        public FiniteTransitionVariable LastTransition
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_lastTransition; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_lastTransition != null)
                    {
                        RemoveChild(m_lastTransition);
                    }

                    m_lastTransition = value; 
                }
            }
        }

        /// <summary>
        /// Whether the LastTransition node is specified for the node.
        /// </summary>
        public bool LastTransitionSpecified
        {
        	get 
            { 
                lock (DataLock)
                {
                    return m_lastTransition != null; 
                }
            }
        }

        /// <summary>
        /// Specifies the optional child.
        /// </summary>
        public void SpecifyLastTransition(FiniteTransitionVariable replacement)
        {
            CheckNodeManagerState();

            lock (DataLock)
            {
                if (LastTransitionSpecified)
                {
                    LastTransition = (FiniteTransitionVariable)DeleteChild(m_lastTransition);
                }

                if (replacement != null)
                {       
                    LastTransition = replacement;

                    LastTransition.Create(
                        this.NodeId, 
                        new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                        null,
                        new QualifiedName(Opc.Ua.BrowseNames.LastTransition, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                        Opc.Ua.Variables.FiniteStateMachineType_LastTransition,
                        null);
                }
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                FiniteStateMachine instance = source as FiniteStateMachine;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                FiniteStateMachineType type = source as FiniteStateMachineType;

                if (type != null && type.CurrentState != null)
                {
                    CurrentState = (FiniteStateVariable)type.CurrentState.Clone(this);
                    CurrentState.Initialize(type.CurrentState);
                }
                else if (instance != null && instance.CurrentState != null)
                {
                    CurrentState = (FiniteStateVariable)instance.CurrentState.Clone(this);
                    CurrentState.Initialize(instance.CurrentState);
                }

                if (type != null && type.LastTransition != null)
                {
                    LastTransition = (FiniteTransitionVariable)type.LastTransition.Clone(this);
                    LastTransition.Initialize(type.LastTransition);
                }
                else if (instance != null && instance.LastTransition != null)
                {
                    LastTransition = (FiniteTransitionVariable)instance.LastTransition.Clone(this);
                    LastTransition.Initialize(instance.LastTransition);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_currentState = FiniteStateVariable.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.CurrentState, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.FiniteStateMachineType_CurrentState);
        }
        
        /// <summary cref="NodeSource.CreateChildren" />
        protected override void CreateChildren(object configuration)
        {
            base.CreateChildren(configuration);
                            
            LastTransition = (FiniteTransitionVariable)InitializeOptionalChild(
                new ConstructInstanceDelegate(FiniteTransitionVariable.Construct), 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.LastTransition, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.FiniteStateMachineType_LastTransition,
                configuration);
        }
        #endregion

        #region Private Fields
        private FiniteStateMachineType m_typeDefinition;
        FiniteStateVariable m_currentState;
        FiniteTransitionVariable m_lastTransition;
        #endregion
    }
    #endregion

    #region StateType Class
    /// <summary>
    /// Represents the StateType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class StateType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public StateType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.StateType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.StateType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseObjectType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new StateType FindSource(IServerInternal server)
        {
            StateType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.StateType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as StateType;

                if (type != null)
                {
                    return type;
                }

                type = new StateType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                StateType clone = new StateType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region StateNumber
        /// <summary>
        /// A description for the StateNumber Property.
        /// </summary>
        public Property<uint> StateNumber
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_stateNumber; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_stateNumber != null)
                    {
                        RemoveChild(m_stateNumber);
                    }

                    m_stateNumber = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceStateNumber(Property<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                StateNumber = replacement;

                StateNumber.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.StateNumber, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.StateType_StateNumber,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                StateType type = source as StateType;

                if (type != null && type.StateNumber != null)
                {
                    StateNumber = (Property<uint>)type.StateNumber.Clone(this);
                    StateNumber.Initialize(type.StateNumber);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_stateNumber = Property<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.StateType_StateNumber, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.StateNumber, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.StateType_StateNumber);
        }
        #endregion

        #region Private Fields
        Property<uint> m_stateNumber;
        #endregion
    }
    #endregion

    #region StateMachineState Class
    /// <summary>
    /// Represents an instance of the StateType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class StateMachineState : ObjectSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected StateMachineState(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = StateType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new StateMachineState Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            StateMachineState instance = new StateMachineState(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new StateMachineState Construct(IServerInternal server)
        {
            StateMachineState instance = new StateMachineState(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                StateMachineState clone = new StateMachineState(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region StateNumber
        /// <summary>
        /// A description for the StateNumber Property.
        /// </summary>
        public Property<uint> StateNumber
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_stateNumber; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_stateNumber != null)
                    {
                        RemoveChild(m_stateNumber);
                    }

                    m_stateNumber = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceStateNumber(Property<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                StateNumber = replacement;

                StateNumber.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.StateNumber, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.StateType_StateNumber,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                StateMachineState instance = source as StateMachineState;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                StateType type = source as StateType;

                if (type != null && type.StateNumber != null)
                {
                    StateNumber = (Property<uint>)type.StateNumber.Clone(this);
                    StateNumber.Initialize(type.StateNumber);
                }
                else if (instance != null && instance.StateNumber != null)
                {
                    StateNumber = (Property<uint>)instance.StateNumber.Clone(this);
                    StateNumber.Initialize(instance.StateNumber);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_stateNumber = Property<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.StateNumber, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.StateType_StateNumber);
        }
        #endregion

        #region Private Fields
        private StateType m_typeDefinition;
        Property<uint> m_stateNumber;
        #endregion
    }
    #endregion

    #region InitialStateType Class
    /// <summary>
    /// Represents the InitialStateType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class InitialStateType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public InitialStateType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.InitialStateType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.InitialStateType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.StateType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new InitialStateType FindSource(IServerInternal server)
        {
            InitialStateType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.InitialStateType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as InitialStateType;

                if (type != null)
                {
                    return type;
                }

                type = new InitialStateType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                InitialStateType clone = new InitialStateType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                InitialStateType type = source as InitialStateType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endregion

    #region StateMachineInitialState Class
    /// <summary>
    /// Represents an instance of the InitialStateType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class StateMachineInitialState : StateMachineState
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected StateMachineInitialState(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = InitialStateType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new StateMachineInitialState Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            StateMachineInitialState instance = new StateMachineInitialState(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new StateMachineInitialState Construct(IServerInternal server)
        {
            StateMachineInitialState instance = new StateMachineInitialState(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                StateMachineInitialState clone = new StateMachineInitialState(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                StateMachineInitialState instance = source as StateMachineInitialState;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                InitialStateType type = source as InitialStateType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private InitialStateType m_typeDefinition;
        #endregion
    }
    #endregion

    #region TransitionType Class
    /// <summary>
    /// Represents the TransitionType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class TransitionType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public TransitionType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.TransitionType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.TransitionType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseObjectType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new TransitionType FindSource(IServerInternal server)
        {
            TransitionType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.TransitionType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as TransitionType;

                if (type != null)
                {
                    return type;
                }

                type = new TransitionType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                TransitionType clone = new TransitionType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                TransitionType type = source as TransitionType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endregion

    #region StateMachineTransition Class
    /// <summary>
    /// Represents an instance of the TransitionType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class StateMachineTransition : ObjectSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected StateMachineTransition(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = TransitionType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new StateMachineTransition Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            StateMachineTransition instance = new StateMachineTransition(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new StateMachineTransition Construct(IServerInternal server)
        {
            StateMachineTransition instance = new StateMachineTransition(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                StateMachineTransition clone = new StateMachineTransition(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                StateMachineTransition instance = source as StateMachineTransition;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                TransitionType type = source as TransitionType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private TransitionType m_typeDefinition;
        #endregion
    }
    #endregion

    #region TransitionEventType Class
    /// <summary>
    /// Represents the TransitionEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class TransitionEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public TransitionEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.TransitionEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.TransitionEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new TransitionEventType FindSource(IServerInternal server)
        {
            TransitionEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.TransitionEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as TransitionEventType;

                if (type != null)
                {
                    return type;
                }

                type = new TransitionEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                TransitionEventType clone = new TransitionEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region Transition
        /// <summary>
        /// A description for the Transition Variable.
        /// </summary>
        public TransitionVariable Transition
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_transition; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_transition != null)
                    {
                        RemoveChild(m_transition);
                    }

                    m_transition = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceTransition(TransitionVariable replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Transition = replacement;

                Transition.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Transition, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.TransitionEventType_Transition,
                    null);
            }
        }
        #endregion

        #region FromState
        /// <summary>
        /// A description for the FromState Variable.
        /// </summary>
        public StateVariable FromState
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_fromState; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_fromState != null)
                    {
                        RemoveChild(m_fromState);
                    }

                    m_fromState = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceFromState(StateVariable replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                FromState = replacement;

                FromState.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.FromState, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.TransitionEventType_FromState,
                    null);
            }
        }
        #endregion

        #region ToState
        /// <summary>
        /// A description for the ToState Variable.
        /// </summary>
        public StateVariable ToState
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_toState; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_toState != null)
                    {
                        RemoveChild(m_toState);
                    }

                    m_toState = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceToState(StateVariable replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ToState = replacement;

                ToState.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ToState, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.TransitionEventType_ToState,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                TransitionEventType type = source as TransitionEventType;

                if (type != null && type.Transition != null)
                {
                    Transition = (TransitionVariable)type.Transition.Clone(this);
                    Transition.Initialize(type.Transition);
                }

                if (type != null && type.FromState != null)
                {
                    FromState = (StateVariable)type.FromState.Clone(this);
                    FromState.Initialize(type.FromState);
                }

                if (type != null && type.ToState != null)
                {
                    ToState = (StateVariable)type.ToState.Clone(this);
                    ToState.Initialize(type.ToState);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_transition = TransitionVariable.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.TransitionEventType_Transition, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Transition, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.TransitionEventType_Transition);

            m_fromState = StateVariable.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.TransitionEventType_FromState, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.FromState, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.TransitionEventType_FromState);

            m_toState = StateVariable.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.TransitionEventType_ToState, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ToState, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.TransitionEventType_ToState);
        }
        #endregion

        #region Private Fields
        TransitionVariable m_transition;
        StateVariable m_fromState;
        StateVariable m_toState;
        #endregion
    }
    #endregion

    #region TransitionEvent Class
    /// <summary>
    /// Represents an instance of the TransitionEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class TransitionEvent : BaseEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected TransitionEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = TransitionEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new TransitionEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            TransitionEvent instance = new TransitionEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new TransitionEvent Construct(IServerInternal server)
        {
            TransitionEvent instance = new TransitionEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                TransitionEvent clone = new TransitionEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region Transition
        /// <summary>
        /// A description for the Transition Variable.
        /// </summary>
        public TransitionVariable Transition
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_transition; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_transition != null)
                    {
                        RemoveChild(m_transition);
                    }

                    m_transition = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceTransition(TransitionVariable replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Transition = replacement;

                Transition.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Transition, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.TransitionEventType_Transition,
                    null);
            }
        }
        #endregion

        #region FromState
        /// <summary>
        /// A description for the FromState Variable.
        /// </summary>
        public StateVariable FromState
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_fromState; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_fromState != null)
                    {
                        RemoveChild(m_fromState);
                    }

                    m_fromState = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceFromState(StateVariable replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                FromState = replacement;

                FromState.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.FromState, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.TransitionEventType_FromState,
                    null);
            }
        }
        #endregion

        #region ToState
        /// <summary>
        /// A description for the ToState Variable.
        /// </summary>
        public StateVariable ToState
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_toState; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_toState != null)
                    {
                        RemoveChild(m_toState);
                    }

                    m_toState = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceToState(StateVariable replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ToState = replacement;

                ToState.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ToState, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.TransitionEventType_ToState,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                TransitionEvent instance = source as TransitionEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                TransitionEventType type = source as TransitionEventType;

                if (type != null && type.Transition != null)
                {
                    Transition = (TransitionVariable)type.Transition.Clone(this);
                    Transition.Initialize(type.Transition);
                }
                else if (instance != null && instance.Transition != null)
                {
                    Transition = (TransitionVariable)instance.Transition.Clone(this);
                    Transition.Initialize(instance.Transition);
                }

                if (type != null && type.FromState != null)
                {
                    FromState = (StateVariable)type.FromState.Clone(this);
                    FromState.Initialize(type.FromState);
                }
                else if (instance != null && instance.FromState != null)
                {
                    FromState = (StateVariable)instance.FromState.Clone(this);
                    FromState.Initialize(instance.FromState);
                }

                if (type != null && type.ToState != null)
                {
                    ToState = (StateVariable)type.ToState.Clone(this);
                    ToState.Initialize(type.ToState);
                }
                else if (instance != null && instance.ToState != null)
                {
                    ToState = (StateVariable)instance.ToState.Clone(this);
                    ToState.Initialize(instance.ToState);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_transition = TransitionVariable.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Transition, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.TransitionEventType_Transition);

            m_fromState = StateVariable.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.FromState, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.TransitionEventType_FromState);

            m_toState = StateVariable.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ToState, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.TransitionEventType_ToState);
        }
        #endregion

        #region Private Fields
        private TransitionEventType m_typeDefinition;
        TransitionVariable m_transition;
        StateVariable m_fromState;
        StateVariable m_toState;
        #endregion
    }
    #endregion

    #region AuditUpdateStateEventType Class
    /// <summary>
    /// Represents the AuditUpdateStateEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditUpdateStateEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AuditUpdateStateEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AuditUpdateStateEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AuditUpdateStateEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AuditUpdateMethodEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AuditUpdateStateEventType FindSource(IServerInternal server)
        {
            AuditUpdateStateEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AuditUpdateStateEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AuditUpdateStateEventType;

                if (type != null)
                {
                    return type;
                }

                type = new AuditUpdateStateEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditUpdateStateEventType clone = new AuditUpdateStateEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region OldStateId
        /// <summary>
        /// A description for the OldStateId Property.
        /// </summary>
        public Property<object> OldStateId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_oldStateId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_oldStateId != null)
                    {
                        RemoveChild(m_oldStateId);
                    }

                    m_oldStateId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceOldStateId(Property<object> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                OldStateId = replacement;

                OldStateId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.OldStateId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditUpdateStateEventType_OldStateId,
                    null);
            }
        }
        #endregion

        #region NewStateId
        /// <summary>
        /// A description for the NewStateId Property.
        /// </summary>
        public Property<object> NewStateId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_newStateId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_newStateId != null)
                    {
                        RemoveChild(m_newStateId);
                    }

                    m_newStateId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceNewStateId(Property<object> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                NewStateId = replacement;

                NewStateId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.NewStateId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditUpdateStateEventType_NewStateId,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AuditUpdateStateEventType type = source as AuditUpdateStateEventType;

                if (type != null && type.OldStateId != null)
                {
                    OldStateId = (Property<object>)type.OldStateId.Clone(this);
                    OldStateId.Initialize(type.OldStateId);
                }

                if (type != null && type.NewStateId != null)
                {
                    NewStateId = (Property<object>)type.NewStateId.Clone(this);
                    NewStateId.Initialize(type.NewStateId);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_oldStateId = Property<object>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditUpdateStateEventType_OldStateId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.OldStateId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditUpdateStateEventType_OldStateId);

            m_newStateId = Property<object>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AuditUpdateStateEventType_NewStateId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.NewStateId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditUpdateStateEventType_NewStateId);
        }
        #endregion

        #region Private Fields
        Property<object> m_oldStateId;
        Property<object> m_newStateId;
        #endregion
    }
    #endregion

    #region AuditUpdateStateEvent Class
    /// <summary>
    /// Represents an instance of the AuditUpdateStateEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditUpdateStateEvent : AuditUpdateMethodEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AuditUpdateStateEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AuditUpdateStateEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AuditUpdateStateEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AuditUpdateStateEvent instance = new AuditUpdateStateEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AuditUpdateStateEvent Construct(IServerInternal server)
        {
            AuditUpdateStateEvent instance = new AuditUpdateStateEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditUpdateStateEvent clone = new AuditUpdateStateEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region OldStateId
        /// <summary>
        /// A description for the OldStateId Property.
        /// </summary>
        public Property<object> OldStateId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_oldStateId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_oldStateId != null)
                    {
                        RemoveChild(m_oldStateId);
                    }

                    m_oldStateId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceOldStateId(Property<object> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                OldStateId = replacement;

                OldStateId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.OldStateId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditUpdateStateEventType_OldStateId,
                    null);
            }
        }
        #endregion

        #region NewStateId
        /// <summary>
        /// A description for the NewStateId Property.
        /// </summary>
        public Property<object> NewStateId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_newStateId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_newStateId != null)
                    {
                        RemoveChild(m_newStateId);
                    }

                    m_newStateId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceNewStateId(Property<object> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                NewStateId = replacement;

                NewStateId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.NewStateId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AuditUpdateStateEventType_NewStateId,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AuditUpdateStateEvent instance = source as AuditUpdateStateEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AuditUpdateStateEventType type = source as AuditUpdateStateEventType;

                if (type != null && type.OldStateId != null)
                {
                    OldStateId = (Property<object>)type.OldStateId.Clone(this);
                    OldStateId.Initialize(type.OldStateId);
                }
                else if (instance != null && instance.OldStateId != null)
                {
                    OldStateId = (Property<object>)instance.OldStateId.Clone(this);
                    OldStateId.Initialize(instance.OldStateId);
                }

                if (type != null && type.NewStateId != null)
                {
                    NewStateId = (Property<object>)type.NewStateId.Clone(this);
                    NewStateId.Initialize(type.NewStateId);
                }
                else if (instance != null && instance.NewStateId != null)
                {
                    NewStateId = (Property<object>)instance.NewStateId.Clone(this);
                    NewStateId.Initialize(instance.NewStateId);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_oldStateId = Property<object>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.OldStateId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditUpdateStateEventType_OldStateId);

            m_newStateId = Property<object>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.NewStateId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AuditUpdateStateEventType_NewStateId);
        }
        #endregion

        #region Private Fields
        private AuditUpdateStateEventType m_typeDefinition;
        Property<object> m_oldStateId;
        Property<object> m_newStateId;
        #endregion
    }
    #endregion

    #region HistoricalConfigurationType Class
    /// <summary>
    /// Represents the HistoricalConfigurationType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class HistoricalConfigurationType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public HistoricalConfigurationType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.HistoricalConfigurationType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.HistoricalConfigurationType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseObjectType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new HistoricalConfigurationType FindSource(IServerInternal server)
        {
            HistoricalConfigurationType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.HistoricalConfigurationType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as HistoricalConfigurationType;

                if (type != null)
                {
                    return type;
                }

                type = new HistoricalConfigurationType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                HistoricalConfigurationType clone = new HistoricalConfigurationType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region AggregateConfiguration
        /// <summary>
        /// A description for the AggregateConfiguration Property.
        /// </summary>
        public Property<AggregateConfiguration> AggregateConfiguration
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_aggregateConfiguration; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_aggregateConfiguration != null)
                    {
                        RemoveChild(m_aggregateConfiguration);
                    }

                    m_aggregateConfiguration = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceAggregateConfiguration(Property<AggregateConfiguration> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                AggregateConfiguration = replacement;

                AggregateConfiguration.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.AggregateConfiguration, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.HistoricalConfigurationType_AggregateConfiguration,
                    null);
            }
        }
        #endregion

        #region Stepped
        /// <summary>
        /// A description for the Stepped Property.
        /// </summary>
        public Property<bool> Stepped
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_stepped; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_stepped != null)
                    {
                        RemoveChild(m_stepped);
                    }

                    m_stepped = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceStepped(Property<bool> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Stepped = replacement;

                Stepped.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Stepped, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.HistoricalConfigurationType_Stepped,
                    null);
            }
        }
        #endregion

        #region Definition
        /// <summary>
        /// A description for the Definition Property.
        /// </summary>
        public Property<string> Definition
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_definition; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_definition != null)
                    {
                        RemoveChild(m_definition);
                    }

                    m_definition = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceDefinition(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Definition = replacement;

                Definition.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Definition, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.HistoricalConfigurationType_Definition,
                    null);
            }
        }
        #endregion

        #region MaxTimeInterval
        /// <summary>
        /// A description for the MaxTimeInterval Property.
        /// </summary>
        public Property<double> MaxTimeInterval
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_maxTimeInterval; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_maxTimeInterval != null)
                    {
                        RemoveChild(m_maxTimeInterval);
                    }

                    m_maxTimeInterval = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceMaxTimeInterval(Property<double> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                MaxTimeInterval = replacement;

                MaxTimeInterval.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.MaxTimeInterval, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.HistoricalConfigurationType_MaxTimeInterval,
                    null);
            }
        }
        #endregion

        #region MinTimeInterval
        /// <summary>
        /// A description for the MinTimeInterval Property.
        /// </summary>
        public Property<double> MinTimeInterval
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_minTimeInterval; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_minTimeInterval != null)
                    {
                        RemoveChild(m_minTimeInterval);
                    }

                    m_minTimeInterval = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceMinTimeInterval(Property<double> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                MinTimeInterval = replacement;

                MinTimeInterval.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.MinTimeInterval, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.HistoricalConfigurationType_MinTimeInterval,
                    null);
            }
        }
        #endregion

        #region ExceptionDeviation
        /// <summary>
        /// A description for the ExceptionDeviation Property.
        /// </summary>
        public Property<double> ExceptionDeviation
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_exceptionDeviation; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_exceptionDeviation != null)
                    {
                        RemoveChild(m_exceptionDeviation);
                    }

                    m_exceptionDeviation = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceExceptionDeviation(Property<double> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ExceptionDeviation = replacement;

                ExceptionDeviation.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ExceptionDeviation, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.HistoricalConfigurationType_ExceptionDeviation,
                    null);
            }
        }
        #endregion

        #region ExceptionDeviationFormat
        /// <summary>
        /// A description for the ExceptionDeviationFormat Property.
        /// </summary>
        public Property<ExceptionDeviationFormat> ExceptionDeviationFormat
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_exceptionDeviationFormat; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_exceptionDeviationFormat != null)
                    {
                        RemoveChild(m_exceptionDeviationFormat);
                    }

                    m_exceptionDeviationFormat = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceExceptionDeviationFormat(Property<ExceptionDeviationFormat> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ExceptionDeviationFormat = replacement;

                ExceptionDeviationFormat.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ExceptionDeviationFormat, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.HistoricalConfigurationType_ExceptionDeviationFormat,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                HistoricalConfigurationType type = source as HistoricalConfigurationType;

                if (type != null && type.AggregateConfiguration != null)
                {
                    AggregateConfiguration = (Property<AggregateConfiguration>)type.AggregateConfiguration.Clone(this);
                    AggregateConfiguration.Initialize(type.AggregateConfiguration);
                }

                if (type != null && type.Stepped != null)
                {
                    Stepped = (Property<bool>)type.Stepped.Clone(this);
                    Stepped.Initialize(type.Stepped);
                }

                if (type != null && type.Definition != null)
                {
                    Definition = (Property<string>)type.Definition.Clone(this);
                    Definition.Initialize(type.Definition);
                }

                if (type != null && type.MaxTimeInterval != null)
                {
                    MaxTimeInterval = (Property<double>)type.MaxTimeInterval.Clone(this);
                    MaxTimeInterval.Initialize(type.MaxTimeInterval);
                }

                if (type != null && type.MinTimeInterval != null)
                {
                    MinTimeInterval = (Property<double>)type.MinTimeInterval.Clone(this);
                    MinTimeInterval.Initialize(type.MinTimeInterval);
                }

                if (type != null && type.ExceptionDeviation != null)
                {
                    ExceptionDeviation = (Property<double>)type.ExceptionDeviation.Clone(this);
                    ExceptionDeviation.Initialize(type.ExceptionDeviation);
                }

                if (type != null && type.ExceptionDeviationFormat != null)
                {
                    ExceptionDeviationFormat = (Property<ExceptionDeviationFormat>)type.ExceptionDeviationFormat.Clone(this);
                    ExceptionDeviationFormat.Initialize(type.ExceptionDeviationFormat);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_aggregateConfiguration = Property<AggregateConfiguration>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.HistoricalConfigurationType_AggregateConfiguration, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.AggregateConfiguration, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.HistoricalConfigurationType_AggregateConfiguration);

            m_stepped = Property<bool>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.HistoricalConfigurationType_Stepped, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Stepped, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.HistoricalConfigurationType_Stepped);

            m_definition = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.HistoricalConfigurationType_Definition, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Definition, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.HistoricalConfigurationType_Definition);

            m_maxTimeInterval = Property<double>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.HistoricalConfigurationType_MaxTimeInterval, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.MaxTimeInterval, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.HistoricalConfigurationType_MaxTimeInterval);

            m_minTimeInterval = Property<double>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.HistoricalConfigurationType_MinTimeInterval, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.MinTimeInterval, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.HistoricalConfigurationType_MinTimeInterval);

            m_exceptionDeviation = Property<double>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.HistoricalConfigurationType_ExceptionDeviation, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ExceptionDeviation, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.HistoricalConfigurationType_ExceptionDeviation);

            m_exceptionDeviationFormat = Property<ExceptionDeviationFormat>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.HistoricalConfigurationType_ExceptionDeviationFormat, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ExceptionDeviationFormat, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.HistoricalConfigurationType_ExceptionDeviationFormat);
        }
        #endregion

        #region Private Fields
        Property<AggregateConfiguration> m_aggregateConfiguration;
        Property<bool> m_stepped;
        Property<string> m_definition;
        Property<double> m_maxTimeInterval;
        Property<double> m_minTimeInterval;
        Property<double> m_exceptionDeviation;
        Property<ExceptionDeviationFormat> m_exceptionDeviationFormat;
        #endregion
    }
    #endregion

    #region HistoricalConfiguration Class
    /// <summary>
    /// Represents an instance of the HistoricalConfigurationType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class HistoricalConfiguration : ObjectSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected HistoricalConfiguration(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = HistoricalConfigurationType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new HistoricalConfiguration Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            HistoricalConfiguration instance = new HistoricalConfiguration(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new HistoricalConfiguration Construct(IServerInternal server)
        {
            HistoricalConfiguration instance = new HistoricalConfiguration(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                HistoricalConfiguration clone = new HistoricalConfiguration(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region AggregateConfiguration
        /// <summary>
        /// A description for the AggregateConfiguration Property.
        /// </summary>
        public Property<AggregateConfiguration> AggregateConfiguration
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_aggregateConfiguration; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_aggregateConfiguration != null)
                    {
                        RemoveChild(m_aggregateConfiguration);
                    }

                    m_aggregateConfiguration = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceAggregateConfiguration(Property<AggregateConfiguration> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                AggregateConfiguration = replacement;

                AggregateConfiguration.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.AggregateConfiguration, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.HistoricalConfigurationType_AggregateConfiguration,
                    null);
            }
        }
        #endregion

        #region Stepped
        /// <summary>
        /// A description for the Stepped Property.
        /// </summary>
        public Property<bool> Stepped
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_stepped; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_stepped != null)
                    {
                        RemoveChild(m_stepped);
                    }

                    m_stepped = value; 
                }
            }
        }

        /// <summary>
        /// Whether the Stepped node is specified for the node.
        /// </summary>
        public bool SteppedSpecified
        {
        	get 
            { 
                lock (DataLock)
                {
                    return m_stepped != null; 
                }
            }
        }

        /// <summary>
        /// Specifies the optional child.
        /// </summary>
        public void SpecifyStepped(Property<bool> replacement)
        {
            CheckNodeManagerState();

            lock (DataLock)
            {
                if (SteppedSpecified)
                {
                    Stepped = (Property<bool>)DeleteChild(m_stepped);
                }

                if (replacement != null)
                {       
                    Stepped = replacement;

                    Stepped.Create(
                        this.NodeId, 
                        new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                        null,
                        new QualifiedName(Opc.Ua.BrowseNames.Stepped, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                        Opc.Ua.Variables.HistoricalConfigurationType_Stepped,
                        null);
                }
            }
        }
        #endregion

        #region Definition
        /// <summary>
        /// A description for the Definition Property.
        /// </summary>
        public Property<string> Definition
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_definition; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_definition != null)
                    {
                        RemoveChild(m_definition);
                    }

                    m_definition = value; 
                }
            }
        }

        /// <summary>
        /// Whether the Definition node is specified for the node.
        /// </summary>
        public bool DefinitionSpecified
        {
        	get 
            { 
                lock (DataLock)
                {
                    return m_definition != null; 
                }
            }
        }

        /// <summary>
        /// Specifies the optional child.
        /// </summary>
        public void SpecifyDefinition(Property<string> replacement)
        {
            CheckNodeManagerState();

            lock (DataLock)
            {
                if (DefinitionSpecified)
                {
                    Definition = (Property<string>)DeleteChild(m_definition);
                }

                if (replacement != null)
                {       
                    Definition = replacement;

                    Definition.Create(
                        this.NodeId, 
                        new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                        null,
                        new QualifiedName(Opc.Ua.BrowseNames.Definition, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                        Opc.Ua.Variables.HistoricalConfigurationType_Definition,
                        null);
                }
            }
        }
        #endregion

        #region MaxTimeInterval
        /// <summary>
        /// A description for the MaxTimeInterval Property.
        /// </summary>
        public Property<double> MaxTimeInterval
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_maxTimeInterval; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_maxTimeInterval != null)
                    {
                        RemoveChild(m_maxTimeInterval);
                    }

                    m_maxTimeInterval = value; 
                }
            }
        }

        /// <summary>
        /// Whether the MaxTimeInterval node is specified for the node.
        /// </summary>
        public bool MaxTimeIntervalSpecified
        {
        	get 
            { 
                lock (DataLock)
                {
                    return m_maxTimeInterval != null; 
                }
            }
        }

        /// <summary>
        /// Specifies the optional child.
        /// </summary>
        public void SpecifyMaxTimeInterval(Property<double> replacement)
        {
            CheckNodeManagerState();

            lock (DataLock)
            {
                if (MaxTimeIntervalSpecified)
                {
                    MaxTimeInterval = (Property<double>)DeleteChild(m_maxTimeInterval);
                }

                if (replacement != null)
                {       
                    MaxTimeInterval = replacement;

                    MaxTimeInterval.Create(
                        this.NodeId, 
                        new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                        null,
                        new QualifiedName(Opc.Ua.BrowseNames.MaxTimeInterval, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                        Opc.Ua.Variables.HistoricalConfigurationType_MaxTimeInterval,
                        null);
                }
            }
        }
        #endregion

        #region MinTimeInterval
        /// <summary>
        /// A description for the MinTimeInterval Property.
        /// </summary>
        public Property<double> MinTimeInterval
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_minTimeInterval; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_minTimeInterval != null)
                    {
                        RemoveChild(m_minTimeInterval);
                    }

                    m_minTimeInterval = value; 
                }
            }
        }

        /// <summary>
        /// Whether the MinTimeInterval node is specified for the node.
        /// </summary>
        public bool MinTimeIntervalSpecified
        {
        	get 
            { 
                lock (DataLock)
                {
                    return m_minTimeInterval != null; 
                }
            }
        }

        /// <summary>
        /// Specifies the optional child.
        /// </summary>
        public void SpecifyMinTimeInterval(Property<double> replacement)
        {
            CheckNodeManagerState();

            lock (DataLock)
            {
                if (MinTimeIntervalSpecified)
                {
                    MinTimeInterval = (Property<double>)DeleteChild(m_minTimeInterval);
                }

                if (replacement != null)
                {       
                    MinTimeInterval = replacement;

                    MinTimeInterval.Create(
                        this.NodeId, 
                        new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                        null,
                        new QualifiedName(Opc.Ua.BrowseNames.MinTimeInterval, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                        Opc.Ua.Variables.HistoricalConfigurationType_MinTimeInterval,
                        null);
                }
            }
        }
        #endregion

        #region ExceptionDeviation
        /// <summary>
        /// A description for the ExceptionDeviation Property.
        /// </summary>
        public Property<double> ExceptionDeviation
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_exceptionDeviation; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_exceptionDeviation != null)
                    {
                        RemoveChild(m_exceptionDeviation);
                    }

                    m_exceptionDeviation = value; 
                }
            }
        }

        /// <summary>
        /// Whether the ExceptionDeviation node is specified for the node.
        /// </summary>
        public bool ExceptionDeviationSpecified
        {
        	get 
            { 
                lock (DataLock)
                {
                    return m_exceptionDeviation != null; 
                }
            }
        }

        /// <summary>
        /// Specifies the optional child.
        /// </summary>
        public void SpecifyExceptionDeviation(Property<double> replacement)
        {
            CheckNodeManagerState();

            lock (DataLock)
            {
                if (ExceptionDeviationSpecified)
                {
                    ExceptionDeviation = (Property<double>)DeleteChild(m_exceptionDeviation);
                }

                if (replacement != null)
                {       
                    ExceptionDeviation = replacement;

                    ExceptionDeviation.Create(
                        this.NodeId, 
                        new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                        null,
                        new QualifiedName(Opc.Ua.BrowseNames.ExceptionDeviation, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                        Opc.Ua.Variables.HistoricalConfigurationType_ExceptionDeviation,
                        null);
                }
            }
        }
        #endregion

        #region ExceptionDeviationFormat
        /// <summary>
        /// A description for the ExceptionDeviationFormat Property.
        /// </summary>
        public Property<ExceptionDeviationFormat> ExceptionDeviationFormat
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_exceptionDeviationFormat; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_exceptionDeviationFormat != null)
                    {
                        RemoveChild(m_exceptionDeviationFormat);
                    }

                    m_exceptionDeviationFormat = value; 
                }
            }
        }

        /// <summary>
        /// Whether the ExceptionDeviationFormat node is specified for the node.
        /// </summary>
        public bool ExceptionDeviationFormatSpecified
        {
        	get 
            { 
                lock (DataLock)
                {
                    return m_exceptionDeviationFormat != null; 
                }
            }
        }

        /// <summary>
        /// Specifies the optional child.
        /// </summary>
        public void SpecifyExceptionDeviationFormat(Property<ExceptionDeviationFormat> replacement)
        {
            CheckNodeManagerState();

            lock (DataLock)
            {
                if (ExceptionDeviationFormatSpecified)
                {
                    ExceptionDeviationFormat = (Property<ExceptionDeviationFormat>)DeleteChild(m_exceptionDeviationFormat);
                }

                if (replacement != null)
                {       
                    ExceptionDeviationFormat = replacement;

                    ExceptionDeviationFormat.Create(
                        this.NodeId, 
                        new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                        null,
                        new QualifiedName(Opc.Ua.BrowseNames.ExceptionDeviationFormat, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                        Opc.Ua.Variables.HistoricalConfigurationType_ExceptionDeviationFormat,
                        null);
                }
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                HistoricalConfiguration instance = source as HistoricalConfiguration;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                HistoricalConfigurationType type = source as HistoricalConfigurationType;

                if (type != null && type.AggregateConfiguration != null)
                {
                    AggregateConfiguration = (Property<AggregateConfiguration>)type.AggregateConfiguration.Clone(this);
                    AggregateConfiguration.Initialize(type.AggregateConfiguration);
                }
                else if (instance != null && instance.AggregateConfiguration != null)
                {
                    AggregateConfiguration = (Property<AggregateConfiguration>)instance.AggregateConfiguration.Clone(this);
                    AggregateConfiguration.Initialize(instance.AggregateConfiguration);
                }

                if (type != null && type.Stepped != null)
                {
                    Stepped = (Property<bool>)type.Stepped.Clone(this);
                    Stepped.Initialize(type.Stepped);
                }
                else if (instance != null && instance.Stepped != null)
                {
                    Stepped = (Property<bool>)instance.Stepped.Clone(this);
                    Stepped.Initialize(instance.Stepped);
                }

                if (type != null && type.Definition != null)
                {
                    Definition = (Property<string>)type.Definition.Clone(this);
                    Definition.Initialize(type.Definition);
                }
                else if (instance != null && instance.Definition != null)
                {
                    Definition = (Property<string>)instance.Definition.Clone(this);
                    Definition.Initialize(instance.Definition);
                }

                if (type != null && type.MaxTimeInterval != null)
                {
                    MaxTimeInterval = (Property<double>)type.MaxTimeInterval.Clone(this);
                    MaxTimeInterval.Initialize(type.MaxTimeInterval);
                }
                else if (instance != null && instance.MaxTimeInterval != null)
                {
                    MaxTimeInterval = (Property<double>)instance.MaxTimeInterval.Clone(this);
                    MaxTimeInterval.Initialize(instance.MaxTimeInterval);
                }

                if (type != null && type.MinTimeInterval != null)
                {
                    MinTimeInterval = (Property<double>)type.MinTimeInterval.Clone(this);
                    MinTimeInterval.Initialize(type.MinTimeInterval);
                }
                else if (instance != null && instance.MinTimeInterval != null)
                {
                    MinTimeInterval = (Property<double>)instance.MinTimeInterval.Clone(this);
                    MinTimeInterval.Initialize(instance.MinTimeInterval);
                }

                if (type != null && type.ExceptionDeviation != null)
                {
                    ExceptionDeviation = (Property<double>)type.ExceptionDeviation.Clone(this);
                    ExceptionDeviation.Initialize(type.ExceptionDeviation);
                }
                else if (instance != null && instance.ExceptionDeviation != null)
                {
                    ExceptionDeviation = (Property<double>)instance.ExceptionDeviation.Clone(this);
                    ExceptionDeviation.Initialize(instance.ExceptionDeviation);
                }

                if (type != null && type.ExceptionDeviationFormat != null)
                {
                    ExceptionDeviationFormat = (Property<ExceptionDeviationFormat>)type.ExceptionDeviationFormat.Clone(this);
                    ExceptionDeviationFormat.Initialize(type.ExceptionDeviationFormat);
                }
                else if (instance != null && instance.ExceptionDeviationFormat != null)
                {
                    ExceptionDeviationFormat = (Property<ExceptionDeviationFormat>)instance.ExceptionDeviationFormat.Clone(this);
                    ExceptionDeviationFormat.Initialize(instance.ExceptionDeviationFormat);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_aggregateConfiguration = Property<AggregateConfiguration>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.AggregateConfiguration, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.HistoricalConfigurationType_AggregateConfiguration);
        }
        
        /// <summary cref="NodeSource.CreateChildren" />
        protected override void CreateChildren(object configuration)
        {
            base.CreateChildren(configuration);
                            
            Stepped = (Property<bool>)InitializeOptionalChild(
                new ConstructInstanceDelegate(Property<bool>.Construct), 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Stepped, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.HistoricalConfigurationType_Stepped,
                configuration);

            Definition = (Property<string>)InitializeOptionalChild(
                new ConstructInstanceDelegate(Property<string>.Construct), 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Definition, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.HistoricalConfigurationType_Definition,
                configuration);

            MaxTimeInterval = (Property<double>)InitializeOptionalChild(
                new ConstructInstanceDelegate(Property<double>.Construct), 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.MaxTimeInterval, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.HistoricalConfigurationType_MaxTimeInterval,
                configuration);

            MinTimeInterval = (Property<double>)InitializeOptionalChild(
                new ConstructInstanceDelegate(Property<double>.Construct), 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.MinTimeInterval, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.HistoricalConfigurationType_MinTimeInterval,
                configuration);

            ExceptionDeviation = (Property<double>)InitializeOptionalChild(
                new ConstructInstanceDelegate(Property<double>.Construct), 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ExceptionDeviation, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.HistoricalConfigurationType_ExceptionDeviation,
                configuration);

            ExceptionDeviationFormat = (Property<ExceptionDeviationFormat>)InitializeOptionalChild(
                new ConstructInstanceDelegate(Property<ExceptionDeviationFormat>.Construct), 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ExceptionDeviationFormat, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.HistoricalConfigurationType_ExceptionDeviationFormat,
                configuration);
        }
        #endregion

        #region Private Fields
        private HistoricalConfigurationType m_typeDefinition;
        Property<AggregateConfiguration> m_aggregateConfiguration;
        Property<bool> m_stepped;
        Property<string> m_definition;
        Property<double> m_maxTimeInterval;
        Property<double> m_minTimeInterval;
        Property<double> m_exceptionDeviation;
        Property<ExceptionDeviationFormat> m_exceptionDeviationFormat;
        #endregion
    }
    #endregion

    #region HistoricalEventConfigurationType Class
    /// <summary>
    /// Represents the HistoricalEventConfigurationType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class HistoricalEventConfigurationType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public HistoricalEventConfigurationType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.HistoricalEventConfigurationType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.HistoricalEventConfigurationType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseObjectType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new HistoricalEventConfigurationType FindSource(IServerInternal server)
        {
            HistoricalEventConfigurationType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.HistoricalEventConfigurationType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as HistoricalEventConfigurationType;

                if (type != null)
                {
                    return type;
                }

                type = new HistoricalEventConfigurationType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                HistoricalEventConfigurationType clone = new HistoricalEventConfigurationType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                HistoricalEventConfigurationType type = source as HistoricalEventConfigurationType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endregion

    #region HistoricalEventConfiguration Class
    /// <summary>
    /// Represents an instance of the HistoricalEventConfigurationType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class HistoricalEventConfiguration : ObjectSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected HistoricalEventConfiguration(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = HistoricalEventConfigurationType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new HistoricalEventConfiguration Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            HistoricalEventConfiguration instance = new HistoricalEventConfiguration(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new HistoricalEventConfiguration Construct(IServerInternal server)
        {
            HistoricalEventConfiguration instance = new HistoricalEventConfiguration(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                HistoricalEventConfiguration clone = new HistoricalEventConfiguration(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                HistoricalEventConfiguration instance = source as HistoricalEventConfiguration;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                HistoricalEventConfigurationType type = source as HistoricalEventConfigurationType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private HistoricalEventConfigurationType m_typeDefinition;
        #endregion
    }
    #endregion

    #region HistoryServerCapabilitiesType Class
    /// <summary>
    /// Represents the HistoryServerCapabilitiesType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class HistoryServerCapabilitiesType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public HistoryServerCapabilitiesType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.HistoryServerCapabilitiesType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.HistoryServerCapabilitiesType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseObjectType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new HistoryServerCapabilitiesType FindSource(IServerInternal server)
        {
            HistoryServerCapabilitiesType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.HistoryServerCapabilitiesType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as HistoryServerCapabilitiesType;

                if (type != null)
                {
                    return type;
                }

                type = new HistoryServerCapabilitiesType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                HistoryServerCapabilitiesType clone = new HistoryServerCapabilitiesType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region AccessHistoryDataCapability
        /// <summary>
        /// A description for the AccessHistoryDataCapability Property.
        /// </summary>
        public Property<bool> AccessHistoryDataCapability
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_accessHistoryDataCapability; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_accessHistoryDataCapability != null)
                    {
                        RemoveChild(m_accessHistoryDataCapability);
                    }

                    m_accessHistoryDataCapability = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceAccessHistoryDataCapability(Property<bool> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                AccessHistoryDataCapability = replacement;

                AccessHistoryDataCapability.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.AccessHistoryDataCapability, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.HistoryServerCapabilitiesType_AccessHistoryDataCapability,
                    null);
            }
        }
        #endregion

        #region AccessEventsCapability
        /// <summary>
        /// A description for the AccessEventsCapability Property.
        /// </summary>
        public Property<bool> AccessEventsCapability
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_accessEventsCapability; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_accessEventsCapability != null)
                    {
                        RemoveChild(m_accessEventsCapability);
                    }

                    m_accessEventsCapability = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceAccessEventsCapability(Property<bool> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                AccessEventsCapability = replacement;

                AccessEventsCapability.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.AccessEventsCapability, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.HistoryServerCapabilitiesType_AccessEventsCapability,
                    null);
            }
        }
        #endregion

        #region MaxReturnValues
        /// <summary>
        /// A description for the MaxReturnValues Property.
        /// </summary>
        public Property<uint> MaxReturnValues
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_maxReturnValues; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_maxReturnValues != null)
                    {
                        RemoveChild(m_maxReturnValues);
                    }

                    m_maxReturnValues = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceMaxReturnValues(Property<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                MaxReturnValues = replacement;

                MaxReturnValues.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.MaxReturnValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.HistoryServerCapabilitiesType_MaxReturnValues,
                    null);
            }
        }
        #endregion

        #region InsertDataCapability
        /// <summary>
        /// A description for the InsertDataCapability Property.
        /// </summary>
        public Property<bool> InsertDataCapability
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_insertDataCapability; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_insertDataCapability != null)
                    {
                        RemoveChild(m_insertDataCapability);
                    }

                    m_insertDataCapability = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceInsertDataCapability(Property<bool> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                InsertDataCapability = replacement;

                InsertDataCapability.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.InsertDataCapability, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.HistoryServerCapabilitiesType_InsertDataCapability,
                    null);
            }
        }
        #endregion

        #region ReplaceDataCapability
        /// <summary>
        /// A description for the ReplaceDataCapability Property.
        /// </summary>
        public Property<bool> ReplaceDataCapability
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_replaceDataCapability; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_replaceDataCapability != null)
                    {
                        RemoveChild(m_replaceDataCapability);
                    }

                    m_replaceDataCapability = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceReplaceDataCapability(Property<bool> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ReplaceDataCapability = replacement;

                ReplaceDataCapability.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ReplaceDataCapability, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.HistoryServerCapabilitiesType_ReplaceDataCapability,
                    null);
            }
        }
        #endregion

        #region UpdateDataCapability
        /// <summary>
        /// A description for the UpdateDataCapability Property.
        /// </summary>
        public Property<bool> UpdateDataCapability
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_updateDataCapability; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_updateDataCapability != null)
                    {
                        RemoveChild(m_updateDataCapability);
                    }

                    m_updateDataCapability = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceUpdateDataCapability(Property<bool> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                UpdateDataCapability = replacement;

                UpdateDataCapability.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.UpdateDataCapability, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.HistoryServerCapabilitiesType_UpdateDataCapability,
                    null);
            }
        }
        #endregion

        #region DeleteRawCapability
        /// <summary>
        /// A description for the DeleteRawCapability Property.
        /// </summary>
        public Property<bool> DeleteRawCapability
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_deleteRawCapability; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_deleteRawCapability != null)
                    {
                        RemoveChild(m_deleteRawCapability);
                    }

                    m_deleteRawCapability = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceDeleteRawCapability(Property<bool> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                DeleteRawCapability = replacement;

                DeleteRawCapability.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.DeleteRawCapability, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.HistoryServerCapabilitiesType_DeleteRawCapability,
                    null);
            }
        }
        #endregion

        #region DeleteAtTimeCapability
        /// <summary>
        /// A description for the DeleteAtTimeCapability Property.
        /// </summary>
        public Property<bool> DeleteAtTimeCapability
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_deleteAtTimeCapability; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_deleteAtTimeCapability != null)
                    {
                        RemoveChild(m_deleteAtTimeCapability);
                    }

                    m_deleteAtTimeCapability = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceDeleteAtTimeCapability(Property<bool> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                DeleteAtTimeCapability = replacement;

                DeleteAtTimeCapability.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.DeleteAtTimeCapability, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.HistoryServerCapabilitiesType_DeleteAtTimeCapability,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                HistoryServerCapabilitiesType type = source as HistoryServerCapabilitiesType;

                if (type != null && type.AccessHistoryDataCapability != null)
                {
                    AccessHistoryDataCapability = (Property<bool>)type.AccessHistoryDataCapability.Clone(this);
                    AccessHistoryDataCapability.Initialize(type.AccessHistoryDataCapability);
                }

                if (type != null && type.AccessEventsCapability != null)
                {
                    AccessEventsCapability = (Property<bool>)type.AccessEventsCapability.Clone(this);
                    AccessEventsCapability.Initialize(type.AccessEventsCapability);
                }

                if (type != null && type.MaxReturnValues != null)
                {
                    MaxReturnValues = (Property<uint>)type.MaxReturnValues.Clone(this);
                    MaxReturnValues.Initialize(type.MaxReturnValues);
                }

                if (type != null && type.InsertDataCapability != null)
                {
                    InsertDataCapability = (Property<bool>)type.InsertDataCapability.Clone(this);
                    InsertDataCapability.Initialize(type.InsertDataCapability);
                }

                if (type != null && type.ReplaceDataCapability != null)
                {
                    ReplaceDataCapability = (Property<bool>)type.ReplaceDataCapability.Clone(this);
                    ReplaceDataCapability.Initialize(type.ReplaceDataCapability);
                }

                if (type != null && type.UpdateDataCapability != null)
                {
                    UpdateDataCapability = (Property<bool>)type.UpdateDataCapability.Clone(this);
                    UpdateDataCapability.Initialize(type.UpdateDataCapability);
                }

                if (type != null && type.DeleteRawCapability != null)
                {
                    DeleteRawCapability = (Property<bool>)type.DeleteRawCapability.Clone(this);
                    DeleteRawCapability.Initialize(type.DeleteRawCapability);
                }

                if (type != null && type.DeleteAtTimeCapability != null)
                {
                    DeleteAtTimeCapability = (Property<bool>)type.DeleteAtTimeCapability.Clone(this);
                    DeleteAtTimeCapability.Initialize(type.DeleteAtTimeCapability);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_accessHistoryDataCapability = Property<bool>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.HistoryServerCapabilitiesType_AccessHistoryDataCapability, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.AccessHistoryDataCapability, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.HistoryServerCapabilitiesType_AccessHistoryDataCapability);

            m_accessEventsCapability = Property<bool>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.HistoryServerCapabilitiesType_AccessEventsCapability, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.AccessEventsCapability, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.HistoryServerCapabilitiesType_AccessEventsCapability);

            m_maxReturnValues = Property<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.HistoryServerCapabilitiesType_MaxReturnValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.MaxReturnValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.HistoryServerCapabilitiesType_MaxReturnValues);

            m_insertDataCapability = Property<bool>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.HistoryServerCapabilitiesType_InsertDataCapability, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.InsertDataCapability, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.HistoryServerCapabilitiesType_InsertDataCapability);

            m_replaceDataCapability = Property<bool>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.HistoryServerCapabilitiesType_ReplaceDataCapability, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ReplaceDataCapability, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.HistoryServerCapabilitiesType_ReplaceDataCapability);

            m_updateDataCapability = Property<bool>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.HistoryServerCapabilitiesType_UpdateDataCapability, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.UpdateDataCapability, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.HistoryServerCapabilitiesType_UpdateDataCapability);

            m_deleteRawCapability = Property<bool>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.HistoryServerCapabilitiesType_DeleteRawCapability, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.DeleteRawCapability, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.HistoryServerCapabilitiesType_DeleteRawCapability);

            m_deleteAtTimeCapability = Property<bool>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.HistoryServerCapabilitiesType_DeleteAtTimeCapability, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.DeleteAtTimeCapability, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.HistoryServerCapabilitiesType_DeleteAtTimeCapability);
        }
        #endregion

        #region Private Fields
        Property<bool> m_accessHistoryDataCapability;
        Property<bool> m_accessEventsCapability;
        Property<uint> m_maxReturnValues;
        Property<bool> m_insertDataCapability;
        Property<bool> m_replaceDataCapability;
        Property<bool> m_updateDataCapability;
        Property<bool> m_deleteRawCapability;
        Property<bool> m_deleteAtTimeCapability;
        #endregion
    }
    #endregion

    #region HistoryServerCapabilities Class
    /// <summary>
    /// Represents an instance of the HistoryServerCapabilitiesType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class HistoryServerCapabilities : ObjectSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected HistoryServerCapabilities(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = HistoryServerCapabilitiesType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new HistoryServerCapabilities Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            HistoryServerCapabilities instance = new HistoryServerCapabilities(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new HistoryServerCapabilities Construct(IServerInternal server)
        {
            HistoryServerCapabilities instance = new HistoryServerCapabilities(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                HistoryServerCapabilities clone = new HistoryServerCapabilities(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region AccessHistoryDataCapability
        /// <summary>
        /// A description for the AccessHistoryDataCapability Property.
        /// </summary>
        public Property<bool> AccessHistoryDataCapability
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_accessHistoryDataCapability; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_accessHistoryDataCapability != null)
                    {
                        RemoveChild(m_accessHistoryDataCapability);
                    }

                    m_accessHistoryDataCapability = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceAccessHistoryDataCapability(Property<bool> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                AccessHistoryDataCapability = replacement;

                AccessHistoryDataCapability.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.AccessHistoryDataCapability, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.HistoryServerCapabilitiesType_AccessHistoryDataCapability,
                    null);
            }
        }
        #endregion

        #region AccessEventsCapability
        /// <summary>
        /// A description for the AccessEventsCapability Property.
        /// </summary>
        public Property<bool> AccessEventsCapability
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_accessEventsCapability; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_accessEventsCapability != null)
                    {
                        RemoveChild(m_accessEventsCapability);
                    }

                    m_accessEventsCapability = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceAccessEventsCapability(Property<bool> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                AccessEventsCapability = replacement;

                AccessEventsCapability.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.AccessEventsCapability, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.HistoryServerCapabilitiesType_AccessEventsCapability,
                    null);
            }
        }
        #endregion

        #region MaxReturnValues
        /// <summary>
        /// A description for the MaxReturnValues Property.
        /// </summary>
        public Property<uint> MaxReturnValues
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_maxReturnValues; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_maxReturnValues != null)
                    {
                        RemoveChild(m_maxReturnValues);
                    }

                    m_maxReturnValues = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceMaxReturnValues(Property<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                MaxReturnValues = replacement;

                MaxReturnValues.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.MaxReturnValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.HistoryServerCapabilitiesType_MaxReturnValues,
                    null);
            }
        }
        #endregion

        #region InsertDataCapability
        /// <summary>
        /// A description for the InsertDataCapability Property.
        /// </summary>
        public Property<bool> InsertDataCapability
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_insertDataCapability; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_insertDataCapability != null)
                    {
                        RemoveChild(m_insertDataCapability);
                    }

                    m_insertDataCapability = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceInsertDataCapability(Property<bool> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                InsertDataCapability = replacement;

                InsertDataCapability.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.InsertDataCapability, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.HistoryServerCapabilitiesType_InsertDataCapability,
                    null);
            }
        }
        #endregion

        #region ReplaceDataCapability
        /// <summary>
        /// A description for the ReplaceDataCapability Property.
        /// </summary>
        public Property<bool> ReplaceDataCapability
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_replaceDataCapability; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_replaceDataCapability != null)
                    {
                        RemoveChild(m_replaceDataCapability);
                    }

                    m_replaceDataCapability = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceReplaceDataCapability(Property<bool> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ReplaceDataCapability = replacement;

                ReplaceDataCapability.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ReplaceDataCapability, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.HistoryServerCapabilitiesType_ReplaceDataCapability,
                    null);
            }
        }
        #endregion

        #region UpdateDataCapability
        /// <summary>
        /// A description for the UpdateDataCapability Property.
        /// </summary>
        public Property<bool> UpdateDataCapability
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_updateDataCapability; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_updateDataCapability != null)
                    {
                        RemoveChild(m_updateDataCapability);
                    }

                    m_updateDataCapability = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceUpdateDataCapability(Property<bool> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                UpdateDataCapability = replacement;

                UpdateDataCapability.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.UpdateDataCapability, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.HistoryServerCapabilitiesType_UpdateDataCapability,
                    null);
            }
        }
        #endregion

        #region DeleteRawCapability
        /// <summary>
        /// A description for the DeleteRawCapability Property.
        /// </summary>
        public Property<bool> DeleteRawCapability
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_deleteRawCapability; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_deleteRawCapability != null)
                    {
                        RemoveChild(m_deleteRawCapability);
                    }

                    m_deleteRawCapability = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceDeleteRawCapability(Property<bool> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                DeleteRawCapability = replacement;

                DeleteRawCapability.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.DeleteRawCapability, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.HistoryServerCapabilitiesType_DeleteRawCapability,
                    null);
            }
        }
        #endregion

        #region DeleteAtTimeCapability
        /// <summary>
        /// A description for the DeleteAtTimeCapability Property.
        /// </summary>
        public Property<bool> DeleteAtTimeCapability
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_deleteAtTimeCapability; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_deleteAtTimeCapability != null)
                    {
                        RemoveChild(m_deleteAtTimeCapability);
                    }

                    m_deleteAtTimeCapability = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceDeleteAtTimeCapability(Property<bool> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                DeleteAtTimeCapability = replacement;

                DeleteAtTimeCapability.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.DeleteAtTimeCapability, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.HistoryServerCapabilitiesType_DeleteAtTimeCapability,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                HistoryServerCapabilities instance = source as HistoryServerCapabilities;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                HistoryServerCapabilitiesType type = source as HistoryServerCapabilitiesType;

                if (type != null && type.AccessHistoryDataCapability != null)
                {
                    AccessHistoryDataCapability = (Property<bool>)type.AccessHistoryDataCapability.Clone(this);
                    AccessHistoryDataCapability.Initialize(type.AccessHistoryDataCapability);
                }
                else if (instance != null && instance.AccessHistoryDataCapability != null)
                {
                    AccessHistoryDataCapability = (Property<bool>)instance.AccessHistoryDataCapability.Clone(this);
                    AccessHistoryDataCapability.Initialize(instance.AccessHistoryDataCapability);
                }

                if (type != null && type.AccessEventsCapability != null)
                {
                    AccessEventsCapability = (Property<bool>)type.AccessEventsCapability.Clone(this);
                    AccessEventsCapability.Initialize(type.AccessEventsCapability);
                }
                else if (instance != null && instance.AccessEventsCapability != null)
                {
                    AccessEventsCapability = (Property<bool>)instance.AccessEventsCapability.Clone(this);
                    AccessEventsCapability.Initialize(instance.AccessEventsCapability);
                }

                if (type != null && type.MaxReturnValues != null)
                {
                    MaxReturnValues = (Property<uint>)type.MaxReturnValues.Clone(this);
                    MaxReturnValues.Initialize(type.MaxReturnValues);
                }
                else if (instance != null && instance.MaxReturnValues != null)
                {
                    MaxReturnValues = (Property<uint>)instance.MaxReturnValues.Clone(this);
                    MaxReturnValues.Initialize(instance.MaxReturnValues);
                }

                if (type != null && type.InsertDataCapability != null)
                {
                    InsertDataCapability = (Property<bool>)type.InsertDataCapability.Clone(this);
                    InsertDataCapability.Initialize(type.InsertDataCapability);
                }
                else if (instance != null && instance.InsertDataCapability != null)
                {
                    InsertDataCapability = (Property<bool>)instance.InsertDataCapability.Clone(this);
                    InsertDataCapability.Initialize(instance.InsertDataCapability);
                }

                if (type != null && type.ReplaceDataCapability != null)
                {
                    ReplaceDataCapability = (Property<bool>)type.ReplaceDataCapability.Clone(this);
                    ReplaceDataCapability.Initialize(type.ReplaceDataCapability);
                }
                else if (instance != null && instance.ReplaceDataCapability != null)
                {
                    ReplaceDataCapability = (Property<bool>)instance.ReplaceDataCapability.Clone(this);
                    ReplaceDataCapability.Initialize(instance.ReplaceDataCapability);
                }

                if (type != null && type.UpdateDataCapability != null)
                {
                    UpdateDataCapability = (Property<bool>)type.UpdateDataCapability.Clone(this);
                    UpdateDataCapability.Initialize(type.UpdateDataCapability);
                }
                else if (instance != null && instance.UpdateDataCapability != null)
                {
                    UpdateDataCapability = (Property<bool>)instance.UpdateDataCapability.Clone(this);
                    UpdateDataCapability.Initialize(instance.UpdateDataCapability);
                }

                if (type != null && type.DeleteRawCapability != null)
                {
                    DeleteRawCapability = (Property<bool>)type.DeleteRawCapability.Clone(this);
                    DeleteRawCapability.Initialize(type.DeleteRawCapability);
                }
                else if (instance != null && instance.DeleteRawCapability != null)
                {
                    DeleteRawCapability = (Property<bool>)instance.DeleteRawCapability.Clone(this);
                    DeleteRawCapability.Initialize(instance.DeleteRawCapability);
                }

                if (type != null && type.DeleteAtTimeCapability != null)
                {
                    DeleteAtTimeCapability = (Property<bool>)type.DeleteAtTimeCapability.Clone(this);
                    DeleteAtTimeCapability.Initialize(type.DeleteAtTimeCapability);
                }
                else if (instance != null && instance.DeleteAtTimeCapability != null)
                {
                    DeleteAtTimeCapability = (Property<bool>)instance.DeleteAtTimeCapability.Clone(this);
                    DeleteAtTimeCapability.Initialize(instance.DeleteAtTimeCapability);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_accessHistoryDataCapability = Property<bool>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.AccessHistoryDataCapability, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.HistoryServerCapabilitiesType_AccessHistoryDataCapability);

            m_accessEventsCapability = Property<bool>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.AccessEventsCapability, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.HistoryServerCapabilitiesType_AccessEventsCapability);

            m_maxReturnValues = Property<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.MaxReturnValues, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.HistoryServerCapabilitiesType_MaxReturnValues);

            m_insertDataCapability = Property<bool>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.InsertDataCapability, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.HistoryServerCapabilitiesType_InsertDataCapability);

            m_replaceDataCapability = Property<bool>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ReplaceDataCapability, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.HistoryServerCapabilitiesType_ReplaceDataCapability);

            m_updateDataCapability = Property<bool>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.UpdateDataCapability, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.HistoryServerCapabilitiesType_UpdateDataCapability);

            m_deleteRawCapability = Property<bool>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.DeleteRawCapability, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.HistoryServerCapabilitiesType_DeleteRawCapability);

            m_deleteAtTimeCapability = Property<bool>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.DeleteAtTimeCapability, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.HistoryServerCapabilitiesType_DeleteAtTimeCapability);
        }
        #endregion

        #region Private Fields
        private HistoryServerCapabilitiesType m_typeDefinition;
        Property<bool> m_accessHistoryDataCapability;
        Property<bool> m_accessEventsCapability;
        Property<uint> m_maxReturnValues;
        Property<bool> m_insertDataCapability;
        Property<bool> m_replaceDataCapability;
        Property<bool> m_updateDataCapability;
        Property<bool> m_deleteRawCapability;
        Property<bool> m_deleteAtTimeCapability;
        #endregion
    }
    #endregion

    #region AggregateFunctionType Class
    /// <summary>
    /// Represents the AggregateFunctionType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AggregateFunctionType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AggregateFunctionType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AggregateFunctionType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AggregateFunctionType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseObjectType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AggregateFunctionType FindSource(IServerInternal server)
        {
            AggregateFunctionType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AggregateFunctionType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AggregateFunctionType;

                if (type != null)
                {
                    return type;
                }

                type = new AggregateFunctionType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AggregateFunctionType clone = new AggregateFunctionType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AggregateFunctionType type = source as AggregateFunctionType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endregion

    #region AggregateFunction Class
    /// <summary>
    /// Represents an instance of the AggregateFunctionType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AggregateFunction : ObjectSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AggregateFunction(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AggregateFunctionType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AggregateFunction Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AggregateFunction instance = new AggregateFunction(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AggregateFunction Construct(IServerInternal server)
        {
            AggregateFunction instance = new AggregateFunction(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AggregateFunction clone = new AggregateFunction(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AggregateFunction instance = source as AggregateFunction;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AggregateFunctionType type = source as AggregateFunctionType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private AggregateFunctionType m_typeDefinition;
        #endregion
    }
    #endregion

    #region DataItemType Class
    /// <summary>
    /// Represents the DataItemType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class DataItemType<T> : VariableTypeSource<T>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public DataItemType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.VariableTypes.DataItemType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.DataItemType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.VariableTypes.BaseDataVariableType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new DataItemType<T> FindSource(IServerInternal server)
        {
            DataItemType<T> type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.VariableTypes.DataItemType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as DataItemType<T>;

                if (type != null)
                {
                    return type;
                }

                type = new DataItemType<T>(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                DataItemType<T> clone = new DataItemType<T>(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region Definition
        /// <summary>
        /// A vendor-specific, human readable string that specifies how the value of this DataItem is calculated.
        /// </summary>
        public Property<string> Definition
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_definition; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_definition != null)
                    {
                        RemoveChild(m_definition);
                    }

                    m_definition = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceDefinition(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Definition = replacement;

                Definition.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Definition, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.DataItemType_Definition,
                    null);
            }
        }
        #endregion

        #region ValuePrecision
        /// <summary>
        /// The maximum precision that the server can maintain for the item based on restrictions in the target environment.
        /// </summary>
        public Property<double> ValuePrecision
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_valuePrecision; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_valuePrecision != null)
                    {
                        RemoveChild(m_valuePrecision);
                    }

                    m_valuePrecision = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceValuePrecision(Property<double> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ValuePrecision = replacement;

                ValuePrecision.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ValuePrecision, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.DataItemType_ValuePrecision,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                DataItemType<T> type = source as DataItemType<T>;

                if (type != null && type.Definition != null)
                {
                    Definition = (Property<string>)type.Definition.Clone(this);
                    Definition.Initialize(type.Definition);
                }

                if (type != null && type.ValuePrecision != null)
                {
                    ValuePrecision = (Property<double>)type.ValuePrecision.Clone(this);
                    ValuePrecision.Initialize(type.ValuePrecision);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_definition = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.DataItemType_Definition, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Definition, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.DataItemType_Definition);

            m_valuePrecision = Property<double>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.DataItemType_ValuePrecision, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ValuePrecision, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.DataItemType_ValuePrecision);
        }
        #endregion

        #region Private Fields
        Property<string> m_definition;
        Property<double> m_valuePrecision;
        #endregion
    }
    #endregion

    #region DataItem Class
    /// <summary>
    /// Represents an instance of the DataItemType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class DataItem<T> : DataVariable<T>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected DataItem(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = DataItemType<T>.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new DataItem<T> Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            DataItem<T> instance = new DataItem<T>(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new DataItem<T> Construct(IServerInternal server)
        {
            DataItem<T> instance = new DataItem<T>(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                DataItem<T> clone = new DataItem<T>(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region Definition
        /// <summary>
        /// A vendor-specific, human readable string that specifies how the value of this DataItem is calculated.
        /// </summary>
        public Property<string> Definition
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_definition; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_definition != null)
                    {
                        RemoveChild(m_definition);
                    }

                    m_definition = value; 
                }
            }
        }

        /// <summary>
        /// Whether the Definition node is specified for the node.
        /// </summary>
        public bool DefinitionSpecified
        {
        	get 
            { 
                lock (DataLock)
                {
                    return m_definition != null; 
                }
            }
        }

        /// <summary>
        /// Specifies the optional child.
        /// </summary>
        public void SpecifyDefinition(Property<string> replacement)
        {
            CheckNodeManagerState();

            lock (DataLock)
            {
                if (DefinitionSpecified)
                {
                    Definition = (Property<string>)DeleteChild(m_definition);
                }

                if (replacement != null)
                {       
                    Definition = replacement;

                    Definition.Create(
                        this.NodeId, 
                        new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                        null,
                        new QualifiedName(Opc.Ua.BrowseNames.Definition, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                        Opc.Ua.Variables.DataItemType_Definition,
                        null);
                }
            }
        }
        #endregion

        #region ValuePrecision
        /// <summary>
        /// The maximum precision that the server can maintain for the item based on restrictions in the target environment.
        /// </summary>
        public Property<double> ValuePrecision
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_valuePrecision; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_valuePrecision != null)
                    {
                        RemoveChild(m_valuePrecision);
                    }

                    m_valuePrecision = value; 
                }
            }
        }

        /// <summary>
        /// Whether the ValuePrecision node is specified for the node.
        /// </summary>
        public bool ValuePrecisionSpecified
        {
        	get 
            { 
                lock (DataLock)
                {
                    return m_valuePrecision != null; 
                }
            }
        }

        /// <summary>
        /// Specifies the optional child.
        /// </summary>
        public void SpecifyValuePrecision(Property<double> replacement)
        {
            CheckNodeManagerState();

            lock (DataLock)
            {
                if (ValuePrecisionSpecified)
                {
                    ValuePrecision = (Property<double>)DeleteChild(m_valuePrecision);
                }

                if (replacement != null)
                {       
                    ValuePrecision = replacement;

                    ValuePrecision.Create(
                        this.NodeId, 
                        new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                        null,
                        new QualifiedName(Opc.Ua.BrowseNames.ValuePrecision, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                        Opc.Ua.Variables.DataItemType_ValuePrecision,
                        null);
                }
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                DataItem<T> instance = source as DataItem<T>;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                DataItemType<T> type = source as DataItemType<T>;

                if (type != null && type.Definition != null)
                {
                    Definition = (Property<string>)type.Definition.Clone(this);
                    Definition.Initialize(type.Definition);
                }
                else if (instance != null && instance.Definition != null)
                {
                    Definition = (Property<string>)instance.Definition.Clone(this);
                    Definition.Initialize(instance.Definition);
                }

                if (type != null && type.ValuePrecision != null)
                {
                    ValuePrecision = (Property<double>)type.ValuePrecision.Clone(this);
                    ValuePrecision.Initialize(type.ValuePrecision);
                }
                else if (instance != null && instance.ValuePrecision != null)
                {
                    ValuePrecision = (Property<double>)instance.ValuePrecision.Clone(this);
                    ValuePrecision.Initialize(instance.ValuePrecision);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        
        /// <summary cref="NodeSource.CreateChildren" />
        protected override void CreateChildren(object configuration)
        {
            base.CreateChildren(configuration);
                            
            Definition = (Property<string>)InitializeOptionalChild(
                new ConstructInstanceDelegate(Property<string>.Construct), 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Definition, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.DataItemType_Definition,
                configuration);

            ValuePrecision = (Property<double>)InitializeOptionalChild(
                new ConstructInstanceDelegate(Property<double>.Construct), 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ValuePrecision, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.DataItemType_ValuePrecision,
                configuration);
        }
        #endregion

        #region Private Fields
        private DataItemType<T> m_typeDefinition;
        Property<string> m_definition;
        Property<double> m_valuePrecision;
        #endregion
    }
    #endregion

    #region AnalogItemType Class
    /// <summary>
    /// Represents the AnalogItemType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AnalogItemType<T> : VariableTypeSource<T>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AnalogItemType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.VariableTypes.AnalogItemType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AnalogItemType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.VariableTypes.DataItemType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AnalogItemType<T> FindSource(IServerInternal server)
        {
            AnalogItemType<T> type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.VariableTypes.AnalogItemType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AnalogItemType<T>;

                if (type != null)
                {
                    return type;
                }

                type = new AnalogItemType<T>(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AnalogItemType<T> clone = new AnalogItemType<T>(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region EURange
        /// <summary>
        /// A description for the EURange Property.
        /// </summary>
        public Property<Range> EURange
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_eURange; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_eURange != null)
                    {
                        RemoveChild(m_eURange);
                    }

                    m_eURange = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceEURange(Property<Range> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                EURange = replacement;

                EURange.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.EURange, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AnalogItemType_EURange,
                    null);
            }
        }
        #endregion

        #region InstrumentRange
        /// <summary>
        /// A description for the InstrumentRange Property.
        /// </summary>
        public Property<Range> InstrumentRange
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_instrumentRange; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_instrumentRange != null)
                    {
                        RemoveChild(m_instrumentRange);
                    }

                    m_instrumentRange = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceInstrumentRange(Property<Range> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                InstrumentRange = replacement;

                InstrumentRange.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.InstrumentRange, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AnalogItemType_InstrumentRange,
                    null);
            }
        }
        #endregion

        #region EngineeringUnits
        /// <summary>
        /// A description for the EngineeringUnits Property.
        /// </summary>
        public Property<EUInformation> EngineeringUnits
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_engineeringUnits; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_engineeringUnits != null)
                    {
                        RemoveChild(m_engineeringUnits);
                    }

                    m_engineeringUnits = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceEngineeringUnits(Property<EUInformation> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                EngineeringUnits = replacement;

                EngineeringUnits.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.EngineeringUnits, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AnalogItemType_EngineeringUnits,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AnalogItemType<T> type = source as AnalogItemType<T>;

                if (type != null && type.EURange != null)
                {
                    EURange = (Property<Range>)type.EURange.Clone(this);
                    EURange.Initialize(type.EURange);
                }

                if (type != null && type.InstrumentRange != null)
                {
                    InstrumentRange = (Property<Range>)type.InstrumentRange.Clone(this);
                    InstrumentRange.Initialize(type.InstrumentRange);
                }

                if (type != null && type.EngineeringUnits != null)
                {
                    EngineeringUnits = (Property<EUInformation>)type.EngineeringUnits.Clone(this);
                    EngineeringUnits.Initialize(type.EngineeringUnits);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_eURange = Property<Range>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AnalogItemType_EURange, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.EURange, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AnalogItemType_EURange);

            m_instrumentRange = Property<Range>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AnalogItemType_InstrumentRange, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.InstrumentRange, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AnalogItemType_InstrumentRange);

            m_engineeringUnits = Property<EUInformation>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AnalogItemType_EngineeringUnits, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.EngineeringUnits, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AnalogItemType_EngineeringUnits);
        }
        #endregion

        #region Private Fields
        Property<Range> m_eURange;
        Property<Range> m_instrumentRange;
        Property<EUInformation> m_engineeringUnits;
        #endregion
    }
    #endregion

    #region AnalogItem Class
    /// <summary>
    /// Represents an instance of the AnalogItemType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AnalogItem<T> : DataItem<T>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AnalogItem(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AnalogItemType<T>.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AnalogItem<T> Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AnalogItem<T> instance = new AnalogItem<T>(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AnalogItem<T> Construct(IServerInternal server)
        {
            AnalogItem<T> instance = new AnalogItem<T>(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AnalogItem<T> clone = new AnalogItem<T>(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region EURange
        /// <summary>
        /// A description for the EURange Property.
        /// </summary>
        public Property<Range> EURange
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_eURange; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_eURange != null)
                    {
                        RemoveChild(m_eURange);
                    }

                    m_eURange = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceEURange(Property<Range> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                EURange = replacement;

                EURange.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.EURange, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AnalogItemType_EURange,
                    null);
            }
        }
        #endregion

        #region InstrumentRange
        /// <summary>
        /// A description for the InstrumentRange Property.
        /// </summary>
        public Property<Range> InstrumentRange
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_instrumentRange; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_instrumentRange != null)
                    {
                        RemoveChild(m_instrumentRange);
                    }

                    m_instrumentRange = value; 
                }
            }
        }

        /// <summary>
        /// Whether the InstrumentRange node is specified for the node.
        /// </summary>
        public bool InstrumentRangeSpecified
        {
        	get 
            { 
                lock (DataLock)
                {
                    return m_instrumentRange != null; 
                }
            }
        }

        /// <summary>
        /// Specifies the optional child.
        /// </summary>
        public void SpecifyInstrumentRange(Property<Range> replacement)
        {
            CheckNodeManagerState();

            lock (DataLock)
            {
                if (InstrumentRangeSpecified)
                {
                    InstrumentRange = (Property<Range>)DeleteChild(m_instrumentRange);
                }

                if (replacement != null)
                {       
                    InstrumentRange = replacement;

                    InstrumentRange.Create(
                        this.NodeId, 
                        new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                        null,
                        new QualifiedName(Opc.Ua.BrowseNames.InstrumentRange, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                        Opc.Ua.Variables.AnalogItemType_InstrumentRange,
                        null);
                }
            }
        }
        #endregion

        #region EngineeringUnits
        /// <summary>
        /// A description for the EngineeringUnits Property.
        /// </summary>
        public Property<EUInformation> EngineeringUnits
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_engineeringUnits; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_engineeringUnits != null)
                    {
                        RemoveChild(m_engineeringUnits);
                    }

                    m_engineeringUnits = value; 
                }
            }
        }

        /// <summary>
        /// Whether the EngineeringUnits node is specified for the node.
        /// </summary>
        public bool EngineeringUnitsSpecified
        {
        	get 
            { 
                lock (DataLock)
                {
                    return m_engineeringUnits != null; 
                }
            }
        }

        /// <summary>
        /// Specifies the optional child.
        /// </summary>
        public void SpecifyEngineeringUnits(Property<EUInformation> replacement)
        {
            CheckNodeManagerState();

            lock (DataLock)
            {
                if (EngineeringUnitsSpecified)
                {
                    EngineeringUnits = (Property<EUInformation>)DeleteChild(m_engineeringUnits);
                }

                if (replacement != null)
                {       
                    EngineeringUnits = replacement;

                    EngineeringUnits.Create(
                        this.NodeId, 
                        new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                        null,
                        new QualifiedName(Opc.Ua.BrowseNames.EngineeringUnits, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                        Opc.Ua.Variables.AnalogItemType_EngineeringUnits,
                        null);
                }
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AnalogItem<T> instance = source as AnalogItem<T>;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AnalogItemType<T> type = source as AnalogItemType<T>;

                if (type != null && type.EURange != null)
                {
                    EURange = (Property<Range>)type.EURange.Clone(this);
                    EURange.Initialize(type.EURange);
                }
                else if (instance != null && instance.EURange != null)
                {
                    EURange = (Property<Range>)instance.EURange.Clone(this);
                    EURange.Initialize(instance.EURange);
                }

                if (type != null && type.InstrumentRange != null)
                {
                    InstrumentRange = (Property<Range>)type.InstrumentRange.Clone(this);
                    InstrumentRange.Initialize(type.InstrumentRange);
                }
                else if (instance != null && instance.InstrumentRange != null)
                {
                    InstrumentRange = (Property<Range>)instance.InstrumentRange.Clone(this);
                    InstrumentRange.Initialize(instance.InstrumentRange);
                }

                if (type != null && type.EngineeringUnits != null)
                {
                    EngineeringUnits = (Property<EUInformation>)type.EngineeringUnits.Clone(this);
                    EngineeringUnits.Initialize(type.EngineeringUnits);
                }
                else if (instance != null && instance.EngineeringUnits != null)
                {
                    EngineeringUnits = (Property<EUInformation>)instance.EngineeringUnits.Clone(this);
                    EngineeringUnits.Initialize(instance.EngineeringUnits);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_eURange = Property<Range>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.EURange, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AnalogItemType_EURange);
        }
        
        /// <summary cref="NodeSource.CreateChildren" />
        protected override void CreateChildren(object configuration)
        {
            base.CreateChildren(configuration);
                            
            InstrumentRange = (Property<Range>)InitializeOptionalChild(
                new ConstructInstanceDelegate(Property<Range>.Construct), 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.InstrumentRange, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AnalogItemType_InstrumentRange,
                configuration);

            EngineeringUnits = (Property<EUInformation>)InitializeOptionalChild(
                new ConstructInstanceDelegate(Property<EUInformation>.Construct), 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.EngineeringUnits, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AnalogItemType_EngineeringUnits,
                configuration);
        }
        #endregion

        #region Private Fields
        private AnalogItemType<T> m_typeDefinition;
        Property<Range> m_eURange;
        Property<Range> m_instrumentRange;
        Property<EUInformation> m_engineeringUnits;
        #endregion
    }
    #endregion

    #region DiscreteItemType Class
    /// <summary>
    /// Represents the DiscreteItemType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class DiscreteItemType<T> : VariableTypeSource<T>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public DiscreteItemType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.VariableTypes.DiscreteItemType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.DiscreteItemType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.VariableTypes.DataItemType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new DiscreteItemType<T> FindSource(IServerInternal server)
        {
            DiscreteItemType<T> type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.VariableTypes.DiscreteItemType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as DiscreteItemType<T>;

                if (type != null)
                {
                    return type;
                }

                type = new DiscreteItemType<T>(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                DiscreteItemType<T> clone = new DiscreteItemType<T>(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                DiscreteItemType<T> type = source as DiscreteItemType<T>;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endregion

    #region DiscreteItem Class
    /// <summary>
    /// Represents an instance of the DiscreteItemType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class DiscreteItem<T> : DataItem<T>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected DiscreteItem(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = DiscreteItemType<T>.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new DiscreteItem<T> Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            DiscreteItem<T> instance = new DiscreteItem<T>(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new DiscreteItem<T> Construct(IServerInternal server)
        {
            DiscreteItem<T> instance = new DiscreteItem<T>(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                DiscreteItem<T> clone = new DiscreteItem<T>(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                DiscreteItem<T> instance = source as DiscreteItem<T>;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                DiscreteItemType<T> type = source as DiscreteItemType<T>;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private DiscreteItemType<T> m_typeDefinition;
        #endregion
    }
    #endregion

    #region TwoStateDiscreteType Class
    /// <summary>
    /// Represents the TwoStateDiscreteType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class TwoStateDiscreteType<T> : VariableTypeSource<T>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public TwoStateDiscreteType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.VariableTypes.TwoStateDiscreteType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.TwoStateDiscreteType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.VariableTypes.DiscreteItemType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new TwoStateDiscreteType<T> FindSource(IServerInternal server)
        {
            TwoStateDiscreteType<T> type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.VariableTypes.TwoStateDiscreteType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as TwoStateDiscreteType<T>;

                if (type != null)
                {
                    return type;
                }

                type = new TwoStateDiscreteType<T>(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                TwoStateDiscreteType<T> clone = new TwoStateDiscreteType<T>(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region FalseState
        /// <summary>
        /// A description for the FalseState Property.
        /// </summary>
        public Property<LocalizedText> FalseState
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_falseState; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_falseState != null)
                    {
                        RemoveChild(m_falseState);
                    }

                    m_falseState = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceFalseState(Property<LocalizedText> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                FalseState = replacement;

                FalseState.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.FalseState, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.TwoStateDiscreteType_FalseState,
                    null);
            }
        }
        #endregion

        #region TrueState
        /// <summary>
        /// A description for the TrueState Property.
        /// </summary>
        public Property<LocalizedText> TrueState
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_trueState; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_trueState != null)
                    {
                        RemoveChild(m_trueState);
                    }

                    m_trueState = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceTrueState(Property<LocalizedText> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                TrueState = replacement;

                TrueState.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.TrueState, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.TwoStateDiscreteType_TrueState,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                TwoStateDiscreteType<T> type = source as TwoStateDiscreteType<T>;

                if (type != null && type.FalseState != null)
                {
                    FalseState = (Property<LocalizedText>)type.FalseState.Clone(this);
                    FalseState.Initialize(type.FalseState);
                }

                if (type != null && type.TrueState != null)
                {
                    TrueState = (Property<LocalizedText>)type.TrueState.Clone(this);
                    TrueState.Initialize(type.TrueState);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_falseState = Property<LocalizedText>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.TwoStateDiscreteType_FalseState, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.FalseState, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.TwoStateDiscreteType_FalseState);

            m_trueState = Property<LocalizedText>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.TwoStateDiscreteType_TrueState, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.TrueState, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.TwoStateDiscreteType_TrueState);
        }
        #endregion

        #region Private Fields
        Property<LocalizedText> m_falseState;
        Property<LocalizedText> m_trueState;
        #endregion
    }
    #endregion

    #region TwoStateDiscrete Class
    /// <summary>
    /// Represents an instance of the TwoStateDiscreteType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class TwoStateDiscrete<T> : DiscreteItem<T>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected TwoStateDiscrete(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = TwoStateDiscreteType<T>.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new TwoStateDiscrete<T> Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            TwoStateDiscrete<T> instance = new TwoStateDiscrete<T>(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new TwoStateDiscrete<T> Construct(IServerInternal server)
        {
            TwoStateDiscrete<T> instance = new TwoStateDiscrete<T>(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                TwoStateDiscrete<T> clone = new TwoStateDiscrete<T>(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region FalseState
        /// <summary>
        /// A description for the FalseState Property.
        /// </summary>
        public Property<LocalizedText> FalseState
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_falseState; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_falseState != null)
                    {
                        RemoveChild(m_falseState);
                    }

                    m_falseState = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceFalseState(Property<LocalizedText> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                FalseState = replacement;

                FalseState.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.FalseState, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.TwoStateDiscreteType_FalseState,
                    null);
            }
        }
        #endregion

        #region TrueState
        /// <summary>
        /// A description for the TrueState Property.
        /// </summary>
        public Property<LocalizedText> TrueState
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_trueState; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_trueState != null)
                    {
                        RemoveChild(m_trueState);
                    }

                    m_trueState = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceTrueState(Property<LocalizedText> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                TrueState = replacement;

                TrueState.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.TrueState, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.TwoStateDiscreteType_TrueState,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                TwoStateDiscrete<T> instance = source as TwoStateDiscrete<T>;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                TwoStateDiscreteType<T> type = source as TwoStateDiscreteType<T>;

                if (type != null && type.FalseState != null)
                {
                    FalseState = (Property<LocalizedText>)type.FalseState.Clone(this);
                    FalseState.Initialize(type.FalseState);
                }
                else if (instance != null && instance.FalseState != null)
                {
                    FalseState = (Property<LocalizedText>)instance.FalseState.Clone(this);
                    FalseState.Initialize(instance.FalseState);
                }

                if (type != null && type.TrueState != null)
                {
                    TrueState = (Property<LocalizedText>)type.TrueState.Clone(this);
                    TrueState.Initialize(type.TrueState);
                }
                else if (instance != null && instance.TrueState != null)
                {
                    TrueState = (Property<LocalizedText>)instance.TrueState.Clone(this);
                    TrueState.Initialize(instance.TrueState);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_falseState = Property<LocalizedText>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.FalseState, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.TwoStateDiscreteType_FalseState);

            m_trueState = Property<LocalizedText>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.TrueState, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.TwoStateDiscreteType_TrueState);
        }
        #endregion

        #region Private Fields
        private TwoStateDiscreteType<T> m_typeDefinition;
        Property<LocalizedText> m_falseState;
        Property<LocalizedText> m_trueState;
        #endregion
    }
    #endregion

    #region MultiStateDiscreteType Class
    /// <summary>
    /// Represents the MultiStateDiscreteType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class MultiStateDiscreteType<T> : VariableTypeSource<T>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public MultiStateDiscreteType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.VariableTypes.MultiStateDiscreteType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.MultiStateDiscreteType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.VariableTypes.DiscreteItemType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new MultiStateDiscreteType<T> FindSource(IServerInternal server)
        {
            MultiStateDiscreteType<T> type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.VariableTypes.MultiStateDiscreteType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as MultiStateDiscreteType<T>;

                if (type != null)
                {
                    return type;
                }

                type = new MultiStateDiscreteType<T>(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                MultiStateDiscreteType<T> clone = new MultiStateDiscreteType<T>(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region EnumStrings
        /// <summary>
        /// A description for the EnumStrings Property.
        /// </summary>
        public Property<IList<LocalizedText>> EnumStrings
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_enumStrings; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_enumStrings != null)
                    {
                        RemoveChild(m_enumStrings);
                    }

                    m_enumStrings = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceEnumStrings(Property<IList<LocalizedText>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                EnumStrings = replacement;

                EnumStrings.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.EnumStrings, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.MultiStateDiscreteType_EnumStrings,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                MultiStateDiscreteType<T> type = source as MultiStateDiscreteType<T>;

                if (type != null && type.EnumStrings != null)
                {
                    EnumStrings = (Property<IList<LocalizedText>>)type.EnumStrings.Clone(this);
                    EnumStrings.Initialize(type.EnumStrings);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_enumStrings = Property<IList<LocalizedText>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.BaseDataVariableType_EnumStrings, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.EnumStrings, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.BaseDataVariableType_EnumStrings);
        }
        #endregion

        #region Private Fields
        Property<IList<LocalizedText>> m_enumStrings;
        #endregion
    }
    #endregion

    #region MultiStateDiscrete Class
    /// <summary>
    /// Represents an instance of the MultiStateDiscreteType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class MultiStateDiscrete<T> : DiscreteItem<T>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected MultiStateDiscrete(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = MultiStateDiscreteType<T>.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new MultiStateDiscrete<T> Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            MultiStateDiscrete<T> instance = new MultiStateDiscrete<T>(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new MultiStateDiscrete<T> Construct(IServerInternal server)
        {
            MultiStateDiscrete<T> instance = new MultiStateDiscrete<T>(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                MultiStateDiscrete<T> clone = new MultiStateDiscrete<T>(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region EnumStrings
        /// <summary>
        /// A description for the EnumStrings Property.
        /// </summary>
        public new Property<IList<LocalizedText>> EnumStrings
        {
        	get 
            {    
                return (Property<IList<LocalizedText>>)base.EnumStrings;
            }

            protected set
            {
                base.EnumStrings = value;
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                MultiStateDiscrete<T> instance = source as MultiStateDiscrete<T>;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                MultiStateDiscreteType<T> type = source as MultiStateDiscreteType<T>;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            EnumStrings = Property<IList<LocalizedText>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.EnumStrings, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.BaseDataVariableType_EnumStrings);
        }
        #endregion

        #region Private Fields
        private MultiStateDiscreteType<T> m_typeDefinition;
        #endregion
    }
    #endregion

    #region ProgramTransitionEventType Class
    /// <summary>
    /// Represents the ProgramTransitionEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class ProgramTransitionEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public ProgramTransitionEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.ProgramTransitionEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.ProgramTransitionEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.TransitionEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new ProgramTransitionEventType FindSource(IServerInternal server)
        {
            ProgramTransitionEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.ProgramTransitionEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as ProgramTransitionEventType;

                if (type != null)
                {
                    return type;
                }

                type = new ProgramTransitionEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                ProgramTransitionEventType clone = new ProgramTransitionEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region IntermediateResult
        /// <summary>
        /// A description for the IntermediateResult Property.
        /// </summary>
        public Property<object> IntermediateResult
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_intermediateResult; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_intermediateResult != null)
                    {
                        RemoveChild(m_intermediateResult);
                    }

                    m_intermediateResult = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceIntermediateResult(Property<object> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                IntermediateResult = replacement;

                IntermediateResult.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.IntermediateResult, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ProgramTransitionEventType_IntermediateResult,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                ProgramTransitionEventType type = source as ProgramTransitionEventType;

                if (type != null && type.IntermediateResult != null)
                {
                    IntermediateResult = (Property<object>)type.IntermediateResult.Clone(this);
                    IntermediateResult.Initialize(type.IntermediateResult);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_intermediateResult = Property<object>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ProgramTransitionEventType_IntermediateResult, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.IntermediateResult, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ProgramTransitionEventType_IntermediateResult);
        }
        #endregion

        #region Private Fields
        Property<object> m_intermediateResult;
        #endregion
    }
    #endregion

    #region ProgramTransitionEvent Class
    /// <summary>
    /// Represents an instance of the ProgramTransitionEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class ProgramTransitionEvent : TransitionEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected ProgramTransitionEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = ProgramTransitionEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new ProgramTransitionEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            ProgramTransitionEvent instance = new ProgramTransitionEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new ProgramTransitionEvent Construct(IServerInternal server)
        {
            ProgramTransitionEvent instance = new ProgramTransitionEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                ProgramTransitionEvent clone = new ProgramTransitionEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region IntermediateResult
        /// <summary>
        /// A description for the IntermediateResult Property.
        /// </summary>
        public Property<object> IntermediateResult
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_intermediateResult; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_intermediateResult != null)
                    {
                        RemoveChild(m_intermediateResult);
                    }

                    m_intermediateResult = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceIntermediateResult(Property<object> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                IntermediateResult = replacement;

                IntermediateResult.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.IntermediateResult, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ProgramTransitionEventType_IntermediateResult,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                ProgramTransitionEvent instance = source as ProgramTransitionEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                ProgramTransitionEventType type = source as ProgramTransitionEventType;

                if (type != null && type.IntermediateResult != null)
                {
                    IntermediateResult = (Property<object>)type.IntermediateResult.Clone(this);
                    IntermediateResult.Initialize(type.IntermediateResult);
                }
                else if (instance != null && instance.IntermediateResult != null)
                {
                    IntermediateResult = (Property<object>)instance.IntermediateResult.Clone(this);
                    IntermediateResult.Initialize(instance.IntermediateResult);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_intermediateResult = Property<object>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.IntermediateResult, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ProgramTransitionEventType_IntermediateResult);
        }
        #endregion

        #region Private Fields
        private ProgramTransitionEventType m_typeDefinition;
        Property<object> m_intermediateResult;
        #endregion
    }
    #endregion

    #region ProgramDiagnosticType Class
    /// <summary>
    /// Represents the ProgramDiagnosticType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class ProgramDiagnosticType : VariableTypeSource<ProgramDiagnosticDataType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public ProgramDiagnosticType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.VariableTypes.ProgramDiagnosticType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.ProgramDiagnosticType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.VariableTypes.BaseDataVariableType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new ProgramDiagnosticType FindSource(IServerInternal server)
        {
            ProgramDiagnosticType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.VariableTypes.ProgramDiagnosticType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as ProgramDiagnosticType;

                if (type != null)
                {
                    return type;
                }

                type = new ProgramDiagnosticType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                ProgramDiagnosticType clone = new ProgramDiagnosticType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region CreateSessionId
        /// <summary>
        /// A description for the CreateSessionId Property.
        /// </summary>
        public Property<NodeId> CreateSessionId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_createSessionId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_createSessionId != null)
                    {
                        RemoveChild(m_createSessionId);
                    }

                    m_createSessionId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCreateSessionId(Property<NodeId> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CreateSessionId = replacement;

                CreateSessionId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CreateSessionId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ProgramDiagnosticType_CreateSessionId,
                    null);
            }
        }
        #endregion

        #region CreateClientName
        /// <summary>
        /// A description for the CreateClientName Property.
        /// </summary>
        public Property<string> CreateClientName
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_createClientName; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_createClientName != null)
                    {
                        RemoveChild(m_createClientName);
                    }

                    m_createClientName = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCreateClientName(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CreateClientName = replacement;

                CreateClientName.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CreateClientName, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ProgramDiagnosticType_CreateClientName,
                    null);
            }
        }
        #endregion

        #region InvocationCreationTime
        /// <summary>
        /// A description for the InvocationCreationTime Property.
        /// </summary>
        public Property<DateTime> InvocationCreationTime
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_invocationCreationTime; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_invocationCreationTime != null)
                    {
                        RemoveChild(m_invocationCreationTime);
                    }

                    m_invocationCreationTime = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceInvocationCreationTime(Property<DateTime> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                InvocationCreationTime = replacement;

                InvocationCreationTime.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.InvocationCreationTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ProgramDiagnosticType_InvocationCreationTime,
                    null);
            }
        }
        #endregion

        #region LastTransitionTime
        /// <summary>
        /// A description for the LastTransitionTime Property.
        /// </summary>
        public Property<DateTime> LastTransitionTime
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_lastTransitionTime; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_lastTransitionTime != null)
                    {
                        RemoveChild(m_lastTransitionTime);
                    }

                    m_lastTransitionTime = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceLastTransitionTime(Property<DateTime> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                LastTransitionTime = replacement;

                LastTransitionTime.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.LastTransitionTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ProgramDiagnosticType_LastTransitionTime,
                    null);
            }
        }
        #endregion

        #region LastMethodCall
        /// <summary>
        /// A description for the LastMethodCall Property.
        /// </summary>
        public Property<string> LastMethodCall
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_lastMethodCall; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_lastMethodCall != null)
                    {
                        RemoveChild(m_lastMethodCall);
                    }

                    m_lastMethodCall = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceLastMethodCall(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                LastMethodCall = replacement;

                LastMethodCall.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.LastMethodCall, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ProgramDiagnosticType_LastMethodCall,
                    null);
            }
        }
        #endregion

        #region LastMethodSessionId
        /// <summary>
        /// A description for the LastMethodSessionId Property.
        /// </summary>
        public Property<NodeId> LastMethodSessionId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_lastMethodSessionId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_lastMethodSessionId != null)
                    {
                        RemoveChild(m_lastMethodSessionId);
                    }

                    m_lastMethodSessionId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceLastMethodSessionId(Property<NodeId> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                LastMethodSessionId = replacement;

                LastMethodSessionId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.LastMethodSessionId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ProgramDiagnosticType_LastMethodSessionId,
                    null);
            }
        }
        #endregion

        #region LastMethodInputArguments
        /// <summary>
        /// A description for the LastMethodInputArguments Property.
        /// </summary>
        public Property<IList<Argument>> LastMethodInputArguments
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_lastMethodInputArguments; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_lastMethodInputArguments != null)
                    {
                        RemoveChild(m_lastMethodInputArguments);
                    }

                    m_lastMethodInputArguments = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceLastMethodInputArguments(Property<IList<Argument>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                LastMethodInputArguments = replacement;

                LastMethodInputArguments.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.LastMethodInputArguments, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ProgramDiagnosticType_LastMethodInputArguments,
                    null);
            }
        }
        #endregion

        #region LastMethodOutputArguments
        /// <summary>
        /// A description for the LastMethodOutputArguments Property.
        /// </summary>
        public Property<IList<Argument>> LastMethodOutputArguments
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_lastMethodOutputArguments; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_lastMethodOutputArguments != null)
                    {
                        RemoveChild(m_lastMethodOutputArguments);
                    }

                    m_lastMethodOutputArguments = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceLastMethodOutputArguments(Property<IList<Argument>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                LastMethodOutputArguments = replacement;

                LastMethodOutputArguments.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.LastMethodOutputArguments, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ProgramDiagnosticType_LastMethodOutputArguments,
                    null);
            }
        }
        #endregion

        #region LastMethodCallTime
        /// <summary>
        /// A description for the LastMethodCallTime Property.
        /// </summary>
        public Property<DateTime> LastMethodCallTime
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_lastMethodCallTime; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_lastMethodCallTime != null)
                    {
                        RemoveChild(m_lastMethodCallTime);
                    }

                    m_lastMethodCallTime = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceLastMethodCallTime(Property<DateTime> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                LastMethodCallTime = replacement;

                LastMethodCallTime.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.LastMethodCallTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ProgramDiagnosticType_LastMethodCallTime,
                    null);
            }
        }
        #endregion

        #region LastMethodReturnStatus
        /// <summary>
        /// A description for the LastMethodReturnStatus Property.
        /// </summary>
        public Property<StatusResult> LastMethodReturnStatus
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_lastMethodReturnStatus; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_lastMethodReturnStatus != null)
                    {
                        RemoveChild(m_lastMethodReturnStatus);
                    }

                    m_lastMethodReturnStatus = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceLastMethodReturnStatus(Property<StatusResult> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                LastMethodReturnStatus = replacement;

                LastMethodReturnStatus.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.LastMethodReturnStatus, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ProgramDiagnosticType_LastMethodReturnStatus,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                ProgramDiagnosticType type = source as ProgramDiagnosticType;

                if (type != null && type.CreateSessionId != null)
                {
                    CreateSessionId = (Property<NodeId>)type.CreateSessionId.Clone(this);
                    CreateSessionId.Initialize(type.CreateSessionId);
                }

                if (type != null && type.CreateClientName != null)
                {
                    CreateClientName = (Property<string>)type.CreateClientName.Clone(this);
                    CreateClientName.Initialize(type.CreateClientName);
                }

                if (type != null && type.InvocationCreationTime != null)
                {
                    InvocationCreationTime = (Property<DateTime>)type.InvocationCreationTime.Clone(this);
                    InvocationCreationTime.Initialize(type.InvocationCreationTime);
                }

                if (type != null && type.LastTransitionTime != null)
                {
                    LastTransitionTime = (Property<DateTime>)type.LastTransitionTime.Clone(this);
                    LastTransitionTime.Initialize(type.LastTransitionTime);
                }

                if (type != null && type.LastMethodCall != null)
                {
                    LastMethodCall = (Property<string>)type.LastMethodCall.Clone(this);
                    LastMethodCall.Initialize(type.LastMethodCall);
                }

                if (type != null && type.LastMethodSessionId != null)
                {
                    LastMethodSessionId = (Property<NodeId>)type.LastMethodSessionId.Clone(this);
                    LastMethodSessionId.Initialize(type.LastMethodSessionId);
                }

                if (type != null && type.LastMethodInputArguments != null)
                {
                    LastMethodInputArguments = (Property<IList<Argument>>)type.LastMethodInputArguments.Clone(this);
                    LastMethodInputArguments.Initialize(type.LastMethodInputArguments);
                }

                if (type != null && type.LastMethodOutputArguments != null)
                {
                    LastMethodOutputArguments = (Property<IList<Argument>>)type.LastMethodOutputArguments.Clone(this);
                    LastMethodOutputArguments.Initialize(type.LastMethodOutputArguments);
                }

                if (type != null && type.LastMethodCallTime != null)
                {
                    LastMethodCallTime = (Property<DateTime>)type.LastMethodCallTime.Clone(this);
                    LastMethodCallTime.Initialize(type.LastMethodCallTime);
                }

                if (type != null && type.LastMethodReturnStatus != null)
                {
                    LastMethodReturnStatus = (Property<StatusResult>)type.LastMethodReturnStatus.Clone(this);
                    LastMethodReturnStatus.Initialize(type.LastMethodReturnStatus);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_createSessionId = Property<NodeId>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ProgramDiagnosticType_CreateSessionId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.CreateSessionId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ProgramDiagnosticType_CreateSessionId);

            m_createClientName = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ProgramDiagnosticType_CreateClientName, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.CreateClientName, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ProgramDiagnosticType_CreateClientName);

            m_invocationCreationTime = Property<DateTime>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ProgramDiagnosticType_InvocationCreationTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.InvocationCreationTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ProgramDiagnosticType_InvocationCreationTime);

            m_lastTransitionTime = Property<DateTime>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ProgramDiagnosticType_LastTransitionTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.LastTransitionTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ProgramDiagnosticType_LastTransitionTime);

            m_lastMethodCall = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ProgramDiagnosticType_LastMethodCall, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.LastMethodCall, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ProgramDiagnosticType_LastMethodCall);

            m_lastMethodSessionId = Property<NodeId>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ProgramDiagnosticType_LastMethodSessionId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.LastMethodSessionId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ProgramDiagnosticType_LastMethodSessionId);

            m_lastMethodInputArguments = Property<IList<Argument>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ProgramDiagnosticType_LastMethodInputArguments, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.LastMethodInputArguments, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ProgramDiagnosticType_LastMethodInputArguments);

            m_lastMethodOutputArguments = Property<IList<Argument>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ProgramDiagnosticType_LastMethodOutputArguments, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.LastMethodOutputArguments, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ProgramDiagnosticType_LastMethodOutputArguments);

            m_lastMethodCallTime = Property<DateTime>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ProgramDiagnosticType_LastMethodCallTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.LastMethodCallTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ProgramDiagnosticType_LastMethodCallTime);

            m_lastMethodReturnStatus = Property<StatusResult>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ProgramDiagnosticType_LastMethodReturnStatus, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.LastMethodReturnStatus, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ProgramDiagnosticType_LastMethodReturnStatus);
        }
        #endregion

        #region Private Fields
        Property<NodeId> m_createSessionId;
        Property<string> m_createClientName;
        Property<DateTime> m_invocationCreationTime;
        Property<DateTime> m_lastTransitionTime;
        Property<string> m_lastMethodCall;
        Property<NodeId> m_lastMethodSessionId;
        Property<IList<Argument>> m_lastMethodInputArguments;
        Property<IList<Argument>> m_lastMethodOutputArguments;
        Property<DateTime> m_lastMethodCallTime;
        Property<StatusResult> m_lastMethodReturnStatus;
        #endregion
    }
    #endregion

    #region ProgramDiagnostic Class
    /// <summary>
    /// Represents an instance of the ProgramDiagnosticType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class ProgramDiagnostic : DataVariable<ProgramDiagnosticDataType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected ProgramDiagnostic(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = ProgramDiagnosticType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new ProgramDiagnostic Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            ProgramDiagnostic instance = new ProgramDiagnostic(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new ProgramDiagnostic Construct(IServerInternal server)
        {
            ProgramDiagnostic instance = new ProgramDiagnostic(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                ProgramDiagnostic clone = new ProgramDiagnostic(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region CreateSessionId
        /// <summary>
        /// A description for the CreateSessionId Property.
        /// </summary>
        public Property<NodeId> CreateSessionId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_createSessionId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_createSessionId != null)
                    {
                        RemoveChild(m_createSessionId);
                    }

                    m_createSessionId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCreateSessionId(Property<NodeId> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CreateSessionId = replacement;

                CreateSessionId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CreateSessionId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ProgramDiagnosticType_CreateSessionId,
                    null);
            }
        }
        #endregion

        #region CreateClientName
        /// <summary>
        /// A description for the CreateClientName Property.
        /// </summary>
        public Property<string> CreateClientName
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_createClientName; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_createClientName != null)
                    {
                        RemoveChild(m_createClientName);
                    }

                    m_createClientName = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCreateClientName(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CreateClientName = replacement;

                CreateClientName.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CreateClientName, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ProgramDiagnosticType_CreateClientName,
                    null);
            }
        }
        #endregion

        #region InvocationCreationTime
        /// <summary>
        /// A description for the InvocationCreationTime Property.
        /// </summary>
        public Property<DateTime> InvocationCreationTime
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_invocationCreationTime; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_invocationCreationTime != null)
                    {
                        RemoveChild(m_invocationCreationTime);
                    }

                    m_invocationCreationTime = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceInvocationCreationTime(Property<DateTime> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                InvocationCreationTime = replacement;

                InvocationCreationTime.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.InvocationCreationTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ProgramDiagnosticType_InvocationCreationTime,
                    null);
            }
        }
        #endregion

        #region LastTransitionTime
        /// <summary>
        /// A description for the LastTransitionTime Property.
        /// </summary>
        public Property<DateTime> LastTransitionTime
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_lastTransitionTime; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_lastTransitionTime != null)
                    {
                        RemoveChild(m_lastTransitionTime);
                    }

                    m_lastTransitionTime = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceLastTransitionTime(Property<DateTime> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                LastTransitionTime = replacement;

                LastTransitionTime.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.LastTransitionTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ProgramDiagnosticType_LastTransitionTime,
                    null);
            }
        }
        #endregion

        #region LastMethodCall
        /// <summary>
        /// A description for the LastMethodCall Property.
        /// </summary>
        public Property<string> LastMethodCall
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_lastMethodCall; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_lastMethodCall != null)
                    {
                        RemoveChild(m_lastMethodCall);
                    }

                    m_lastMethodCall = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceLastMethodCall(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                LastMethodCall = replacement;

                LastMethodCall.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.LastMethodCall, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ProgramDiagnosticType_LastMethodCall,
                    null);
            }
        }
        #endregion

        #region LastMethodSessionId
        /// <summary>
        /// A description for the LastMethodSessionId Property.
        /// </summary>
        public Property<NodeId> LastMethodSessionId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_lastMethodSessionId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_lastMethodSessionId != null)
                    {
                        RemoveChild(m_lastMethodSessionId);
                    }

                    m_lastMethodSessionId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceLastMethodSessionId(Property<NodeId> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                LastMethodSessionId = replacement;

                LastMethodSessionId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.LastMethodSessionId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ProgramDiagnosticType_LastMethodSessionId,
                    null);
            }
        }
        #endregion

        #region LastMethodInputArguments
        /// <summary>
        /// A description for the LastMethodInputArguments Property.
        /// </summary>
        public Property<IList<Argument>> LastMethodInputArguments
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_lastMethodInputArguments; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_lastMethodInputArguments != null)
                    {
                        RemoveChild(m_lastMethodInputArguments);
                    }

                    m_lastMethodInputArguments = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceLastMethodInputArguments(Property<IList<Argument>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                LastMethodInputArguments = replacement;

                LastMethodInputArguments.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.LastMethodInputArguments, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ProgramDiagnosticType_LastMethodInputArguments,
                    null);
            }
        }
        #endregion

        #region LastMethodOutputArguments
        /// <summary>
        /// A description for the LastMethodOutputArguments Property.
        /// </summary>
        public Property<IList<Argument>> LastMethodOutputArguments
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_lastMethodOutputArguments; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_lastMethodOutputArguments != null)
                    {
                        RemoveChild(m_lastMethodOutputArguments);
                    }

                    m_lastMethodOutputArguments = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceLastMethodOutputArguments(Property<IList<Argument>> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                LastMethodOutputArguments = replacement;

                LastMethodOutputArguments.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.LastMethodOutputArguments, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ProgramDiagnosticType_LastMethodOutputArguments,
                    null);
            }
        }
        #endregion

        #region LastMethodCallTime
        /// <summary>
        /// A description for the LastMethodCallTime Property.
        /// </summary>
        public Property<DateTime> LastMethodCallTime
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_lastMethodCallTime; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_lastMethodCallTime != null)
                    {
                        RemoveChild(m_lastMethodCallTime);
                    }

                    m_lastMethodCallTime = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceLastMethodCallTime(Property<DateTime> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                LastMethodCallTime = replacement;

                LastMethodCallTime.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.LastMethodCallTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ProgramDiagnosticType_LastMethodCallTime,
                    null);
            }
        }
        #endregion

        #region LastMethodReturnStatus
        /// <summary>
        /// A description for the LastMethodReturnStatus Property.
        /// </summary>
        public Property<StatusResult> LastMethodReturnStatus
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_lastMethodReturnStatus; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_lastMethodReturnStatus != null)
                    {
                        RemoveChild(m_lastMethodReturnStatus);
                    }

                    m_lastMethodReturnStatus = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceLastMethodReturnStatus(Property<StatusResult> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                LastMethodReturnStatus = replacement;

                LastMethodReturnStatus.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.LastMethodReturnStatus, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ProgramDiagnosticType_LastMethodReturnStatus,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                ProgramDiagnostic instance = source as ProgramDiagnostic;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                ProgramDiagnosticType type = source as ProgramDiagnosticType;

                if (type != null && type.CreateSessionId != null)
                {
                    CreateSessionId = (Property<NodeId>)type.CreateSessionId.Clone(this);
                    CreateSessionId.Initialize(type.CreateSessionId);
                }
                else if (instance != null && instance.CreateSessionId != null)
                {
                    CreateSessionId = (Property<NodeId>)instance.CreateSessionId.Clone(this);
                    CreateSessionId.Initialize(instance.CreateSessionId);
                }

                if (type != null && type.CreateClientName != null)
                {
                    CreateClientName = (Property<string>)type.CreateClientName.Clone(this);
                    CreateClientName.Initialize(type.CreateClientName);
                }
                else if (instance != null && instance.CreateClientName != null)
                {
                    CreateClientName = (Property<string>)instance.CreateClientName.Clone(this);
                    CreateClientName.Initialize(instance.CreateClientName);
                }

                if (type != null && type.InvocationCreationTime != null)
                {
                    InvocationCreationTime = (Property<DateTime>)type.InvocationCreationTime.Clone(this);
                    InvocationCreationTime.Initialize(type.InvocationCreationTime);
                }
                else if (instance != null && instance.InvocationCreationTime != null)
                {
                    InvocationCreationTime = (Property<DateTime>)instance.InvocationCreationTime.Clone(this);
                    InvocationCreationTime.Initialize(instance.InvocationCreationTime);
                }

                if (type != null && type.LastTransitionTime != null)
                {
                    LastTransitionTime = (Property<DateTime>)type.LastTransitionTime.Clone(this);
                    LastTransitionTime.Initialize(type.LastTransitionTime);
                }
                else if (instance != null && instance.LastTransitionTime != null)
                {
                    LastTransitionTime = (Property<DateTime>)instance.LastTransitionTime.Clone(this);
                    LastTransitionTime.Initialize(instance.LastTransitionTime);
                }

                if (type != null && type.LastMethodCall != null)
                {
                    LastMethodCall = (Property<string>)type.LastMethodCall.Clone(this);
                    LastMethodCall.Initialize(type.LastMethodCall);
                }
                else if (instance != null && instance.LastMethodCall != null)
                {
                    LastMethodCall = (Property<string>)instance.LastMethodCall.Clone(this);
                    LastMethodCall.Initialize(instance.LastMethodCall);
                }

                if (type != null && type.LastMethodSessionId != null)
                {
                    LastMethodSessionId = (Property<NodeId>)type.LastMethodSessionId.Clone(this);
                    LastMethodSessionId.Initialize(type.LastMethodSessionId);
                }
                else if (instance != null && instance.LastMethodSessionId != null)
                {
                    LastMethodSessionId = (Property<NodeId>)instance.LastMethodSessionId.Clone(this);
                    LastMethodSessionId.Initialize(instance.LastMethodSessionId);
                }

                if (type != null && type.LastMethodInputArguments != null)
                {
                    LastMethodInputArguments = (Property<IList<Argument>>)type.LastMethodInputArguments.Clone(this);
                    LastMethodInputArguments.Initialize(type.LastMethodInputArguments);
                }
                else if (instance != null && instance.LastMethodInputArguments != null)
                {
                    LastMethodInputArguments = (Property<IList<Argument>>)instance.LastMethodInputArguments.Clone(this);
                    LastMethodInputArguments.Initialize(instance.LastMethodInputArguments);
                }

                if (type != null && type.LastMethodOutputArguments != null)
                {
                    LastMethodOutputArguments = (Property<IList<Argument>>)type.LastMethodOutputArguments.Clone(this);
                    LastMethodOutputArguments.Initialize(type.LastMethodOutputArguments);
                }
                else if (instance != null && instance.LastMethodOutputArguments != null)
                {
                    LastMethodOutputArguments = (Property<IList<Argument>>)instance.LastMethodOutputArguments.Clone(this);
                    LastMethodOutputArguments.Initialize(instance.LastMethodOutputArguments);
                }

                if (type != null && type.LastMethodCallTime != null)
                {
                    LastMethodCallTime = (Property<DateTime>)type.LastMethodCallTime.Clone(this);
                    LastMethodCallTime.Initialize(type.LastMethodCallTime);
                }
                else if (instance != null && instance.LastMethodCallTime != null)
                {
                    LastMethodCallTime = (Property<DateTime>)instance.LastMethodCallTime.Clone(this);
                    LastMethodCallTime.Initialize(instance.LastMethodCallTime);
                }

                if (type != null && type.LastMethodReturnStatus != null)
                {
                    LastMethodReturnStatus = (Property<StatusResult>)type.LastMethodReturnStatus.Clone(this);
                    LastMethodReturnStatus.Initialize(type.LastMethodReturnStatus);
                }
                else if (instance != null && instance.LastMethodReturnStatus != null)
                {
                    LastMethodReturnStatus = (Property<StatusResult>)instance.LastMethodReturnStatus.Clone(this);
                    LastMethodReturnStatus.Initialize(instance.LastMethodReturnStatus);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_createSessionId = Property<NodeId>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.CreateSessionId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ProgramDiagnosticType_CreateSessionId);

            m_createClientName = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.CreateClientName, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ProgramDiagnosticType_CreateClientName);

            m_invocationCreationTime = Property<DateTime>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.InvocationCreationTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ProgramDiagnosticType_InvocationCreationTime);

            m_lastTransitionTime = Property<DateTime>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.LastTransitionTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ProgramDiagnosticType_LastTransitionTime);

            m_lastMethodCall = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.LastMethodCall, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ProgramDiagnosticType_LastMethodCall);

            m_lastMethodSessionId = Property<NodeId>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.LastMethodSessionId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ProgramDiagnosticType_LastMethodSessionId);

            m_lastMethodInputArguments = Property<IList<Argument>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.LastMethodInputArguments, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ProgramDiagnosticType_LastMethodInputArguments);

            m_lastMethodOutputArguments = Property<IList<Argument>>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.LastMethodOutputArguments, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ProgramDiagnosticType_LastMethodOutputArguments);

            m_lastMethodCallTime = Property<DateTime>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.LastMethodCallTime, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ProgramDiagnosticType_LastMethodCallTime);

            m_lastMethodReturnStatus = Property<StatusResult>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.LastMethodReturnStatus, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ProgramDiagnosticType_LastMethodReturnStatus);
        }
        #endregion

        #region Private Fields
        private ProgramDiagnosticType m_typeDefinition;
        Property<NodeId> m_createSessionId;
        Property<string> m_createClientName;
        Property<DateTime> m_invocationCreationTime;
        Property<DateTime> m_lastTransitionTime;
        Property<string> m_lastMethodCall;
        Property<NodeId> m_lastMethodSessionId;
        Property<IList<Argument>> m_lastMethodInputArguments;
        Property<IList<Argument>> m_lastMethodOutputArguments;
        Property<DateTime> m_lastMethodCallTime;
        Property<StatusResult> m_lastMethodReturnStatus;
        #endregion
    }
    #endregion

    #region ProgramStateMachineType Class
    /// <summary>
    /// Represents the ProgramStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class ProgramStateMachineType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public ProgramStateMachineType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.ProgramStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.ProgramStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.StateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new ProgramStateMachineType FindSource(IServerInternal server)
        {
            ProgramStateMachineType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.ProgramStateMachineType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as ProgramStateMachineType;

                if (type != null)
                {
                    return type;
                }

                type = new ProgramStateMachineType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                ProgramStateMachineType clone = new ProgramStateMachineType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region Creatable
        /// <summary>
        /// A description for the Creatable Property.
        /// </summary>
        public Property<bool> Creatable
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_creatable; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_creatable != null)
                    {
                        RemoveChild(m_creatable);
                    }

                    m_creatable = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCreatable(Property<bool> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Creatable = replacement;

                Creatable.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Creatable, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ProgramStateMachineType_Creatable,
                    null);
            }
        }
        #endregion

        #region Deletable
        /// <summary>
        /// A description for the Deletable Property.
        /// </summary>
        public Property<bool> Deletable
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_deletable; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_deletable != null)
                    {
                        RemoveChild(m_deletable);
                    }

                    m_deletable = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceDeletable(Property<bool> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Deletable = replacement;

                Deletable.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Deletable, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ProgramStateMachineType_Deletable,
                    null);
            }
        }
        #endregion

        #region AutoDelete
        /// <summary>
        /// A description for the AutoDelete Property.
        /// </summary>
        public Property<bool> AutoDelete
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_autoDelete; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_autoDelete != null)
                    {
                        RemoveChild(m_autoDelete);
                    }

                    m_autoDelete = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceAutoDelete(Property<bool> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                AutoDelete = replacement;

                AutoDelete.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.AutoDelete, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ProgramStateMachineType_AutoDelete,
                    null);
            }
        }
        #endregion

        #region RecycleCount
        /// <summary>
        /// A description for the RecycleCount Property.
        /// </summary>
        public Property<int> RecycleCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_recycleCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_recycleCount != null)
                    {
                        RemoveChild(m_recycleCount);
                    }

                    m_recycleCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceRecycleCount(Property<int> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                RecycleCount = replacement;

                RecycleCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.RecycleCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ProgramStateMachineType_RecycleCount,
                    null);
            }
        }
        #endregion

        #region InstanceCount
        /// <summary>
        /// A description for the InstanceCount Property.
        /// </summary>
        public Property<uint> InstanceCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_instanceCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_instanceCount != null)
                    {
                        RemoveChild(m_instanceCount);
                    }

                    m_instanceCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceInstanceCount(Property<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                InstanceCount = replacement;

                InstanceCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.InstanceCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ProgramStateMachineType_InstanceCount,
                    null);
            }
        }
        #endregion

        #region MaxInstanceCount
        /// <summary>
        /// A description for the MaxInstanceCount Property.
        /// </summary>
        public Property<uint> MaxInstanceCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_maxInstanceCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_maxInstanceCount != null)
                    {
                        RemoveChild(m_maxInstanceCount);
                    }

                    m_maxInstanceCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceMaxInstanceCount(Property<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                MaxInstanceCount = replacement;

                MaxInstanceCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.MaxInstanceCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ProgramStateMachineType_MaxInstanceCount,
                    null);
            }
        }
        #endregion

        #region MaxRecycleCount
        /// <summary>
        /// A description for the MaxRecycleCount Property.
        /// </summary>
        public Property<uint> MaxRecycleCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_maxRecycleCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_maxRecycleCount != null)
                    {
                        RemoveChild(m_maxRecycleCount);
                    }

                    m_maxRecycleCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceMaxRecycleCount(Property<uint> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                MaxRecycleCount = replacement;

                MaxRecycleCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.MaxRecycleCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ProgramStateMachineType_MaxRecycleCount,
                    null);
            }
        }
        #endregion

        #region ProgramDiagnostics
        /// <summary>
        /// A description for the ProgramDiagnostics Variable.
        /// </summary>
        public ProgramDiagnostic ProgramDiagnostics
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_programDiagnostics; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_programDiagnostics != null)
                    {
                        RemoveChild(m_programDiagnostics);
                    }

                    m_programDiagnostics = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceProgramDiagnostics(ProgramDiagnostic replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ProgramDiagnostics = replacement;

                ProgramDiagnostics.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ProgramDiagnostics, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ProgramStateMachineType_ProgramDiagnostics,
                    null);
            }
        }
        #endregion

        #region Ready
        /// <summary>
        /// The Program is properly initialized and may be started.
        /// </summary>
        public StateMachineState Ready
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_ready; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_ready != null)
                    {
                        RemoveChild(m_ready);
                    }

                    m_ready = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceReady(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Ready = replacement;

                Ready.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Ready, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ProgramStateMachineType_Ready,
                    null);
            }
        }
        #endregion

        #region Running
        /// <summary>
        /// The Program is executing making progress towards completion.
        /// </summary>
        public StateMachineState Running
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_running; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_running != null)
                    {
                        RemoveChild(m_running);
                    }

                    m_running = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceRunning(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Running = replacement;

                Running.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Running, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ProgramStateMachineType_Running,
                    null);
            }
        }
        #endregion

        #region Suspended
        /// <summary>
        /// The Program has been stopped prior to reaching a terminal state but may be resumed.
        /// </summary>
        public StateMachineState Suspended
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_suspended; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_suspended != null)
                    {
                        RemoveChild(m_suspended);
                    }

                    m_suspended = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSuspended(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Suspended = replacement;

                Suspended.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Suspended, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ProgramStateMachineType_Suspended,
                    null);
            }
        }
        #endregion

        #region Halted
        /// <summary>
        /// The Program is in a terminal or failed state, and it cannot be started or resumed without being reset.
        /// </summary>
        public StateMachineState Halted
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_halted; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_halted != null)
                    {
                        RemoveChild(m_halted);
                    }

                    m_halted = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceHalted(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Halted = replacement;

                Halted.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Halted, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ProgramStateMachineType_Halted,
                    null);
            }
        }
        #endregion

        #region HaltedToReady
        /// <summary>
        /// A description for the HaltedToReady Object.
        /// </summary>
        public StateMachineTransition HaltedToReady
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_haltedToReady; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_haltedToReady != null)
                    {
                        RemoveChild(m_haltedToReady);
                    }

                    m_haltedToReady = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceHaltedToReady(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                HaltedToReady = replacement;

                HaltedToReady.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.HaltedToReady, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ProgramStateMachineType_HaltedToReady,
                    null);
            }
        }
        #endregion

        #region ReadyToRunning
        /// <summary>
        /// A description for the ReadyToRunning Object.
        /// </summary>
        public StateMachineTransition ReadyToRunning
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_readyToRunning; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_readyToRunning != null)
                    {
                        RemoveChild(m_readyToRunning);
                    }

                    m_readyToRunning = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceReadyToRunning(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ReadyToRunning = replacement;

                ReadyToRunning.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ReadyToRunning, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ProgramStateMachineType_ReadyToRunning,
                    null);
            }
        }
        #endregion

        #region RunningToHalted
        /// <summary>
        /// A description for the RunningToHalted Object.
        /// </summary>
        public StateMachineTransition RunningToHalted
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_runningToHalted; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_runningToHalted != null)
                    {
                        RemoveChild(m_runningToHalted);
                    }

                    m_runningToHalted = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceRunningToHalted(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                RunningToHalted = replacement;

                RunningToHalted.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.RunningToHalted, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ProgramStateMachineType_RunningToHalted,
                    null);
            }
        }
        #endregion

        #region RunningToReady
        /// <summary>
        /// A description for the RunningToReady Object.
        /// </summary>
        public StateMachineTransition RunningToReady
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_runningToReady; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_runningToReady != null)
                    {
                        RemoveChild(m_runningToReady);
                    }

                    m_runningToReady = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceRunningToReady(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                RunningToReady = replacement;

                RunningToReady.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.RunningToReady, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ProgramStateMachineType_RunningToReady,
                    null);
            }
        }
        #endregion

        #region RunningToSuspended
        /// <summary>
        /// A description for the RunningToSuspended Object.
        /// </summary>
        public StateMachineTransition RunningToSuspended
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_runningToSuspended; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_runningToSuspended != null)
                    {
                        RemoveChild(m_runningToSuspended);
                    }

                    m_runningToSuspended = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceRunningToSuspended(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                RunningToSuspended = replacement;

                RunningToSuspended.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.RunningToSuspended, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ProgramStateMachineType_RunningToSuspended,
                    null);
            }
        }
        #endregion

        #region SuspendedToRunning
        /// <summary>
        /// A description for the SuspendedToRunning Object.
        /// </summary>
        public StateMachineTransition SuspendedToRunning
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_suspendedToRunning; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_suspendedToRunning != null)
                    {
                        RemoveChild(m_suspendedToRunning);
                    }

                    m_suspendedToRunning = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSuspendedToRunning(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SuspendedToRunning = replacement;

                SuspendedToRunning.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SuspendedToRunning, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ProgramStateMachineType_SuspendedToRunning,
                    null);
            }
        }
        #endregion

        #region SuspendedToHalted
        /// <summary>
        /// A description for the SuspendedToHalted Object.
        /// </summary>
        public StateMachineTransition SuspendedToHalted
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_suspendedToHalted; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_suspendedToHalted != null)
                    {
                        RemoveChild(m_suspendedToHalted);
                    }

                    m_suspendedToHalted = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSuspendedToHalted(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SuspendedToHalted = replacement;

                SuspendedToHalted.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SuspendedToHalted, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ProgramStateMachineType_SuspendedToHalted,
                    null);
            }
        }
        #endregion

        #region SuspendedToReady
        /// <summary>
        /// A description for the SuspendedToReady Object.
        /// </summary>
        public StateMachineTransition SuspendedToReady
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_suspendedToReady; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_suspendedToReady != null)
                    {
                        RemoveChild(m_suspendedToReady);
                    }

                    m_suspendedToReady = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSuspendedToReady(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SuspendedToReady = replacement;

                SuspendedToReady.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SuspendedToReady, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ProgramStateMachineType_SuspendedToReady,
                    null);
            }
        }
        #endregion

        #region ReadyToHalted
        /// <summary>
        /// A description for the ReadyToHalted Object.
        /// </summary>
        public StateMachineTransition ReadyToHalted
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_readyToHalted; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_readyToHalted != null)
                    {
                        RemoveChild(m_readyToHalted);
                    }

                    m_readyToHalted = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceReadyToHalted(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ReadyToHalted = replacement;

                ReadyToHalted.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ReadyToHalted, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ProgramStateMachineType_ReadyToHalted,
                    null);
            }
        }
        #endregion

        #region StartMethod
        /// <summary>
        /// Causes the Program to transition from the Ready state to the Running state.
        /// </summary>
        public MethodSource StartMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_startMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_startMethod != null)
                    {
                        RemoveChild(m_startMethod);
                    }

                    m_startMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the Start method.
        /// </summary>
        public void Start(OperationContext context)
        {     
            lock (DataLock)
            {     
                StartMethod.Call(context, this);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the Start method is called.
        /// </summary>
        public void SetStartCallback(NoArgumentsMethodHandler callback)
        {
            lock (DataLock)
            {  
                StartMethod.SetCallback(this, callback);
            }
        }
        #endregion

        #region SuspendMethod
        /// <summary>
        /// Causes the Program to transition from the Running state to the Suspended state.
        /// </summary>
        public MethodSource SuspendMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_suspendMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_suspendMethod != null)
                    {
                        RemoveChild(m_suspendMethod);
                    }

                    m_suspendMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the Suspend method.
        /// </summary>
        public void Suspend(OperationContext context)
        {     
            lock (DataLock)
            {     
                SuspendMethod.Call(context, this);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the Suspend method is called.
        /// </summary>
        public void SetSuspendCallback(NoArgumentsMethodHandler callback)
        {
            lock (DataLock)
            {  
                SuspendMethod.SetCallback(this, callback);
            }
        }
        #endregion

        #region ResumeMethod
        /// <summary>
        /// Causes the Program to transition from the Suspended state to the Running state.
        /// </summary>
        public MethodSource ResumeMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_resumeMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_resumeMethod != null)
                    {
                        RemoveChild(m_resumeMethod);
                    }

                    m_resumeMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the Resume method.
        /// </summary>
        public void Resume(OperationContext context)
        {     
            lock (DataLock)
            {     
                ResumeMethod.Call(context, this);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the Resume method is called.
        /// </summary>
        public void SetResumeCallback(NoArgumentsMethodHandler callback)
        {
            lock (DataLock)
            {  
                ResumeMethod.SetCallback(this, callback);
            }
        }
        #endregion

        #region HaltMethod
        /// <summary>
        /// Causes the Program to transition from the Ready, Running or Suspended state to the Halted state.
        /// </summary>
        public MethodSource HaltMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_haltMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_haltMethod != null)
                    {
                        RemoveChild(m_haltMethod);
                    }

                    m_haltMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the Halt method.
        /// </summary>
        public void Halt(OperationContext context)
        {     
            lock (DataLock)
            {     
                HaltMethod.Call(context, this);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the Halt method is called.
        /// </summary>
        public void SetHaltCallback(NoArgumentsMethodHandler callback)
        {
            lock (DataLock)
            {  
                HaltMethod.SetCallback(this, callback);
            }
        }
        #endregion

        #region ResetMethod
        /// <summary>
        /// Causes the Program to transition from the Halted state to the Ready state.
        /// </summary>
        public MethodSource ResetMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_resetMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_resetMethod != null)
                    {
                        RemoveChild(m_resetMethod);
                    }

                    m_resetMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the Reset method.
        /// </summary>
        public void Reset(OperationContext context)
        {     
            lock (DataLock)
            {     
                ResetMethod.Call(context, this);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the Reset method is called.
        /// </summary>
        public void SetResetCallback(NoArgumentsMethodHandler callback)
        {
            lock (DataLock)
            {  
                ResetMethod.SetCallback(this, callback);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                ProgramStateMachineType type = source as ProgramStateMachineType;

                if (type != null && type.Creatable != null)
                {
                    Creatable = (Property<bool>)type.Creatable.Clone(this);
                    Creatable.Initialize(type.Creatable);
                }

                if (type != null && type.Deletable != null)
                {
                    Deletable = (Property<bool>)type.Deletable.Clone(this);
                    Deletable.Initialize(type.Deletable);
                }

                if (type != null && type.AutoDelete != null)
                {
                    AutoDelete = (Property<bool>)type.AutoDelete.Clone(this);
                    AutoDelete.Initialize(type.AutoDelete);
                }

                if (type != null && type.RecycleCount != null)
                {
                    RecycleCount = (Property<int>)type.RecycleCount.Clone(this);
                    RecycleCount.Initialize(type.RecycleCount);
                }

                if (type != null && type.InstanceCount != null)
                {
                    InstanceCount = (Property<uint>)type.InstanceCount.Clone(this);
                    InstanceCount.Initialize(type.InstanceCount);
                }

                if (type != null && type.MaxInstanceCount != null)
                {
                    MaxInstanceCount = (Property<uint>)type.MaxInstanceCount.Clone(this);
                    MaxInstanceCount.Initialize(type.MaxInstanceCount);
                }

                if (type != null && type.MaxRecycleCount != null)
                {
                    MaxRecycleCount = (Property<uint>)type.MaxRecycleCount.Clone(this);
                    MaxRecycleCount.Initialize(type.MaxRecycleCount);
                }

                if (type != null && type.ProgramDiagnostics != null)
                {
                    ProgramDiagnostics = (ProgramDiagnostic)type.ProgramDiagnostics.Clone(this);
                    ProgramDiagnostics.Initialize(type.ProgramDiagnostics);
                }

                if (type != null && type.Ready != null)
                {
                    Ready = (StateMachineState)type.Ready.Clone(this);
                    Ready.Initialize(type.Ready);
                }

                if (type != null && type.Running != null)
                {
                    Running = (StateMachineState)type.Running.Clone(this);
                    Running.Initialize(type.Running);
                }

                if (type != null && type.Suspended != null)
                {
                    Suspended = (StateMachineState)type.Suspended.Clone(this);
                    Suspended.Initialize(type.Suspended);
                }

                if (type != null && type.Halted != null)
                {
                    Halted = (StateMachineState)type.Halted.Clone(this);
                    Halted.Initialize(type.Halted);
                }

                if (type != null && type.HaltedToReady != null)
                {
                    HaltedToReady = (StateMachineTransition)type.HaltedToReady.Clone(this);
                    HaltedToReady.Initialize(type.HaltedToReady);
                }

                if (type != null && type.ReadyToRunning != null)
                {
                    ReadyToRunning = (StateMachineTransition)type.ReadyToRunning.Clone(this);
                    ReadyToRunning.Initialize(type.ReadyToRunning);
                }

                if (type != null && type.RunningToHalted != null)
                {
                    RunningToHalted = (StateMachineTransition)type.RunningToHalted.Clone(this);
                    RunningToHalted.Initialize(type.RunningToHalted);
                }

                if (type != null && type.RunningToReady != null)
                {
                    RunningToReady = (StateMachineTransition)type.RunningToReady.Clone(this);
                    RunningToReady.Initialize(type.RunningToReady);
                }

                if (type != null && type.RunningToSuspended != null)
                {
                    RunningToSuspended = (StateMachineTransition)type.RunningToSuspended.Clone(this);
                    RunningToSuspended.Initialize(type.RunningToSuspended);
                }

                if (type != null && type.SuspendedToRunning != null)
                {
                    SuspendedToRunning = (StateMachineTransition)type.SuspendedToRunning.Clone(this);
                    SuspendedToRunning.Initialize(type.SuspendedToRunning);
                }

                if (type != null && type.SuspendedToHalted != null)
                {
                    SuspendedToHalted = (StateMachineTransition)type.SuspendedToHalted.Clone(this);
                    SuspendedToHalted.Initialize(type.SuspendedToHalted);
                }

                if (type != null && type.SuspendedToReady != null)
                {
                    SuspendedToReady = (StateMachineTransition)type.SuspendedToReady.Clone(this);
                    SuspendedToReady.Initialize(type.SuspendedToReady);
                }

                if (type != null && type.ReadyToHalted != null)
                {
                    ReadyToHalted = (StateMachineTransition)type.ReadyToHalted.Clone(this);
                    ReadyToHalted.Initialize(type.ReadyToHalted);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_creatable = Property<bool>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ProgramStateMachineType_Creatable, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Creatable, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ProgramStateMachineType_Creatable);

            m_deletable = Property<bool>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ProgramStateMachineType_Deletable, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Deletable, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ProgramStateMachineType_Deletable);

            m_autoDelete = Property<bool>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ProgramStateMachineType_AutoDelete, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.AutoDelete, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ProgramStateMachineType_AutoDelete);

            m_recycleCount = Property<int>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ProgramStateMachineType_RecycleCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.RecycleCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ProgramStateMachineType_RecycleCount);

            m_instanceCount = Property<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ProgramStateMachineType_InstanceCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.InstanceCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ProgramStateMachineType_InstanceCount);

            m_maxInstanceCount = Property<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ProgramStateMachineType_MaxInstanceCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.MaxInstanceCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ProgramStateMachineType_MaxInstanceCount);

            m_maxRecycleCount = Property<uint>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ProgramStateMachineType_MaxRecycleCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.MaxRecycleCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ProgramStateMachineType_MaxRecycleCount);

            m_programDiagnostics = ProgramDiagnostic.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ProgramStateMachineType_ProgramDiagnostics, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ProgramDiagnostics, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ProgramStateMachineType_ProgramDiagnostics);

            m_ready = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ProgramStateMachineType_Ready, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Ready, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ProgramStateMachineType_Ready);

            m_running = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ProgramStateMachineType_Running, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Running, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ProgramStateMachineType_Running);

            m_suspended = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ProgramStateMachineType_Suspended, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Suspended, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ProgramStateMachineType_Suspended);

            m_halted = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ProgramStateMachineType_Halted, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Halted, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ProgramStateMachineType_Halted);

            m_haltedToReady = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ProgramStateMachineType_HaltedToReady, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.HaltedToReady, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ProgramStateMachineType_HaltedToReady);

            m_readyToRunning = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ProgramStateMachineType_ReadyToRunning, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ReadyToRunning, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ProgramStateMachineType_ReadyToRunning);

            m_runningToHalted = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ProgramStateMachineType_RunningToHalted, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.RunningToHalted, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ProgramStateMachineType_RunningToHalted);

            m_runningToReady = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ProgramStateMachineType_RunningToReady, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.RunningToReady, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ProgramStateMachineType_RunningToReady);

            m_runningToSuspended = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ProgramStateMachineType_RunningToSuspended, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.RunningToSuspended, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ProgramStateMachineType_RunningToSuspended);

            m_suspendedToRunning = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ProgramStateMachineType_SuspendedToRunning, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SuspendedToRunning, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ProgramStateMachineType_SuspendedToRunning);

            m_suspendedToHalted = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ProgramStateMachineType_SuspendedToHalted, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SuspendedToHalted, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ProgramStateMachineType_SuspendedToHalted);

            m_suspendedToReady = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ProgramStateMachineType_SuspendedToReady, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SuspendedToReady, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ProgramStateMachineType_SuspendedToReady);

            m_readyToHalted = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ProgramStateMachineType_ReadyToHalted, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ReadyToHalted, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ProgramStateMachineType_ReadyToHalted);

            m_startMethod = MethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Methods.ProgramStateMachineType_Start, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Start, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.ProgramStateMachineType_Start);

            m_suspendMethod = MethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Methods.ProgramStateMachineType_Suspend, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Suspend, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.ProgramStateMachineType_Suspend);

            m_resumeMethod = MethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Methods.ProgramStateMachineType_Resume, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Resume, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.ProgramStateMachineType_Resume);

            m_haltMethod = MethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Methods.ProgramStateMachineType_Halt, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Halt, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.ProgramStateMachineType_Halt);

            m_resetMethod = MethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Methods.ProgramStateMachineType_Reset, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Reset, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.ProgramStateMachineType_Reset);
        }
        #endregion

        #region Private Fields
        Property<bool> m_creatable;
        Property<bool> m_deletable;
        Property<bool> m_autoDelete;
        Property<int> m_recycleCount;
        Property<uint> m_instanceCount;
        Property<uint> m_maxInstanceCount;
        Property<uint> m_maxRecycleCount;
        ProgramDiagnostic m_programDiagnostics;
        StateMachineState m_ready;
        StateMachineState m_running;
        StateMachineState m_suspended;
        StateMachineState m_halted;
        StateMachineTransition m_haltedToReady;
        StateMachineTransition m_readyToRunning;
        StateMachineTransition m_runningToHalted;
        StateMachineTransition m_runningToReady;
        StateMachineTransition m_runningToSuspended;
        StateMachineTransition m_suspendedToRunning;
        StateMachineTransition m_suspendedToHalted;
        StateMachineTransition m_suspendedToReady;
        StateMachineTransition m_readyToHalted;
        MethodSource m_startMethod;
        MethodSource m_suspendMethod;
        MethodSource m_resumeMethod;
        MethodSource m_haltMethod;
        MethodSource m_resetMethod;
        #endregion
    }
    #endregion

    #region ProgramStateMachine Class
    /// <summary>
    /// Represents an instance of the ProgramStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class ProgramStateMachine : StateMachine
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected ProgramStateMachine(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = ProgramStateMachineType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new ProgramStateMachine Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            ProgramStateMachine instance = new ProgramStateMachine(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new ProgramStateMachine Construct(IServerInternal server)
        {
            ProgramStateMachine instance = new ProgramStateMachine(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                ProgramStateMachine clone = new ProgramStateMachine(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region Deletable
        /// <summary>
        /// A description for the Deletable Property.
        /// </summary>
        public Property<bool> Deletable
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_deletable; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_deletable != null)
                    {
                        RemoveChild(m_deletable);
                    }

                    m_deletable = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceDeletable(Property<bool> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Deletable = replacement;

                Deletable.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Deletable, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ProgramStateMachineType_Deletable,
                    null);
            }
        }
        #endregion

        #region RecycleCount
        /// <summary>
        /// A description for the RecycleCount Property.
        /// </summary>
        public Property<int> RecycleCount
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_recycleCount; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_recycleCount != null)
                    {
                        RemoveChild(m_recycleCount);
                    }

                    m_recycleCount = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceRecycleCount(Property<int> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                RecycleCount = replacement;

                RecycleCount.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.RecycleCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ProgramStateMachineType_RecycleCount,
                    null);
            }
        }
        #endregion

        #region ProgramDiagnostics
        /// <summary>
        /// A description for the ProgramDiagnostics Variable.
        /// </summary>
        public ProgramDiagnostic ProgramDiagnostics
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_programDiagnostics; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_programDiagnostics != null)
                    {
                        RemoveChild(m_programDiagnostics);
                    }

                    m_programDiagnostics = value; 
                }
            }
        }

        /// <summary>
        /// Whether the ProgramDiagnostics node is specified for the node.
        /// </summary>
        public bool ProgramDiagnosticsSpecified
        {
        	get 
            { 
                lock (DataLock)
                {
                    return m_programDiagnostics != null; 
                }
            }
        }

        /// <summary>
        /// Specifies the optional child.
        /// </summary>
        public void SpecifyProgramDiagnostics(ProgramDiagnostic replacement)
        {
            CheckNodeManagerState();

            lock (DataLock)
            {
                if (ProgramDiagnosticsSpecified)
                {
                    ProgramDiagnostics = (ProgramDiagnostic)DeleteChild(m_programDiagnostics);
                }

                if (replacement != null)
                {       
                    ProgramDiagnostics = replacement;

                    ProgramDiagnostics.Create(
                        this.NodeId, 
                        new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                        null,
                        new QualifiedName(Opc.Ua.BrowseNames.ProgramDiagnostics, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                        Opc.Ua.Variables.ProgramStateMachineType_ProgramDiagnostics,
                        null);
                }
            }
        }
        #endregion

        #region StartMethod
        /// <summary>
        /// Causes the Program to transition from the Ready state to the Running state.
        /// </summary>
        public MethodSource StartMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_startMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_startMethod != null)
                    {
                        RemoveChild(m_startMethod);
                    }

                    m_startMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the Start method.
        /// </summary>
        public void Start(OperationContext context)
        {     
            lock (DataLock)
            {     
                StartMethod.Call(context, this);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the Start method is called.
        /// </summary>
        public void SetStartCallback(NoArgumentsMethodHandler callback)
        {
            lock (DataLock)
            {  
                StartMethod.SetCallback(this, callback);
            }
        }
        #endregion

        #region SuspendMethod
        /// <summary>
        /// Causes the Program to transition from the Running state to the Suspended state.
        /// </summary>
        public MethodSource SuspendMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_suspendMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_suspendMethod != null)
                    {
                        RemoveChild(m_suspendMethod);
                    }

                    m_suspendMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the Suspend method.
        /// </summary>
        public void Suspend(OperationContext context)
        {     
            lock (DataLock)
            {     
                SuspendMethod.Call(context, this);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the Suspend method is called.
        /// </summary>
        public void SetSuspendCallback(NoArgumentsMethodHandler callback)
        {
            lock (DataLock)
            {  
                SuspendMethod.SetCallback(this, callback);
            }
        }
        #endregion

        #region ResumeMethod
        /// <summary>
        /// Causes the Program to transition from the Suspended state to the Running state.
        /// </summary>
        public MethodSource ResumeMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_resumeMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_resumeMethod != null)
                    {
                        RemoveChild(m_resumeMethod);
                    }

                    m_resumeMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the Resume method.
        /// </summary>
        public void Resume(OperationContext context)
        {     
            lock (DataLock)
            {     
                ResumeMethod.Call(context, this);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the Resume method is called.
        /// </summary>
        public void SetResumeCallback(NoArgumentsMethodHandler callback)
        {
            lock (DataLock)
            {  
                ResumeMethod.SetCallback(this, callback);
            }
        }
        #endregion

        #region HaltMethod
        /// <summary>
        /// Causes the Program to transition from the Ready, Running or Suspended state to the Halted state.
        /// </summary>
        public MethodSource HaltMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_haltMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_haltMethod != null)
                    {
                        RemoveChild(m_haltMethod);
                    }

                    m_haltMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the Halt method.
        /// </summary>
        public void Halt(OperationContext context)
        {     
            lock (DataLock)
            {     
                HaltMethod.Call(context, this);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the Halt method is called.
        /// </summary>
        public void SetHaltCallback(NoArgumentsMethodHandler callback)
        {
            lock (DataLock)
            {  
                HaltMethod.SetCallback(this, callback);
            }
        }
        #endregion

        #region ResetMethod
        /// <summary>
        /// Causes the Program to transition from the Halted state to the Ready state.
        /// </summary>
        public MethodSource ResetMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_resetMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_resetMethod != null)
                    {
                        RemoveChild(m_resetMethod);
                    }

                    m_resetMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the Reset method.
        /// </summary>
        public void Reset(OperationContext context)
        {     
            lock (DataLock)
            {     
                ResetMethod.Call(context, this);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the Reset method is called.
        /// </summary>
        public void SetResetCallback(NoArgumentsMethodHandler callback)
        {
            lock (DataLock)
            {  
                ResetMethod.SetCallback(this, callback);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                ProgramStateMachine instance = source as ProgramStateMachine;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                ProgramStateMachineType type = source as ProgramStateMachineType;

                if (type != null && type.Deletable != null)
                {
                    Deletable = (Property<bool>)type.Deletable.Clone(this);
                    Deletable.Initialize(type.Deletable);
                }
                else if (instance != null && instance.Deletable != null)
                {
                    Deletable = (Property<bool>)instance.Deletable.Clone(this);
                    Deletable.Initialize(instance.Deletable);
                }

                if (type != null && type.RecycleCount != null)
                {
                    RecycleCount = (Property<int>)type.RecycleCount.Clone(this);
                    RecycleCount.Initialize(type.RecycleCount);
                }
                else if (instance != null && instance.RecycleCount != null)
                {
                    RecycleCount = (Property<int>)instance.RecycleCount.Clone(this);
                    RecycleCount.Initialize(instance.RecycleCount);
                }

                if (type != null && type.ProgramDiagnostics != null)
                {
                    ProgramDiagnostics = (ProgramDiagnostic)type.ProgramDiagnostics.Clone(this);
                    ProgramDiagnostics.Initialize(type.ProgramDiagnostics);
                }
                else if (instance != null && instance.ProgramDiagnostics != null)
                {
                    ProgramDiagnostics = (ProgramDiagnostic)instance.ProgramDiagnostics.Clone(this);
                    ProgramDiagnostics.Initialize(instance.ProgramDiagnostics);
                }

                if (type != null && type.StartMethod != null)
                {
                    StartMethod = (MethodSource)type.StartMethod.Clone(this);
                    StartMethod.Initialize(type.StartMethod);
                }
                else if (instance != null && instance.StartMethod != null)
                {
                    StartMethod = (MethodSource)instance.StartMethod.Clone(this);
                    StartMethod.Initialize(instance.StartMethod);
                }

                if (type != null && type.SuspendMethod != null)
                {
                    SuspendMethod = (MethodSource)type.SuspendMethod.Clone(this);
                    SuspendMethod.Initialize(type.SuspendMethod);
                }
                else if (instance != null && instance.SuspendMethod != null)
                {
                    SuspendMethod = (MethodSource)instance.SuspendMethod.Clone(this);
                    SuspendMethod.Initialize(instance.SuspendMethod);
                }

                if (type != null && type.ResumeMethod != null)
                {
                    ResumeMethod = (MethodSource)type.ResumeMethod.Clone(this);
                    ResumeMethod.Initialize(type.ResumeMethod);
                }
                else if (instance != null && instance.ResumeMethod != null)
                {
                    ResumeMethod = (MethodSource)instance.ResumeMethod.Clone(this);
                    ResumeMethod.Initialize(instance.ResumeMethod);
                }

                if (type != null && type.HaltMethod != null)
                {
                    HaltMethod = (MethodSource)type.HaltMethod.Clone(this);
                    HaltMethod.Initialize(type.HaltMethod);
                }
                else if (instance != null && instance.HaltMethod != null)
                {
                    HaltMethod = (MethodSource)instance.HaltMethod.Clone(this);
                    HaltMethod.Initialize(instance.HaltMethod);
                }

                if (type != null && type.ResetMethod != null)
                {
                    ResetMethod = (MethodSource)type.ResetMethod.Clone(this);
                    ResetMethod.Initialize(type.ResetMethod);
                }
                else if (instance != null && instance.ResetMethod != null)
                {
                    ResetMethod = (MethodSource)instance.ResetMethod.Clone(this);
                    ResetMethod.Initialize(instance.ResetMethod);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_deletable = Property<bool>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Deletable, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ProgramStateMachineType_Deletable);

            m_recycleCount = Property<int>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.RecycleCount, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ProgramStateMachineType_RecycleCount);

            m_startMethod = MethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Start, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.ProgramStateMachineType_Start);

            m_suspendMethod = MethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Suspend, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.ProgramStateMachineType_Suspend);

            m_resumeMethod = MethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Resume, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.ProgramStateMachineType_Resume);

            m_haltMethod = MethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Halt, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.ProgramStateMachineType_Halt);

            m_resetMethod = MethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Reset, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.ProgramStateMachineType_Reset);
        }
        
        /// <summary cref="NodeSource.CreateChildren" />
        protected override void CreateChildren(object configuration)
        {
            base.CreateChildren(configuration);
                            
            ProgramDiagnostics = (ProgramDiagnostic)InitializeOptionalChild(
                new ConstructInstanceDelegate(ProgramDiagnostic.Construct), 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ProgramDiagnostics, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ProgramStateMachineType_ProgramDiagnostics,
                configuration);
        }
        #endregion

        #region Private Fields
        private ProgramStateMachineType m_typeDefinition;
        Property<bool> m_deletable;
        Property<int> m_recycleCount;
        ProgramDiagnostic m_programDiagnostics;
        MethodSource m_startMethod;
        MethodSource m_suspendMethod;
        MethodSource m_resumeMethod;
        MethodSource m_haltMethod;
        MethodSource m_resetMethod;
        #endregion
    }
    #endregion

    #region BaseConditionType Class
    /// <summary>
    /// Represents the BaseConditionType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class BaseConditionType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public BaseConditionType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.BaseConditionType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.BaseConditionType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new BaseConditionType FindSource(IServerInternal server)
        {
            BaseConditionType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.BaseConditionType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as BaseConditionType;

                if (type != null)
                {
                    return type;
                }

                type = new BaseConditionType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                BaseConditionType clone = new BaseConditionType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region Retain
        /// <summary>
        /// A description for the Retain Property.
        /// </summary>
        public Property<bool> Retain
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_retain; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_retain != null)
                    {
                        RemoveChild(m_retain);
                    }

                    m_retain = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceRetain(Property<bool> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Retain = replacement;

                Retain.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Retain, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.BaseConditionType_Retain,
                    null);
            }
        }
        #endregion

        #region ConditionRefreshMethod
        /// <summary>
        /// A description for the ConditionRefresh Method.
        /// </summary>
        public BaseConditionType.ConditionRefreshMethodSource ConditionRefreshMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_conditionRefreshMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_conditionRefreshMethod != null)
                    {
                        RemoveChild(m_conditionRefreshMethod);
                    }

                    m_conditionRefreshMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the ConditionRefresh method.
        /// </summary>
        public void ConditionRefresh(OperationContext context, uint subscriptionId)
        {     
            lock (DataLock)
            {     
                ConditionRefreshMethod.Call(context, this, subscriptionId);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the ConditionRefresh method is called.
        /// </summary>
        public void SetConditionRefreshCallback(BaseConditionType.ConditionRefreshMethodHandler callback)
        {
            lock (DataLock)
            {  
                ConditionRefreshMethod.SetCallback(this, callback);
            }
        }
        #endregion
        #endregion
        
        #region Method Declarations
        #region ConditionRefreshMethodSource Class
        /// <summary>
        /// Implements a method which may be used by many nodes.
        /// </summary>
        public partial class ConditionRefreshMethodSource : MethodSource
        {
            #region Constructors
            /// <summary>
            /// Initializes the object with default values.
            /// </summary>
            public ConditionRefreshMethodSource(IServerInternal server, NodeSource parent) : base(server, parent)
            {
                Arguments = CreateArguments();
            }
            
            /// <summary>
            /// Creates a new instance of the node.
            /// </summary>
            public static new ConditionRefreshMethodSource Construct(
                IServerInternal server, 
                NodeSource      parent, 
                NodeId          referenceTypeId,
                NodeId          nodeId,
                QualifiedName   browseName,
                uint            numericId)
            {
                ConditionRefreshMethodSource instance = new ConditionRefreshMethodSource(server, parent);
                instance.Initialize(referenceTypeId, nodeId, browseName, numericId, null);
                return instance;
            }
            #endregion
             
            #region ICloneable Members
            /// <summary cref="NodeSource.Clone(NodeSource)" />
            public override NodeSource Clone(NodeSource parent)
            {
                lock (DataLock)
                {
                    ConditionRefreshMethodSource clone = new ConditionRefreshMethodSource(Server, parent);
                    clone.Initialize(this);
                    return clone;
                }
            }
            #endregion

            #region Public Interface
            /// <summary>
            /// Calls the ConditionRefresh method.
            /// </summary>
            public void Call(OperationContext context, NodeSource target, uint subscriptionId)
            {    
                List<object> inputArguments = new List<object>();
                List<ServiceResult> argumentErrors = new List<ServiceResult>();
                List<object> outputArguments = new List<object>();
                
                inputArguments.Add(subscriptionId);

                ServiceResult result = Call(
                    context, 
                    NodeId, 
                    null, 
                    Parent.NodeId, 
                    inputArguments, 
                    argumentErrors, 
                    outputArguments);

                if (ServiceResult.IsBad(result))
                {
                    throw new ServiceResultException(result);
                }
                    
            }
            #endregion
            
            #region Protected Methods
            /// <summary>
            /// Called when the ConditionRefresh method is called.
            /// </summary>
            protected override void Call(
                OperationContext     context, 
                NodeSource           target,
                Delegate             methodToCall,
                IList<object>        inputArguments,
                IList<ServiceResult> argumentErrors,
                IList<object>        outputArguments)
            {
                ConditionRefreshMethodHandler Callback = methodToCall as ConditionRefreshMethodHandler;

                if (Callback == null)
                {
                    base.Call(context, target, methodToCall, inputArguments, argumentErrors, outputArguments);
                    return;
                }

                uint subscriptionId = (uint)inputArguments[0];

                Callback(context, target, subscriptionId);
            }

            /// <summary>
            /// Creates the arguments for the ConditionRefresh method.
            /// </summary>
            protected MethodArguments CreateArguments()
            {
                MethodArguments arguments = new MethodArguments();

                Argument argument = null;
                
                // SubscriptionId
                argument = new Argument();

                argument.Name = "SubscriptionId";
                argument.DataType = Opc.Ua.DataTypes.IntegerId;
                argument.ValueRank = ValueRanks.Scalar;
                argument.Description = new LocalizedText("BaseConditionType_ConditionRefresh_InputArgument_SubscriptionId_Description", "en", "The identifiers for the suscription to refresh.");

                arguments.Input.Add(argument);
                

                return arguments;
            }
            #endregion
        }

        /// <summary>
        /// A delegate used to receive notifications when the method is called.
        /// </summary>
        public delegate void ConditionRefreshMethodHandler(OperationContext context, NodeSource target, uint subscriptionId);
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                BaseConditionType type = source as BaseConditionType;

                if (type != null && type.Retain != null)
                {
                    Retain = (Property<bool>)type.Retain.Clone(this);
                    Retain.Initialize(type.Retain);
                }

                if (type != null && type.ConditionRefreshMethod != null)
                {
                    ConditionRefreshMethod = (BaseConditionType.ConditionRefreshMethodSource)type.ConditionRefreshMethod.Clone(this);
                    ConditionRefreshMethod.Initialize(type.ConditionRefreshMethod);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_retain = Property<bool>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.BaseConditionType_Retain, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Retain, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.BaseConditionType_Retain);

            m_conditionRefreshMethod = BaseConditionType.ConditionRefreshMethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Methods.BaseConditionType_ConditionRefresh, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ConditionRefresh, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.BaseConditionType_ConditionRefresh);
        }
        #endregion

        #region Private Fields
        Property<bool> m_retain;
        BaseConditionType.ConditionRefreshMethodSource m_conditionRefreshMethod;
        #endregion
    }
    #endregion

    #region BaseCondition Class
    /// <summary>
    /// Represents an instance of the BaseConditionType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class BaseCondition : BaseEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected BaseCondition(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = BaseConditionType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new BaseCondition Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            BaseCondition instance = new BaseCondition(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new BaseCondition Construct(IServerInternal server)
        {
            BaseCondition instance = new BaseCondition(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                BaseCondition clone = new BaseCondition(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region Retain
        /// <summary>
        /// A description for the Retain Property.
        /// </summary>
        public Property<bool> Retain
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_retain; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_retain != null)
                    {
                        RemoveChild(m_retain);
                    }

                    m_retain = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceRetain(Property<bool> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Retain = replacement;

                Retain.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Retain, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.BaseConditionType_Retain,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                BaseCondition instance = source as BaseCondition;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                BaseConditionType type = source as BaseConditionType;

                if (type != null && type.Retain != null)
                {
                    Retain = (Property<bool>)type.Retain.Clone(this);
                    Retain.Initialize(type.Retain);
                }
                else if (instance != null && instance.Retain != null)
                {
                    Retain = (Property<bool>)instance.Retain.Clone(this);
                    Retain.Initialize(instance.Retain);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_retain = Property<bool>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Retain, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.BaseConditionType_Retain);
        }
        #endregion

        #region Private Fields
        private BaseConditionType m_typeDefinition;
        Property<bool> m_retain;
        #endregion
    }
    #endregion

    #region AddCommentByEventIdsMethodSource Class
    /// <summary>
    /// Implements a method which may be used by many nodes.
    /// </summary>
    public partial class AddCommentByEventIdsMethodSource : MethodSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AddCommentByEventIdsMethodSource(IServerInternal server, NodeSource parent) : base(server, parent)
        {
            Arguments = CreateArguments();
        }
        
        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AddCommentByEventIdsMethodSource Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AddCommentByEventIdsMethodSource instance = new AddCommentByEventIdsMethodSource(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, null);
            return instance;
        }
        #endregion
         
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AddCommentByEventIdsMethodSource clone = new AddCommentByEventIdsMethodSource(Server, parent);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion

        #region Public Interface
        /// <summary>
        /// Calls the AddCommentByEventIds method.
        /// </summary>
        public StatusResult[] Call(
            OperationContext context,
            NodeSource       target,
            byte[][]         eventIds,
            LocalizedText    comment)
        {    
            List<object> inputArguments = new List<object>();
            List<ServiceResult> argumentErrors = new List<ServiceResult>();
            List<object> outputArguments = new List<object>();
            
            inputArguments.Add(eventIds);
            inputArguments.Add(comment);

            ServiceResult result = Call(
                context, 
                NodeId, 
                null, 
                Parent.NodeId, 
                inputArguments, 
                argumentErrors, 
                outputArguments);

            if (ServiceResult.IsBad(result))
            {
                throw new ServiceResultException(result);
            }
                
            return (StatusResult[])outputArguments[0];
        }
        #endregion
        
        #region Protected Methods
        /// <summary>
        /// Called when the AddCommentByEventIds method is called.
        /// </summary>
        protected override void Call(
            OperationContext     context, 
            NodeSource           target,
            Delegate             methodToCall,
            IList<object>        inputArguments,
            IList<ServiceResult> argumentErrors,
            IList<object>        outputArguments)
        {
            AddCommentByEventIdsMethodHandler Callback = methodToCall as AddCommentByEventIdsMethodHandler;

            if (Callback == null)
            {
                base.Call(context, target, methodToCall, inputArguments, argumentErrors, outputArguments);
                return;
            }

            byte[][] eventIds = (byte[][])inputArguments[0];
            LocalizedText comment = (LocalizedText)inputArguments[1];
            StatusResult[] commentResponse = (StatusResult[])null;

            commentResponse = Callback(
                context,
                target,
                eventIds,
                comment);
            
            outputArguments.Add(commentResponse);
        }

        /// <summary>
        /// Creates the arguments for the AddCommentByEventIds method.
        /// </summary>
        protected MethodArguments CreateArguments()
        {
            MethodArguments arguments = new MethodArguments();

            Argument argument = null;
            
            // EventIds
            argument = new Argument();

            argument.Name = "EventIds";
            argument.DataType = Opc.Ua.DataTypes.ByteString;
            argument.ValueRank = ValueRanks.OneDimension;
            argument.Description = new LocalizedText("AddCommentByEventIds_InputArgument_EventIds_Description", "en", "The identifiers for the events to comment.");

            arguments.Input.Add(argument);

            // Comment
            argument = new Argument();

            argument.Name = "Comment";
            argument.DataType = Opc.Ua.DataTypes.LocalizedText;
            argument.ValueRank = ValueRanks.Scalar;
            argument.Description = new LocalizedText("AddCommentByEventIds_InputArgument_Comment_Description", "en", "The comment to add.");

            arguments.Input.Add(argument);
            
            // CommentResponse
            argument = new Argument();

            argument.Name = "CommentResponse";
            argument.DataType = Opc.Ua.DataTypes.StatusResult;
            argument.ValueRank = ValueRanks.OneDimension;
            argument.Description = new LocalizedText("AddCommentByEventIds_OutputArgument_CommentResponse_Description", "en", "The result of the comment operation for each event specified.");

            arguments.Output.Add(argument);

            return arguments;
        }
        #endregion
    }

    /// <summary>
    /// A delegate used to receive notifications when the method is called.
    /// </summary>
    public delegate StatusResult[] AddCommentByEventIdsMethodHandler(
        OperationContext context,
        NodeSource       target,
        byte[][]         eventIds,
        LocalizedText    comment);
    #endregion

    #region AddCommentMethodSource Class
    /// <summary>
    /// Implements a method which may be used by many nodes.
    /// </summary>
    public partial class AddCommentMethodSource : MethodSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AddCommentMethodSource(IServerInternal server, NodeSource parent) : base(server, parent)
        {
            Arguments = CreateArguments();
        }
        
        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AddCommentMethodSource Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AddCommentMethodSource instance = new AddCommentMethodSource(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, null);
            return instance;
        }
        #endregion
         
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AddCommentMethodSource clone = new AddCommentMethodSource(Server, parent);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion

        #region Public Interface
        /// <summary>
        /// Calls the AddComment method.
        /// </summary>
        public void Call(OperationContext context, NodeSource target, LocalizedText comment)
        {    
            List<object> inputArguments = new List<object>();
            List<ServiceResult> argumentErrors = new List<ServiceResult>();
            List<object> outputArguments = new List<object>();
            
            inputArguments.Add(comment);

            ServiceResult result = Call(
                context, 
                NodeId, 
                null, 
                Parent.NodeId, 
                inputArguments, 
                argumentErrors, 
                outputArguments);

            if (ServiceResult.IsBad(result))
            {
                throw new ServiceResultException(result);
            }
                
        }
        #endregion
        
        #region Protected Methods
        /// <summary>
        /// Called when the AddComment method is called.
        /// </summary>
        protected override void Call(
            OperationContext     context, 
            NodeSource           target,
            Delegate             methodToCall,
            IList<object>        inputArguments,
            IList<ServiceResult> argumentErrors,
            IList<object>        outputArguments)
        {
            AddCommentMethodHandler Callback = methodToCall as AddCommentMethodHandler;

            if (Callback == null)
            {
                base.Call(context, target, methodToCall, inputArguments, argumentErrors, outputArguments);
                return;
            }

            LocalizedText comment = (LocalizedText)inputArguments[0];

            Callback(context, target, comment);
        }

        /// <summary>
        /// Creates the arguments for the AddComment method.
        /// </summary>
        protected MethodArguments CreateArguments()
        {
            MethodArguments arguments = new MethodArguments();

            Argument argument = null;
            
            // Comment
            argument = new Argument();

            argument.Name = "Comment";
            argument.DataType = Opc.Ua.DataTypes.LocalizedText;
            argument.ValueRank = ValueRanks.Scalar;
            argument.Description = new LocalizedText("AddComment_InputArgument_Comment_Description", "en", "The comment to add to the condition.");

            arguments.Input.Add(argument);
            

            return arguments;
        }
        #endregion
    }

    /// <summary>
    /// A delegate used to receive notifications when the method is called.
    /// </summary>
    public delegate void AddCommentMethodHandler(OperationContext context, NodeSource target, LocalizedText comment);
    #endregion

    #region ConditionType Class
    /// <summary>
    /// Represents the ConditionType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class ConditionType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public ConditionType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.ConditionType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.ConditionType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseConditionType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new ConditionType FindSource(IServerInternal server)
        {
            ConditionType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.ConditionType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as ConditionType;

                if (type != null)
                {
                    return type;
                }

                type = new ConditionType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                ConditionType clone = new ConditionType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region State
        /// <summary>
        /// A description for the State Object.
        /// </summary>
        public ConditionStateMachine State
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_state; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_state != null)
                    {
                        RemoveChild(m_state);
                    }

                    m_state = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceState(ConditionStateMachine replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                State = replacement;

                State.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.State, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ConditionType_State,
                    null);
            }
        }
        #endregion

        #region GroupingId
        /// <summary>
        /// A description for the GroupingId Property.
        /// </summary>
        public Property<NodeId> GroupingId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_groupingId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_groupingId != null)
                    {
                        RemoveChild(m_groupingId);
                    }

                    m_groupingId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceGroupingId(Property<NodeId> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                GroupingId = replacement;

                GroupingId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.GroupingId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ConditionType_GroupingId,
                    null);
            }
        }
        #endregion

        #region AddCommentByEventIdsMethod
        /// <summary>
        /// A description for the AddCommentByEventIds Method.
        /// </summary>
        public AddCommentByEventIdsMethodSource AddCommentByEventIdsMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_addCommentByEventIdsMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_addCommentByEventIdsMethod != null)
                    {
                        RemoveChild(m_addCommentByEventIdsMethod);
                    }

                    m_addCommentByEventIdsMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the AddCommentByEventIds method.
        /// </summary>
        public StatusResult[] AddCommentByEventIds(
            OperationContext context,
            byte[][]         eventIds,
            LocalizedText    comment)
        {     
            lock (DataLock)
            {     
                return AddCommentByEventIdsMethod.Call(
                    context,
                    this,
                    eventIds,
                    comment);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the AddCommentByEventIds method is called.
        /// </summary>
        public void SetAddCommentByEventIdsCallback(AddCommentByEventIdsMethodHandler callback)
        {
            lock (DataLock)
            {  
                AddCommentByEventIdsMethod.SetCallback(this, callback);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                ConditionType type = source as ConditionType;

                if (type != null && type.State != null)
                {
                    State = (ConditionStateMachine)type.State.Clone(this);
                    State.Initialize(type.State);
                }

                if (type != null && type.GroupingId != null)
                {
                    GroupingId = (Property<NodeId>)type.GroupingId.Clone(this);
                    GroupingId.Initialize(type.GroupingId);
                }

                if (type != null && type.AddCommentByEventIdsMethod != null)
                {
                    AddCommentByEventIdsMethod = (AddCommentByEventIdsMethodSource)type.AddCommentByEventIdsMethod.Clone(this);
                    AddCommentByEventIdsMethod.Initialize(type.AddCommentByEventIdsMethod);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_state = ConditionStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ConditionType_State, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.State, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ConditionType_State);

            m_groupingId = Property<NodeId>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.ConditionType_GroupingId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.GroupingId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ConditionType_GroupingId);

            m_addCommentByEventIdsMethod = AddCommentByEventIdsMethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Methods.ConditionType_AddCommentByEventIds, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.AddCommentByEventIds, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.ConditionType_AddCommentByEventIds);
        }
        #endregion

        #region Private Fields
        ConditionStateMachine m_state;
        Property<NodeId> m_groupingId;
        AddCommentByEventIdsMethodSource m_addCommentByEventIdsMethod;
        #endregion
    }
    #endregion

    #region Condition Class
    /// <summary>
    /// Represents an instance of the ConditionType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class Condition : BaseCondition
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected Condition(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = ConditionType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new Condition Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            Condition instance = new Condition(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new Condition Construct(IServerInternal server)
        {
            Condition instance = new Condition(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                Condition clone = new Condition(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region State
        /// <summary>
        /// A description for the State Object.
        /// </summary>
        public ConditionStateMachine State
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_state; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_state != null)
                    {
                        RemoveChild(m_state);
                    }

                    m_state = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceState(ConditionStateMachine replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                State = replacement;

                State.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.State, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ConditionType_State,
                    null);
            }
        }
        #endregion

        #region GroupingId
        /// <summary>
        /// A description for the GroupingId Property.
        /// </summary>
        public Property<NodeId> GroupingId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_groupingId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_groupingId != null)
                    {
                        RemoveChild(m_groupingId);
                    }

                    m_groupingId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceGroupingId(Property<NodeId> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                GroupingId = replacement;

                GroupingId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.GroupingId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.ConditionType_GroupingId,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                Condition instance = source as Condition;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                ConditionType type = source as ConditionType;

                if (type != null && type.State != null)
                {
                    State = (ConditionStateMachine)type.State.Clone(this);
                    State.Initialize(type.State);
                }
                else if (instance != null && instance.State != null)
                {
                    State = (ConditionStateMachine)instance.State.Clone(this);
                    State.Initialize(instance.State);
                }

                if (type != null && type.GroupingId != null)
                {
                    GroupingId = (Property<NodeId>)type.GroupingId.Clone(this);
                    GroupingId.Initialize(type.GroupingId);
                }
                else if (instance != null && instance.GroupingId != null)
                {
                    GroupingId = (Property<NodeId>)instance.GroupingId.Clone(this);
                    GroupingId.Initialize(instance.GroupingId);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_state = ConditionStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.State, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ConditionType_State);

            m_groupingId = Property<NodeId>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.GroupingId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.ConditionType_GroupingId);
        }
        #endregion

        #region Private Fields
        private ConditionType m_typeDefinition;
        ConditionStateMachine m_state;
        Property<NodeId> m_groupingId;
        #endregion
    }
    #endregion

    #region ConditionGroupType Class
    /// <summary>
    /// Represents the ConditionGroupType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class ConditionGroupType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public ConditionGroupType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.ConditionGroupType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.ConditionGroupType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.FolderType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new ConditionGroupType FindSource(IServerInternal server)
        {
            ConditionGroupType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.ConditionGroupType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as ConditionGroupType;

                if (type != null)
                {
                    return type;
                }

                type = new ConditionGroupType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                ConditionGroupType clone = new ConditionGroupType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                ConditionGroupType type = source as ConditionGroupType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endregion

    #region ConditionGroup Class
    /// <summary>
    /// Represents an instance of the ConditionGroupType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class ConditionGroup : Folder
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected ConditionGroup(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = ConditionGroupType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new ConditionGroup Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            ConditionGroup instance = new ConditionGroup(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new ConditionGroup Construct(IServerInternal server)
        {
            ConditionGroup instance = new ConditionGroup(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                ConditionGroup clone = new ConditionGroup(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                ConditionGroup instance = source as ConditionGroup;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                ConditionGroupType type = source as ConditionGroupType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private ConditionGroupType m_typeDefinition;
        #endregion
    }
    #endregion

    #region RefreshStartEventType Class
    /// <summary>
    /// Represents the RefreshStartEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class RefreshStartEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public RefreshStartEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.RefreshStartEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.RefreshStartEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.SystemEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new RefreshStartEventType FindSource(IServerInternal server)
        {
            RefreshStartEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.RefreshStartEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as RefreshStartEventType;

                if (type != null)
                {
                    return type;
                }

                type = new RefreshStartEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                RefreshStartEventType clone = new RefreshStartEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                RefreshStartEventType type = source as RefreshStartEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endregion

    #region RefreshStartEvent Class
    /// <summary>
    /// Represents an instance of the RefreshStartEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class RefreshStartEvent : SystemEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected RefreshStartEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = RefreshStartEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new RefreshStartEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            RefreshStartEvent instance = new RefreshStartEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new RefreshStartEvent Construct(IServerInternal server)
        {
            RefreshStartEvent instance = new RefreshStartEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                RefreshStartEvent clone = new RefreshStartEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                RefreshStartEvent instance = source as RefreshStartEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                RefreshStartEventType type = source as RefreshStartEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private RefreshStartEventType m_typeDefinition;
        #endregion
    }
    #endregion

    #region RefreshEndEventType Class
    /// <summary>
    /// Represents the RefreshEndEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class RefreshEndEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public RefreshEndEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.RefreshEndEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.RefreshEndEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.SystemEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new RefreshEndEventType FindSource(IServerInternal server)
        {
            RefreshEndEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.RefreshEndEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as RefreshEndEventType;

                if (type != null)
                {
                    return type;
                }

                type = new RefreshEndEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                RefreshEndEventType clone = new RefreshEndEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                RefreshEndEventType type = source as RefreshEndEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endregion

    #region RefreshEndEvent Class
    /// <summary>
    /// Represents an instance of the RefreshEndEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class RefreshEndEvent : SystemEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected RefreshEndEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = RefreshEndEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new RefreshEndEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            RefreshEndEvent instance = new RefreshEndEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new RefreshEndEvent Construct(IServerInternal server)
        {
            RefreshEndEvent instance = new RefreshEndEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                RefreshEndEvent clone = new RefreshEndEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                RefreshEndEvent instance = source as RefreshEndEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                RefreshEndEventType type = source as RefreshEndEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private RefreshEndEventType m_typeDefinition;
        #endregion
    }
    #endregion

    #region RefreshRequiredEventType Class
    /// <summary>
    /// Represents the RefreshRequiredEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class RefreshRequiredEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public RefreshRequiredEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.RefreshRequiredEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.RefreshRequiredEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.SystemEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new RefreshRequiredEventType FindSource(IServerInternal server)
        {
            RefreshRequiredEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.RefreshRequiredEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as RefreshRequiredEventType;

                if (type != null)
                {
                    return type;
                }

                type = new RefreshRequiredEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                RefreshRequiredEventType clone = new RefreshRequiredEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                RefreshRequiredEventType type = source as RefreshRequiredEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endregion

    #region RefreshRequiredEvent Class
    /// <summary>
    /// Represents an instance of the RefreshRequiredEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class RefreshRequiredEvent : SystemEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected RefreshRequiredEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = RefreshRequiredEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new RefreshRequiredEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            RefreshRequiredEvent instance = new RefreshRequiredEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new RefreshRequiredEvent Construct(IServerInternal server)
        {
            RefreshRequiredEvent instance = new RefreshRequiredEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                RefreshRequiredEvent clone = new RefreshRequiredEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                RefreshRequiredEvent instance = source as RefreshRequiredEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                RefreshRequiredEventType type = source as RefreshRequiredEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private RefreshRequiredEventType m_typeDefinition;
        #endregion
    }
    #endregion

    #region AuditConditionEventType Class
    /// <summary>
    /// Represents the AuditConditionEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditConditionEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AuditConditionEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AuditConditionEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AuditConditionEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AuditUpdateStateEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AuditConditionEventType FindSource(IServerInternal server)
        {
            AuditConditionEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AuditConditionEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AuditConditionEventType;

                if (type != null)
                {
                    return type;
                }

                type = new AuditConditionEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditConditionEventType clone = new AuditConditionEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AuditConditionEventType type = source as AuditConditionEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endregion

    #region AuditConditionEvent Class
    /// <summary>
    /// Represents an instance of the AuditConditionEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditConditionEvent : AuditUpdateStateEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AuditConditionEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AuditConditionEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AuditConditionEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AuditConditionEvent instance = new AuditConditionEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AuditConditionEvent Construct(IServerInternal server)
        {
            AuditConditionEvent instance = new AuditConditionEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditConditionEvent clone = new AuditConditionEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AuditConditionEvent instance = source as AuditConditionEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AuditConditionEventType type = source as AuditConditionEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private AuditConditionEventType m_typeDefinition;
        #endregion
    }
    #endregion

    #region BaseConditionStateMachineType Class
    /// <summary>
    /// Represents the BaseConditionStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class BaseConditionStateMachineType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public BaseConditionStateMachineType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.BaseConditionStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.BaseConditionStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.StateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new BaseConditionStateMachineType FindSource(IServerInternal server)
        {
            BaseConditionStateMachineType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.BaseConditionStateMachineType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as BaseConditionStateMachineType;

                if (type != null)
                {
                    return type;
                }

                type = new BaseConditionStateMachineType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                BaseConditionStateMachineType clone = new BaseConditionStateMachineType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                BaseConditionStateMachineType type = source as BaseConditionStateMachineType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endregion

    #region BaseConditionStateMachine Class
    /// <summary>
    /// Represents an instance of the BaseConditionStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class BaseConditionStateMachine : StateMachine
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected BaseConditionStateMachine(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = BaseConditionStateMachineType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new BaseConditionStateMachine Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            BaseConditionStateMachine instance = new BaseConditionStateMachine(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new BaseConditionStateMachine Construct(IServerInternal server)
        {
            BaseConditionStateMachine instance = new BaseConditionStateMachine(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                BaseConditionStateMachine clone = new BaseConditionStateMachine(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                BaseConditionStateMachine instance = source as BaseConditionStateMachine;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                BaseConditionStateMachineType type = source as BaseConditionStateMachineType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private BaseConditionStateMachineType m_typeDefinition;
        #endregion
    }
    #endregion

    #region ConditionStateMachineType Class
    /// <summary>
    /// Represents the ConditionStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class ConditionStateMachineType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public ConditionStateMachineType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.ConditionStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.ConditionStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseConditionStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new ConditionStateMachineType FindSource(IServerInternal server)
        {
            ConditionStateMachineType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.ConditionStateMachineType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as ConditionStateMachineType;

                if (type != null)
                {
                    return type;
                }

                type = new ConditionStateMachineType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                ConditionStateMachineType clone = new ConditionStateMachineType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region Enabled
        /// <summary>
        /// A description for the Enabled Object.
        /// </summary>
        public StateMachineState Enabled
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_enabled; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_enabled != null)
                    {
                        RemoveChild(m_enabled);
                    }

                    m_enabled = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceEnabled(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Enabled = replacement;

                Enabled.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Enabled, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ConditionStateMachineType_Enabled,
                    null);
            }
        }
        #endregion

        #region Disabled
        /// <summary>
        /// A description for the Disabled Object.
        /// </summary>
        public StateMachineState Disabled
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_disabled; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_disabled != null)
                    {
                        RemoveChild(m_disabled);
                    }

                    m_disabled = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceDisabled(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Disabled = replacement;

                Disabled.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Disabled, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ConditionStateMachineType_Disabled,
                    null);
            }
        }
        #endregion

        #region ToEnabled
        /// <summary>
        /// A description for the ToEnabled Object.
        /// </summary>
        public StateMachineTransition ToEnabled
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_toEnabled; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_toEnabled != null)
                    {
                        RemoveChild(m_toEnabled);
                    }

                    m_toEnabled = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceToEnabled(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ToEnabled = replacement;

                ToEnabled.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ToEnabled, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ConditionStateMachineType_ToEnabled,
                    null);
            }
        }
        #endregion

        #region ToDisabled
        /// <summary>
        /// A description for the ToDisabled Object.
        /// </summary>
        public StateMachineTransition ToDisabled
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_toDisabled; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_toDisabled != null)
                    {
                        RemoveChild(m_toDisabled);
                    }

                    m_toDisabled = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceToDisabled(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ToDisabled = replacement;

                ToDisabled.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ToDisabled, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ConditionStateMachineType_ToDisabled,
                    null);
            }
        }
        #endregion

        #region EnableMethod
        /// <summary>
        /// A description for the Enable Method.
        /// </summary>
        public MethodSource EnableMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_enableMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_enableMethod != null)
                    {
                        RemoveChild(m_enableMethod);
                    }

                    m_enableMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the Enable method.
        /// </summary>
        public void Enable(OperationContext context)
        {     
            lock (DataLock)
            {     
                EnableMethod.Call(context, this);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the Enable method is called.
        /// </summary>
        public void SetEnableCallback(NoArgumentsMethodHandler callback)
        {
            lock (DataLock)
            {  
                EnableMethod.SetCallback(this, callback);
            }
        }
        #endregion

        #region DisableMethod
        /// <summary>
        /// A description for the Disable Method.
        /// </summary>
        public MethodSource DisableMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_disableMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_disableMethod != null)
                    {
                        RemoveChild(m_disableMethod);
                    }

                    m_disableMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the Disable method.
        /// </summary>
        public void Disable(OperationContext context)
        {     
            lock (DataLock)
            {     
                DisableMethod.Call(context, this);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the Disable method is called.
        /// </summary>
        public void SetDisableCallback(NoArgumentsMethodHandler callback)
        {
            lock (DataLock)
            {  
                DisableMethod.SetCallback(this, callback);
            }
        }
        #endregion

        #region Status
        /// <summary>
        /// A description for the Status Object.
        /// </summary>
        public StatusStateMachine Status
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_status; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_status != null)
                    {
                        RemoveChild(m_status);
                    }

                    m_status = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceStatus(StatusStateMachine replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Status = replacement;

                Status.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Status, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ConditionStateMachineType_Status,
                    null);
            }
        }
        #endregion

        #region Severity
        /// <summary>
        /// A description for the Severity Object.
        /// </summary>
        public SeverityStateMachine Severity
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_severity; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_severity != null)
                    {
                        RemoveChild(m_severity);
                    }

                    m_severity = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSeverity(SeverityStateMachine replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Severity = replacement;

                Severity.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Severity, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ConditionStateMachineType_Severity,
                    null);
            }
        }
        #endregion

        #region Comment
        /// <summary>
        /// A description for the Comment Object.
        /// </summary>
        public CommentStateMachine Comment
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_comment; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_comment != null)
                    {
                        RemoveChild(m_comment);
                    }

                    m_comment = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceComment(CommentStateMachine replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Comment = replacement;

                Comment.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Comment, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ConditionStateMachineType_Comment,
                    null);
            }
        }
        #endregion

        #region CommentPrevious
        /// <summary>
        /// A description for the CommentPrevious Object.
        /// </summary>
        public CommentPreviousStateMachine CommentPrevious
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_commentPrevious; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_commentPrevious != null)
                    {
                        RemoveChild(m_commentPrevious);
                    }

                    m_commentPrevious = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCommentPrevious(CommentPreviousStateMachine replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CommentPrevious = replacement;

                CommentPrevious.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CommentPrevious, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ConditionStateMachineType_CommentPrevious,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                ConditionStateMachineType type = source as ConditionStateMachineType;

                if (type != null && type.Enabled != null)
                {
                    Enabled = (StateMachineState)type.Enabled.Clone(this);
                    Enabled.Initialize(type.Enabled);
                }

                if (type != null && type.Disabled != null)
                {
                    Disabled = (StateMachineState)type.Disabled.Clone(this);
                    Disabled.Initialize(type.Disabled);
                }

                if (type != null && type.ToEnabled != null)
                {
                    ToEnabled = (StateMachineTransition)type.ToEnabled.Clone(this);
                    ToEnabled.Initialize(type.ToEnabled);
                }

                if (type != null && type.ToDisabled != null)
                {
                    ToDisabled = (StateMachineTransition)type.ToDisabled.Clone(this);
                    ToDisabled.Initialize(type.ToDisabled);
                }

                if (type != null && type.Status != null)
                {
                    Status = (StatusStateMachine)type.Status.Clone(this);
                    Status.Initialize(type.Status);
                }

                if (type != null && type.Severity != null)
                {
                    Severity = (SeverityStateMachine)type.Severity.Clone(this);
                    Severity.Initialize(type.Severity);
                }

                if (type != null && type.Comment != null)
                {
                    Comment = (CommentStateMachine)type.Comment.Clone(this);
                    Comment.Initialize(type.Comment);
                }

                if (type != null && type.CommentPrevious != null)
                {
                    CommentPrevious = (CommentPreviousStateMachine)type.CommentPrevious.Clone(this);
                    CommentPrevious.Initialize(type.CommentPrevious);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_enabled = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ConditionStateMachineType_Enabled, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Enabled, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ConditionStateMachineType_Enabled);

            m_disabled = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ConditionStateMachineType_Disabled, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Disabled, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ConditionStateMachineType_Disabled);

            m_toEnabled = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ConditionStateMachineType_ToEnabled, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ToEnabled, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ConditionStateMachineType_ToEnabled);

            m_toDisabled = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ConditionStateMachineType_ToDisabled, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ToDisabled, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ConditionStateMachineType_ToDisabled);

            m_enableMethod = MethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Methods.ConditionStateMachineType_Enable, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Enable, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.ConditionStateMachineType_Enable);

            m_disableMethod = MethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Methods.ConditionStateMachineType_Disable, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Disable, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.ConditionStateMachineType_Disable);

            m_status = StatusStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ConditionStateMachineType_Status, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Status, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ConditionStateMachineType_Status);

            m_severity = SeverityStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ConditionStateMachineType_Severity, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Severity, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ConditionStateMachineType_Severity);

            m_comment = CommentStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ConditionStateMachineType_Comment, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Comment, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ConditionStateMachineType_Comment);

            m_commentPrevious = CommentPreviousStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ConditionStateMachineType_CommentPrevious, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.CommentPrevious, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ConditionStateMachineType_CommentPrevious);
        }
        #endregion

        #region Private Fields
        StateMachineState m_enabled;
        StateMachineState m_disabled;
        StateMachineTransition m_toEnabled;
        StateMachineTransition m_toDisabled;
        MethodSource m_enableMethod;
        MethodSource m_disableMethod;
        StatusStateMachine m_status;
        SeverityStateMachine m_severity;
        CommentStateMachine m_comment;
        CommentPreviousStateMachine m_commentPrevious;
        #endregion
    }
    #endregion

    #region ConditionStateMachine Class
    /// <summary>
    /// Represents an instance of the ConditionStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class ConditionStateMachine : BaseConditionStateMachine
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected ConditionStateMachine(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = ConditionStateMachineType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new ConditionStateMachine Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            ConditionStateMachine instance = new ConditionStateMachine(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new ConditionStateMachine Construct(IServerInternal server)
        {
            ConditionStateMachine instance = new ConditionStateMachine(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                ConditionStateMachine clone = new ConditionStateMachine(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region EnableMethod
        /// <summary>
        /// A description for the Enable Method.
        /// </summary>
        public MethodSource EnableMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_enableMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_enableMethod != null)
                    {
                        RemoveChild(m_enableMethod);
                    }

                    m_enableMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the Enable method.
        /// </summary>
        public void Enable(OperationContext context)
        {     
            lock (DataLock)
            {     
                EnableMethod.Call(context, this);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the Enable method is called.
        /// </summary>
        public void SetEnableCallback(NoArgumentsMethodHandler callback)
        {
            lock (DataLock)
            {  
                EnableMethod.SetCallback(this, callback);
            }
        }
        #endregion

        #region DisableMethod
        /// <summary>
        /// A description for the Disable Method.
        /// </summary>
        public MethodSource DisableMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_disableMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_disableMethod != null)
                    {
                        RemoveChild(m_disableMethod);
                    }

                    m_disableMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the Disable method.
        /// </summary>
        public void Disable(OperationContext context)
        {     
            lock (DataLock)
            {     
                DisableMethod.Call(context, this);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the Disable method is called.
        /// </summary>
        public void SetDisableCallback(NoArgumentsMethodHandler callback)
        {
            lock (DataLock)
            {  
                DisableMethod.SetCallback(this, callback);
            }
        }
        #endregion

        #region Status
        /// <summary>
        /// A description for the Status Object.
        /// </summary>
        public StatusStateMachine Status
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_status; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_status != null)
                    {
                        RemoveChild(m_status);
                    }

                    m_status = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceStatus(StatusStateMachine replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Status = replacement;

                Status.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Status, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ConditionStateMachineType_Status,
                    null);
            }
        }
        #endregion

        #region Severity
        /// <summary>
        /// A description for the Severity Object.
        /// </summary>
        public SeverityStateMachine Severity
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_severity; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_severity != null)
                    {
                        RemoveChild(m_severity);
                    }

                    m_severity = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSeverity(SeverityStateMachine replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Severity = replacement;

                Severity.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Severity, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ConditionStateMachineType_Severity,
                    null);
            }
        }
        #endregion

        #region Comment
        /// <summary>
        /// A description for the Comment Object.
        /// </summary>
        public CommentStateMachine Comment
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_comment; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_comment != null)
                    {
                        RemoveChild(m_comment);
                    }

                    m_comment = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceComment(CommentStateMachine replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Comment = replacement;

                Comment.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Comment, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ConditionStateMachineType_Comment,
                    null);
            }
        }
        #endregion

        #region CommentPrevious
        /// <summary>
        /// A description for the CommentPrevious Object.
        /// </summary>
        public CommentPreviousStateMachine CommentPrevious
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_commentPrevious; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_commentPrevious != null)
                    {
                        RemoveChild(m_commentPrevious);
                    }

                    m_commentPrevious = value; 
                }
            }
        }

        /// <summary>
        /// Whether the CommentPrevious node is specified for the node.
        /// </summary>
        public bool CommentPreviousSpecified
        {
        	get 
            { 
                lock (DataLock)
                {
                    return m_commentPrevious != null; 
                }
            }
        }

        /// <summary>
        /// Specifies the optional child.
        /// </summary>
        public void SpecifyCommentPrevious(CommentPreviousStateMachine replacement)
        {
            CheckNodeManagerState();

            lock (DataLock)
            {
                if (CommentPreviousSpecified)
                {
                    CommentPrevious = (CommentPreviousStateMachine)DeleteChild(m_commentPrevious);
                }

                if (replacement != null)
                {       
                    CommentPrevious = replacement;

                    CommentPrevious.Create(
                        this.NodeId, 
                        new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                        null,
                        new QualifiedName(Opc.Ua.BrowseNames.CommentPrevious, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                        Opc.Ua.Objects.ConditionStateMachineType_CommentPrevious,
                        null);
                }
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                ConditionStateMachine instance = source as ConditionStateMachine;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                ConditionStateMachineType type = source as ConditionStateMachineType;

                if (type != null && type.EnableMethod != null)
                {
                    EnableMethod = (MethodSource)type.EnableMethod.Clone(this);
                    EnableMethod.Initialize(type.EnableMethod);
                }
                else if (instance != null && instance.EnableMethod != null)
                {
                    EnableMethod = (MethodSource)instance.EnableMethod.Clone(this);
                    EnableMethod.Initialize(instance.EnableMethod);
                }

                if (type != null && type.DisableMethod != null)
                {
                    DisableMethod = (MethodSource)type.DisableMethod.Clone(this);
                    DisableMethod.Initialize(type.DisableMethod);
                }
                else if (instance != null && instance.DisableMethod != null)
                {
                    DisableMethod = (MethodSource)instance.DisableMethod.Clone(this);
                    DisableMethod.Initialize(instance.DisableMethod);
                }

                if (type != null && type.Status != null)
                {
                    Status = (StatusStateMachine)type.Status.Clone(this);
                    Status.Initialize(type.Status);
                }
                else if (instance != null && instance.Status != null)
                {
                    Status = (StatusStateMachine)instance.Status.Clone(this);
                    Status.Initialize(instance.Status);
                }

                if (type != null && type.Severity != null)
                {
                    Severity = (SeverityStateMachine)type.Severity.Clone(this);
                    Severity.Initialize(type.Severity);
                }
                else if (instance != null && instance.Severity != null)
                {
                    Severity = (SeverityStateMachine)instance.Severity.Clone(this);
                    Severity.Initialize(instance.Severity);
                }

                if (type != null && type.Comment != null)
                {
                    Comment = (CommentStateMachine)type.Comment.Clone(this);
                    Comment.Initialize(type.Comment);
                }
                else if (instance != null && instance.Comment != null)
                {
                    Comment = (CommentStateMachine)instance.Comment.Clone(this);
                    Comment.Initialize(instance.Comment);
                }

                if (type != null && type.CommentPrevious != null)
                {
                    CommentPrevious = (CommentPreviousStateMachine)type.CommentPrevious.Clone(this);
                    CommentPrevious.Initialize(type.CommentPrevious);
                }
                else if (instance != null && instance.CommentPrevious != null)
                {
                    CommentPrevious = (CommentPreviousStateMachine)instance.CommentPrevious.Clone(this);
                    CommentPrevious.Initialize(instance.CommentPrevious);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_enableMethod = MethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Enable, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.ConditionStateMachineType_Enable);

            m_disableMethod = MethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Disable, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.ConditionStateMachineType_Disable);

            m_status = StatusStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Status, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ConditionStateMachineType_Status);

            m_severity = SeverityStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Severity, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ConditionStateMachineType_Severity);

            m_comment = CommentStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Comment, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ConditionStateMachineType_Comment);
        }
        
        /// <summary cref="NodeSource.CreateChildren" />
        protected override void CreateChildren(object configuration)
        {
            base.CreateChildren(configuration);
                            
            CommentPrevious = (CommentPreviousStateMachine)InitializeOptionalChild(
                new ConstructInstanceDelegate(CommentPreviousStateMachine.Construct), 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.CommentPrevious, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ConditionStateMachineType_CommentPrevious,
                configuration);
        }
        #endregion

        #region Private Fields
        private ConditionStateMachineType m_typeDefinition;
        MethodSource m_enableMethod;
        MethodSource m_disableMethod;
        StatusStateMachine m_status;
        SeverityStateMachine m_severity;
        CommentStateMachine m_comment;
        CommentPreviousStateMachine m_commentPrevious;
        #endregion
    }
    #endregion

    #region AuditConditionEnableEventType Class
    /// <summary>
    /// Represents the AuditConditionEnableEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditConditionEnableEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AuditConditionEnableEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AuditConditionEnableEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AuditConditionEnableEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AuditConditionEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AuditConditionEnableEventType FindSource(IServerInternal server)
        {
            AuditConditionEnableEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AuditConditionEnableEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AuditConditionEnableEventType;

                if (type != null)
                {
                    return type;
                }

                type = new AuditConditionEnableEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditConditionEnableEventType clone = new AuditConditionEnableEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AuditConditionEnableEventType type = source as AuditConditionEnableEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endregion

    #region AuditConditionEnableEvent Class
    /// <summary>
    /// Represents an instance of the AuditConditionEnableEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditConditionEnableEvent : AuditConditionEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AuditConditionEnableEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AuditConditionEnableEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AuditConditionEnableEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AuditConditionEnableEvent instance = new AuditConditionEnableEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AuditConditionEnableEvent Construct(IServerInternal server)
        {
            AuditConditionEnableEvent instance = new AuditConditionEnableEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditConditionEnableEvent clone = new AuditConditionEnableEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AuditConditionEnableEvent instance = source as AuditConditionEnableEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AuditConditionEnableEventType type = source as AuditConditionEnableEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private AuditConditionEnableEventType m_typeDefinition;
        #endregion
    }
    #endregion

    #region StatusStateMachineType Class
    /// <summary>
    /// Represents the StatusStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class StatusStateMachineType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public StatusStateMachineType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.StatusStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.StatusStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseConditionStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new StatusStateMachineType FindSource(IServerInternal server)
        {
            StatusStateMachineType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.StatusStateMachineType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as StatusStateMachineType;

                if (type != null)
                {
                    return type;
                }

                type = new StatusStateMachineType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                StatusStateMachineType clone = new StatusStateMachineType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region Status
        /// <summary>
        /// A description for the Status Property.
        /// </summary>
        public Property<StatusCode> Status
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_status; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_status != null)
                    {
                        RemoveChild(m_status);
                    }

                    m_status = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceStatus(Property<StatusCode> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Status = replacement;

                Status.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Status, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.StatusStateMachineType_Status,
                    null);
            }
        }
        #endregion

        #region Change
        /// <summary>
        /// A description for the Change Object.
        /// </summary>
        public StateMachineState Change
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_change; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_change != null)
                    {
                        RemoveChild(m_change);
                    }

                    m_change = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceChange(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Change = replacement;

                Change.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Change, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.StatusStateMachineType_Change,
                    null);
            }
        }
        #endregion

        #region ToChange
        /// <summary>
        /// A description for the ToChange Object.
        /// </summary>
        public StateMachineTransition ToChange
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_toChange; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_toChange != null)
                    {
                        RemoveChild(m_toChange);
                    }

                    m_toChange = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceToChange(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ToChange = replacement;

                ToChange.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ToChange, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.StatusStateMachineType_ToChange,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                StatusStateMachineType type = source as StatusStateMachineType;

                if (type != null && type.Status != null)
                {
                    Status = (Property<StatusCode>)type.Status.Clone(this);
                    Status.Initialize(type.Status);
                }

                if (type != null && type.Change != null)
                {
                    Change = (StateMachineState)type.Change.Clone(this);
                    Change.Initialize(type.Change);
                }

                if (type != null && type.ToChange != null)
                {
                    ToChange = (StateMachineTransition)type.ToChange.Clone(this);
                    ToChange.Initialize(type.ToChange);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_status = Property<StatusCode>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.StatusStateMachineType_Status, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Status, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.StatusStateMachineType_Status);

            m_change = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.StatusStateMachineType_Change, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Change, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.StatusStateMachineType_Change);

            m_toChange = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.StatusStateMachineType_ToChange, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ToChange, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.StatusStateMachineType_ToChange);
        }
        #endregion

        #region Private Fields
        Property<StatusCode> m_status;
        StateMachineState m_change;
        StateMachineTransition m_toChange;
        #endregion
    }
    #endregion

    #region StatusStateMachine Class
    /// <summary>
    /// Represents an instance of the StatusStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class StatusStateMachine : BaseConditionStateMachine
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected StatusStateMachine(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = StatusStateMachineType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new StatusStateMachine Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            StatusStateMachine instance = new StatusStateMachine(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new StatusStateMachine Construct(IServerInternal server)
        {
            StatusStateMachine instance = new StatusStateMachine(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                StatusStateMachine clone = new StatusStateMachine(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region Status
        /// <summary>
        /// A description for the Status Property.
        /// </summary>
        public Property<StatusCode> Status
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_status; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_status != null)
                    {
                        RemoveChild(m_status);
                    }

                    m_status = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceStatus(Property<StatusCode> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Status = replacement;

                Status.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Status, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.StatusStateMachineType_Status,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                StatusStateMachine instance = source as StatusStateMachine;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                StatusStateMachineType type = source as StatusStateMachineType;

                if (type != null && type.Status != null)
                {
                    Status = (Property<StatusCode>)type.Status.Clone(this);
                    Status.Initialize(type.Status);
                }
                else if (instance != null && instance.Status != null)
                {
                    Status = (Property<StatusCode>)instance.Status.Clone(this);
                    Status.Initialize(instance.Status);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_status = Property<StatusCode>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Status, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.StatusStateMachineType_Status);
        }
        #endregion

        #region Private Fields
        private StatusStateMachineType m_typeDefinition;
        Property<StatusCode> m_status;
        #endregion
    }
    #endregion

    #region SeverityStateMachineType Class
    /// <summary>
    /// Represents the SeverityStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class SeverityStateMachineType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public SeverityStateMachineType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.SeverityStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.SeverityStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseConditionStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new SeverityStateMachineType FindSource(IServerInternal server)
        {
            SeverityStateMachineType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.SeverityStateMachineType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as SeverityStateMachineType;

                if (type != null)
                {
                    return type;
                }

                type = new SeverityStateMachineType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                SeverityStateMachineType clone = new SeverityStateMachineType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region LastSeverity
        /// <summary>
        /// A description for the LastSeverity Property.
        /// </summary>
        public Property<ushort> LastSeverity
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_lastSeverity; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_lastSeverity != null)
                    {
                        RemoveChild(m_lastSeverity);
                    }

                    m_lastSeverity = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceLastSeverity(Property<ushort> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                LastSeverity = replacement;

                LastSeverity.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.LastSeverity, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SeverityStateMachineType_LastSeverity,
                    null);
            }
        }
        #endregion

        #region Change
        /// <summary>
        /// A description for the Change Object.
        /// </summary>
        public StateMachineState Change
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_change; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_change != null)
                    {
                        RemoveChild(m_change);
                    }

                    m_change = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceChange(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Change = replacement;

                Change.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Change, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.SeverityStateMachineType_Change,
                    null);
            }
        }
        #endregion

        #region SeverityChange
        /// <summary>
        /// A description for the SeverityChange Object.
        /// </summary>
        public StateMachineTransition SeverityChange
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_severityChange; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_severityChange != null)
                    {
                        RemoveChild(m_severityChange);
                    }

                    m_severityChange = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSeverityChange(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SeverityChange = replacement;

                SeverityChange.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SeverityChange, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.SeverityStateMachineType_SeverityChange,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                SeverityStateMachineType type = source as SeverityStateMachineType;

                if (type != null && type.LastSeverity != null)
                {
                    LastSeverity = (Property<ushort>)type.LastSeverity.Clone(this);
                    LastSeverity.Initialize(type.LastSeverity);
                }

                if (type != null && type.Change != null)
                {
                    Change = (StateMachineState)type.Change.Clone(this);
                    Change.Initialize(type.Change);
                }

                if (type != null && type.SeverityChange != null)
                {
                    SeverityChange = (StateMachineTransition)type.SeverityChange.Clone(this);
                    SeverityChange.Initialize(type.SeverityChange);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_lastSeverity = Property<ushort>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SeverityStateMachineType_LastSeverity, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.LastSeverity, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SeverityStateMachineType_LastSeverity);

            m_change = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.SeverityStateMachineType_Change, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Change, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.SeverityStateMachineType_Change);

            m_severityChange = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.SeverityStateMachineType_SeverityChange, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SeverityChange, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.SeverityStateMachineType_SeverityChange);
        }
        #endregion

        #region Private Fields
        Property<ushort> m_lastSeverity;
        StateMachineState m_change;
        StateMachineTransition m_severityChange;
        #endregion
    }
    #endregion

    #region SeverityStateMachine Class
    /// <summary>
    /// Represents an instance of the SeverityStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class SeverityStateMachine : BaseConditionStateMachine
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected SeverityStateMachine(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = SeverityStateMachineType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new SeverityStateMachine Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            SeverityStateMachine instance = new SeverityStateMachine(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new SeverityStateMachine Construct(IServerInternal server)
        {
            SeverityStateMachine instance = new SeverityStateMachine(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                SeverityStateMachine clone = new SeverityStateMachine(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region LastSeverity
        /// <summary>
        /// A description for the LastSeverity Property.
        /// </summary>
        public Property<ushort> LastSeverity
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_lastSeverity; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_lastSeverity != null)
                    {
                        RemoveChild(m_lastSeverity);
                    }

                    m_lastSeverity = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceLastSeverity(Property<ushort> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                LastSeverity = replacement;

                LastSeverity.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.LastSeverity, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SeverityStateMachineType_LastSeverity,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                SeverityStateMachine instance = source as SeverityStateMachine;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                SeverityStateMachineType type = source as SeverityStateMachineType;

                if (type != null && type.LastSeverity != null)
                {
                    LastSeverity = (Property<ushort>)type.LastSeverity.Clone(this);
                    LastSeverity.Initialize(type.LastSeverity);
                }
                else if (instance != null && instance.LastSeverity != null)
                {
                    LastSeverity = (Property<ushort>)instance.LastSeverity.Clone(this);
                    LastSeverity.Initialize(instance.LastSeverity);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_lastSeverity = Property<ushort>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.LastSeverity, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SeverityStateMachineType_LastSeverity);
        }
        #endregion

        #region Private Fields
        private SeverityStateMachineType m_typeDefinition;
        Property<ushort> m_lastSeverity;
        #endregion
    }
    #endregion

    #region CommentStateMachineType Class
    /// <summary>
    /// Represents the CommentStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class CommentStateMachineType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public CommentStateMachineType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.CommentStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.CommentStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseConditionStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new CommentStateMachineType FindSource(IServerInternal server)
        {
            CommentStateMachineType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.CommentStateMachineType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as CommentStateMachineType;

                if (type != null)
                {
                    return type;
                }

                type = new CommentStateMachineType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                CommentStateMachineType clone = new CommentStateMachineType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region Comment
        /// <summary>
        /// A description for the Comment Property.
        /// </summary>
        public Property<LocalizedText> Comment
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_comment; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_comment != null)
                    {
                        RemoveChild(m_comment);
                    }

                    m_comment = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceComment(Property<LocalizedText> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Comment = replacement;

                Comment.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Comment, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.CommentStateMachineType_Comment,
                    null);
            }
        }
        #endregion

        #region ClientUserId
        /// <summary>
        /// A description for the ClientUserId Property.
        /// </summary>
        public Property<string> ClientUserId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_clientUserId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_clientUserId != null)
                    {
                        RemoveChild(m_clientUserId);
                    }

                    m_clientUserId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceClientUserId(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ClientUserId = replacement;

                ClientUserId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ClientUserId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.CommentStateMachineType_ClientUserId,
                    null);
            }
        }
        #endregion

        #region LastComment
        /// <summary>
        /// A description for the LastComment Object.
        /// </summary>
        public StateMachineInitialState LastComment
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_lastComment; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_lastComment != null)
                    {
                        RemoveChild(m_lastComment);
                    }

                    m_lastComment = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceLastComment(StateMachineInitialState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                LastComment = replacement;

                LastComment.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.LastComment, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.CommentStateMachineType_LastComment,
                    null);
            }
        }
        #endregion

        #region CommentAdded
        /// <summary>
        /// A description for the CommentAdded Object.
        /// </summary>
        public StateMachineState CommentAdded
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_commentAdded; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_commentAdded != null)
                    {
                        RemoveChild(m_commentAdded);
                    }

                    m_commentAdded = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCommentAdded(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CommentAdded = replacement;

                CommentAdded.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CommentAdded, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.CommentStateMachineType_CommentAdded,
                    null);
            }
        }
        #endregion

        #region ToCommentAdded
        /// <summary>
        /// A description for the ToCommentAdded Object.
        /// </summary>
        public StateMachineTransition ToCommentAdded
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_toCommentAdded; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_toCommentAdded != null)
                    {
                        RemoveChild(m_toCommentAdded);
                    }

                    m_toCommentAdded = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceToCommentAdded(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ToCommentAdded = replacement;

                ToCommentAdded.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ToCommentAdded, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.CommentStateMachineType_ToCommentAdded,
                    null);
            }
        }
        #endregion

        #region ToLastComment
        /// <summary>
        /// A description for the ToLastComment Object.
        /// </summary>
        public StateMachineTransition ToLastComment
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_toLastComment; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_toLastComment != null)
                    {
                        RemoveChild(m_toLastComment);
                    }

                    m_toLastComment = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceToLastComment(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ToLastComment = replacement;

                ToLastComment.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ToLastComment, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.CommentStateMachineType_ToLastComment,
                    null);
            }
        }
        #endregion

        #region AddCommentMethod
        /// <summary>
        /// A description for the AddComment Method.
        /// </summary>
        public AddCommentMethodSource AddCommentMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_addCommentMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_addCommentMethod != null)
                    {
                        RemoveChild(m_addCommentMethod);
                    }

                    m_addCommentMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the AddComment method.
        /// </summary>
        public void AddComment(OperationContext context, LocalizedText comment)
        {     
            lock (DataLock)
            {     
                AddCommentMethod.Call(context, this, comment);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the AddComment method is called.
        /// </summary>
        public void SetAddCommentCallback(AddCommentMethodHandler callback)
        {
            lock (DataLock)
            {  
                AddCommentMethod.SetCallback(this, callback);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                CommentStateMachineType type = source as CommentStateMachineType;

                if (type != null && type.Comment != null)
                {
                    Comment = (Property<LocalizedText>)type.Comment.Clone(this);
                    Comment.Initialize(type.Comment);
                }

                if (type != null && type.ClientUserId != null)
                {
                    ClientUserId = (Property<string>)type.ClientUserId.Clone(this);
                    ClientUserId.Initialize(type.ClientUserId);
                }

                if (type != null && type.LastComment != null)
                {
                    LastComment = (StateMachineInitialState)type.LastComment.Clone(this);
                    LastComment.Initialize(type.LastComment);
                }

                if (type != null && type.CommentAdded != null)
                {
                    CommentAdded = (StateMachineState)type.CommentAdded.Clone(this);
                    CommentAdded.Initialize(type.CommentAdded);
                }

                if (type != null && type.ToCommentAdded != null)
                {
                    ToCommentAdded = (StateMachineTransition)type.ToCommentAdded.Clone(this);
                    ToCommentAdded.Initialize(type.ToCommentAdded);
                }

                if (type != null && type.ToLastComment != null)
                {
                    ToLastComment = (StateMachineTransition)type.ToLastComment.Clone(this);
                    ToLastComment.Initialize(type.ToLastComment);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_comment = Property<LocalizedText>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.CommentStateMachineType_Comment, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Comment, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.CommentStateMachineType_Comment);

            m_clientUserId = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.CommentStateMachineType_ClientUserId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ClientUserId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.CommentStateMachineType_ClientUserId);

            m_lastComment = StateMachineInitialState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.CommentStateMachineType_LastComment, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.LastComment, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.CommentStateMachineType_LastComment);

            m_commentAdded = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.CommentStateMachineType_CommentAdded, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.CommentAdded, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.CommentStateMachineType_CommentAdded);

            m_toCommentAdded = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.CommentStateMachineType_ToCommentAdded, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ToCommentAdded, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.CommentStateMachineType_ToCommentAdded);

            m_toLastComment = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.CommentStateMachineType_ToLastComment, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ToLastComment, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.CommentStateMachineType_ToLastComment);

            m_addCommentMethod = AddCommentMethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Methods.CommentStateMachineType_AddComment, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.AddComment, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.CommentStateMachineType_AddComment);
        }
        #endregion

        #region Private Fields
        Property<LocalizedText> m_comment;
        Property<string> m_clientUserId;
        StateMachineInitialState m_lastComment;
        StateMachineState m_commentAdded;
        StateMachineTransition m_toCommentAdded;
        StateMachineTransition m_toLastComment;
        AddCommentMethodSource m_addCommentMethod;
        #endregion
    }
    #endregion

    #region CommentStateMachine Class
    /// <summary>
    /// Represents an instance of the CommentStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class CommentStateMachine : BaseConditionStateMachine
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected CommentStateMachine(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = CommentStateMachineType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new CommentStateMachine Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            CommentStateMachine instance = new CommentStateMachine(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new CommentStateMachine Construct(IServerInternal server)
        {
            CommentStateMachine instance = new CommentStateMachine(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                CommentStateMachine clone = new CommentStateMachine(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region Comment
        /// <summary>
        /// A description for the Comment Property.
        /// </summary>
        public Property<LocalizedText> Comment
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_comment; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_comment != null)
                    {
                        RemoveChild(m_comment);
                    }

                    m_comment = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceComment(Property<LocalizedText> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Comment = replacement;

                Comment.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Comment, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.CommentStateMachineType_Comment,
                    null);
            }
        }
        #endregion

        #region ClientUserId
        /// <summary>
        /// A description for the ClientUserId Property.
        /// </summary>
        public Property<string> ClientUserId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_clientUserId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_clientUserId != null)
                    {
                        RemoveChild(m_clientUserId);
                    }

                    m_clientUserId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceClientUserId(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ClientUserId = replacement;

                ClientUserId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ClientUserId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.CommentStateMachineType_ClientUserId,
                    null);
            }
        }
        #endregion

        #region AddCommentMethod
        /// <summary>
        /// A description for the AddComment Method.
        /// </summary>
        public AddCommentMethodSource AddCommentMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_addCommentMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_addCommentMethod != null)
                    {
                        RemoveChild(m_addCommentMethod);
                    }

                    m_addCommentMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the AddComment method.
        /// </summary>
        public void AddComment(OperationContext context, LocalizedText comment)
        {     
            lock (DataLock)
            {     
                AddCommentMethod.Call(context, this, comment);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the AddComment method is called.
        /// </summary>
        public void SetAddCommentCallback(AddCommentMethodHandler callback)
        {
            lock (DataLock)
            {  
                AddCommentMethod.SetCallback(this, callback);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                CommentStateMachine instance = source as CommentStateMachine;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                CommentStateMachineType type = source as CommentStateMachineType;

                if (type != null && type.Comment != null)
                {
                    Comment = (Property<LocalizedText>)type.Comment.Clone(this);
                    Comment.Initialize(type.Comment);
                }
                else if (instance != null && instance.Comment != null)
                {
                    Comment = (Property<LocalizedText>)instance.Comment.Clone(this);
                    Comment.Initialize(instance.Comment);
                }

                if (type != null && type.ClientUserId != null)
                {
                    ClientUserId = (Property<string>)type.ClientUserId.Clone(this);
                    ClientUserId.Initialize(type.ClientUserId);
                }
                else if (instance != null && instance.ClientUserId != null)
                {
                    ClientUserId = (Property<string>)instance.ClientUserId.Clone(this);
                    ClientUserId.Initialize(instance.ClientUserId);
                }

                if (type != null && type.AddCommentMethod != null)
                {
                    AddCommentMethod = (AddCommentMethodSource)type.AddCommentMethod.Clone(this);
                    AddCommentMethod.Initialize(type.AddCommentMethod);
                }
                else if (instance != null && instance.AddCommentMethod != null)
                {
                    AddCommentMethod = (AddCommentMethodSource)instance.AddCommentMethod.Clone(this);
                    AddCommentMethod.Initialize(instance.AddCommentMethod);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_comment = Property<LocalizedText>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Comment, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.CommentStateMachineType_Comment);

            m_clientUserId = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ClientUserId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.CommentStateMachineType_ClientUserId);

            m_addCommentMethod = AddCommentMethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.AddComment, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.CommentStateMachineType_AddComment);
        }
        #endregion

        #region Private Fields
        private CommentStateMachineType m_typeDefinition;
        Property<LocalizedText> m_comment;
        Property<string> m_clientUserId;
        AddCommentMethodSource m_addCommentMethod;
        #endregion
    }
    #endregion

    #region CommentPreviousStateMachineType Class
    /// <summary>
    /// Represents the CommentPreviousStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class CommentPreviousStateMachineType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public CommentPreviousStateMachineType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.CommentPreviousStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.CommentPreviousStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseConditionStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new CommentPreviousStateMachineType FindSource(IServerInternal server)
        {
            CommentPreviousStateMachineType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.CommentPreviousStateMachineType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as CommentPreviousStateMachineType;

                if (type != null)
                {
                    return type;
                }

                type = new CommentPreviousStateMachineType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                CommentPreviousStateMachineType clone = new CommentPreviousStateMachineType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region EventId
        /// <summary>
        /// A description for the EventId Property.
        /// </summary>
        public Property<byte[]> EventId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_eventId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_eventId != null)
                    {
                        RemoveChild(m_eventId);
                    }

                    m_eventId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceEventId(Property<byte[]> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                EventId = replacement;

                EventId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.EventId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.CommentPreviousStateMachineType_EventId,
                    null);
            }
        }
        #endregion

        #region Comment
        /// <summary>
        /// A description for the Comment Property.
        /// </summary>
        public Property<LocalizedText> Comment
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_comment; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_comment != null)
                    {
                        RemoveChild(m_comment);
                    }

                    m_comment = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceComment(Property<LocalizedText> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Comment = replacement;

                Comment.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Comment, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.CommentPreviousStateMachineType_Comment,
                    null);
            }
        }
        #endregion

        #region ClientUserId
        /// <summary>
        /// A description for the ClientUserId Property.
        /// </summary>
        public Property<string> ClientUserId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_clientUserId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_clientUserId != null)
                    {
                        RemoveChild(m_clientUserId);
                    }

                    m_clientUserId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceClientUserId(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ClientUserId = replacement;

                ClientUserId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ClientUserId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.CommentPreviousStateMachineType_ClientUserId,
                    null);
            }
        }
        #endregion

        #region LastComment
        /// <summary>
        /// A description for the LastComment Object.
        /// </summary>
        public StateMachineInitialState LastComment
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_lastComment; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_lastComment != null)
                    {
                        RemoveChild(m_lastComment);
                    }

                    m_lastComment = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceLastComment(StateMachineInitialState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                LastComment = replacement;

                LastComment.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.LastComment, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.CommentPreviousStateMachineType_LastComment,
                    null);
            }
        }
        #endregion

        #region CommentAdded
        /// <summary>
        /// A description for the CommentAdded Object.
        /// </summary>
        public StateMachineState CommentAdded
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_commentAdded; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_commentAdded != null)
                    {
                        RemoveChild(m_commentAdded);
                    }

                    m_commentAdded = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCommentAdded(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CommentAdded = replacement;

                CommentAdded.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CommentAdded, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.CommentPreviousStateMachineType_CommentAdded,
                    null);
            }
        }
        #endregion

        #region ToCommentAdded
        /// <summary>
        /// A description for the ToCommentAdded Object.
        /// </summary>
        public StateMachineTransition ToCommentAdded
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_toCommentAdded; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_toCommentAdded != null)
                    {
                        RemoveChild(m_toCommentAdded);
                    }

                    m_toCommentAdded = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceToCommentAdded(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ToCommentAdded = replacement;

                ToCommentAdded.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ToCommentAdded, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.CommentPreviousStateMachineType_ToCommentAdded,
                    null);
            }
        }
        #endregion

        #region ToLastComment
        /// <summary>
        /// A description for the ToLastComment Object.
        /// </summary>
        public StateMachineTransition ToLastComment
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_toLastComment; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_toLastComment != null)
                    {
                        RemoveChild(m_toLastComment);
                    }

                    m_toLastComment = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceToLastComment(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ToLastComment = replacement;

                ToLastComment.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ToLastComment, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.CommentPreviousStateMachineType_ToLastComment,
                    null);
            }
        }
        #endregion

        #region AddCommentByEventIdsMethod
        /// <summary>
        /// A description for the AddCommentByEventIds Method.
        /// </summary>
        public AddCommentByEventIdsMethodSource AddCommentByEventIdsMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_addCommentByEventIdsMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_addCommentByEventIdsMethod != null)
                    {
                        RemoveChild(m_addCommentByEventIdsMethod);
                    }

                    m_addCommentByEventIdsMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the AddCommentByEventIds method.
        /// </summary>
        public StatusResult[] AddCommentByEventIds(
            OperationContext context,
            byte[][]         eventIds,
            LocalizedText    comment)
        {     
            lock (DataLock)
            {     
                return AddCommentByEventIdsMethod.Call(
                    context,
                    this,
                    eventIds,
                    comment);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the AddCommentByEventIds method is called.
        /// </summary>
        public void SetAddCommentByEventIdsCallback(AddCommentByEventIdsMethodHandler callback)
        {
            lock (DataLock)
            {  
                AddCommentByEventIdsMethod.SetCallback(this, callback);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                CommentPreviousStateMachineType type = source as CommentPreviousStateMachineType;

                if (type != null && type.EventId != null)
                {
                    EventId = (Property<byte[]>)type.EventId.Clone(this);
                    EventId.Initialize(type.EventId);
                }

                if (type != null && type.Comment != null)
                {
                    Comment = (Property<LocalizedText>)type.Comment.Clone(this);
                    Comment.Initialize(type.Comment);
                }

                if (type != null && type.ClientUserId != null)
                {
                    ClientUserId = (Property<string>)type.ClientUserId.Clone(this);
                    ClientUserId.Initialize(type.ClientUserId);
                }

                if (type != null && type.LastComment != null)
                {
                    LastComment = (StateMachineInitialState)type.LastComment.Clone(this);
                    LastComment.Initialize(type.LastComment);
                }

                if (type != null && type.CommentAdded != null)
                {
                    CommentAdded = (StateMachineState)type.CommentAdded.Clone(this);
                    CommentAdded.Initialize(type.CommentAdded);
                }

                if (type != null && type.ToCommentAdded != null)
                {
                    ToCommentAdded = (StateMachineTransition)type.ToCommentAdded.Clone(this);
                    ToCommentAdded.Initialize(type.ToCommentAdded);
                }

                if (type != null && type.ToLastComment != null)
                {
                    ToLastComment = (StateMachineTransition)type.ToLastComment.Clone(this);
                    ToLastComment.Initialize(type.ToLastComment);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_eventId = Property<byte[]>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.CommentPreviousStateMachineType_EventId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.EventId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.CommentPreviousStateMachineType_EventId);

            m_comment = Property<LocalizedText>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.CommentPreviousStateMachineType_Comment, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Comment, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.CommentPreviousStateMachineType_Comment);

            m_clientUserId = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.CommentPreviousStateMachineType_ClientUserId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ClientUserId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.CommentPreviousStateMachineType_ClientUserId);

            m_lastComment = StateMachineInitialState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.CommentPreviousStateMachineType_LastComment, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.LastComment, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.CommentPreviousStateMachineType_LastComment);

            m_commentAdded = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.CommentPreviousStateMachineType_CommentAdded, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.CommentAdded, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.CommentPreviousStateMachineType_CommentAdded);

            m_toCommentAdded = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.CommentPreviousStateMachineType_ToCommentAdded, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ToCommentAdded, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.CommentPreviousStateMachineType_ToCommentAdded);

            m_toLastComment = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.CommentPreviousStateMachineType_ToLastComment, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ToLastComment, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.CommentPreviousStateMachineType_ToLastComment);

            m_addCommentByEventIdsMethod = AddCommentByEventIdsMethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Methods.CommentPreviousStateMachineType_AddCommentByEventIds, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.AddCommentByEventIds, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.CommentPreviousStateMachineType_AddCommentByEventIds);
        }
        #endregion

        #region Private Fields
        Property<byte[]> m_eventId;
        Property<LocalizedText> m_comment;
        Property<string> m_clientUserId;
        StateMachineInitialState m_lastComment;
        StateMachineState m_commentAdded;
        StateMachineTransition m_toCommentAdded;
        StateMachineTransition m_toLastComment;
        AddCommentByEventIdsMethodSource m_addCommentByEventIdsMethod;
        #endregion
    }
    #endregion

    #region CommentPreviousStateMachine Class
    /// <summary>
    /// Represents an instance of the CommentPreviousStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class CommentPreviousStateMachine : BaseConditionStateMachine
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected CommentPreviousStateMachine(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = CommentPreviousStateMachineType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new CommentPreviousStateMachine Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            CommentPreviousStateMachine instance = new CommentPreviousStateMachine(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new CommentPreviousStateMachine Construct(IServerInternal server)
        {
            CommentPreviousStateMachine instance = new CommentPreviousStateMachine(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                CommentPreviousStateMachine clone = new CommentPreviousStateMachine(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region EventId
        /// <summary>
        /// A description for the EventId Property.
        /// </summary>
        public Property<byte[]> EventId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_eventId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_eventId != null)
                    {
                        RemoveChild(m_eventId);
                    }

                    m_eventId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceEventId(Property<byte[]> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                EventId = replacement;

                EventId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.EventId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.CommentPreviousStateMachineType_EventId,
                    null);
            }
        }
        #endregion

        #region Comment
        /// <summary>
        /// A description for the Comment Property.
        /// </summary>
        public Property<LocalizedText> Comment
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_comment; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_comment != null)
                    {
                        RemoveChild(m_comment);
                    }

                    m_comment = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceComment(Property<LocalizedText> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Comment = replacement;

                Comment.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Comment, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.CommentPreviousStateMachineType_Comment,
                    null);
            }
        }
        #endregion

        #region ClientUserId
        /// <summary>
        /// A description for the ClientUserId Property.
        /// </summary>
        public Property<string> ClientUserId
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_clientUserId; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_clientUserId != null)
                    {
                        RemoveChild(m_clientUserId);
                    }

                    m_clientUserId = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceClientUserId(Property<string> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ClientUserId = replacement;

                ClientUserId.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ClientUserId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.CommentPreviousStateMachineType_ClientUserId,
                    null);
            }
        }
        #endregion

        #region AddCommentByEventIdsMethod
        /// <summary>
        /// A description for the AddCommentByEventIds Method.
        /// </summary>
        public AddCommentByEventIdsMethodSource AddCommentByEventIdsMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_addCommentByEventIdsMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_addCommentByEventIdsMethod != null)
                    {
                        RemoveChild(m_addCommentByEventIdsMethod);
                    }

                    m_addCommentByEventIdsMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the AddCommentByEventIds method.
        /// </summary>
        public StatusResult[] AddCommentByEventIds(
            OperationContext context,
            byte[][]         eventIds,
            LocalizedText    comment)
        {     
            lock (DataLock)
            {     
                return AddCommentByEventIdsMethod.Call(
                    context,
                    this,
                    eventIds,
                    comment);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the AddCommentByEventIds method is called.
        /// </summary>
        public void SetAddCommentByEventIdsCallback(AddCommentByEventIdsMethodHandler callback)
        {
            lock (DataLock)
            {  
                AddCommentByEventIdsMethod.SetCallback(this, callback);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                CommentPreviousStateMachine instance = source as CommentPreviousStateMachine;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                CommentPreviousStateMachineType type = source as CommentPreviousStateMachineType;

                if (type != null && type.EventId != null)
                {
                    EventId = (Property<byte[]>)type.EventId.Clone(this);
                    EventId.Initialize(type.EventId);
                }
                else if (instance != null && instance.EventId != null)
                {
                    EventId = (Property<byte[]>)instance.EventId.Clone(this);
                    EventId.Initialize(instance.EventId);
                }

                if (type != null && type.Comment != null)
                {
                    Comment = (Property<LocalizedText>)type.Comment.Clone(this);
                    Comment.Initialize(type.Comment);
                }
                else if (instance != null && instance.Comment != null)
                {
                    Comment = (Property<LocalizedText>)instance.Comment.Clone(this);
                    Comment.Initialize(instance.Comment);
                }

                if (type != null && type.ClientUserId != null)
                {
                    ClientUserId = (Property<string>)type.ClientUserId.Clone(this);
                    ClientUserId.Initialize(type.ClientUserId);
                }
                else if (instance != null && instance.ClientUserId != null)
                {
                    ClientUserId = (Property<string>)instance.ClientUserId.Clone(this);
                    ClientUserId.Initialize(instance.ClientUserId);
                }

                if (type != null && type.AddCommentByEventIdsMethod != null)
                {
                    AddCommentByEventIdsMethod = (AddCommentByEventIdsMethodSource)type.AddCommentByEventIdsMethod.Clone(this);
                    AddCommentByEventIdsMethod.Initialize(type.AddCommentByEventIdsMethod);
                }
                else if (instance != null && instance.AddCommentByEventIdsMethod != null)
                {
                    AddCommentByEventIdsMethod = (AddCommentByEventIdsMethodSource)instance.AddCommentByEventIdsMethod.Clone(this);
                    AddCommentByEventIdsMethod.Initialize(instance.AddCommentByEventIdsMethod);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_eventId = Property<byte[]>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.EventId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.CommentPreviousStateMachineType_EventId);

            m_comment = Property<LocalizedText>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Comment, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.CommentPreviousStateMachineType_Comment);

            m_clientUserId = Property<string>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ClientUserId, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.CommentPreviousStateMachineType_ClientUserId);

            m_addCommentByEventIdsMethod = AddCommentByEventIdsMethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.AddCommentByEventIds, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.CommentPreviousStateMachineType_AddCommentByEventIds);
        }
        #endregion

        #region Private Fields
        private CommentPreviousStateMachineType m_typeDefinition;
        Property<byte[]> m_eventId;
        Property<LocalizedText> m_comment;
        Property<string> m_clientUserId;
        AddCommentByEventIdsMethodSource m_addCommentByEventIdsMethod;
        #endregion
    }
    #endregion

    #region AuditConditionCommentEventType Class
    /// <summary>
    /// Represents the AuditConditionCommentEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditConditionCommentEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AuditConditionCommentEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AuditConditionCommentEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AuditConditionCommentEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AuditConditionEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AuditConditionCommentEventType FindSource(IServerInternal server)
        {
            AuditConditionCommentEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AuditConditionCommentEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AuditConditionCommentEventType;

                if (type != null)
                {
                    return type;
                }

                type = new AuditConditionCommentEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditConditionCommentEventType clone = new AuditConditionCommentEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AuditConditionCommentEventType type = source as AuditConditionCommentEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endregion

    #region AuditConditionCommentEvent Class
    /// <summary>
    /// Represents an instance of the AuditConditionCommentEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditConditionCommentEvent : AuditConditionEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AuditConditionCommentEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AuditConditionCommentEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AuditConditionCommentEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AuditConditionCommentEvent instance = new AuditConditionCommentEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AuditConditionCommentEvent Construct(IServerInternal server)
        {
            AuditConditionCommentEvent instance = new AuditConditionCommentEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditConditionCommentEvent clone = new AuditConditionCommentEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AuditConditionCommentEvent instance = source as AuditConditionCommentEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AuditConditionCommentEventType type = source as AuditConditionCommentEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private AuditConditionCommentEventType m_typeDefinition;
        #endregion
    }
    #endregion

    #region DialogConditionType Class
    /// <summary>
    /// Represents the DialogConditionType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class DialogConditionType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public DialogConditionType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.DialogConditionType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.DialogConditionType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.ConditionType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new DialogConditionType FindSource(IServerInternal server)
        {
            DialogConditionType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.DialogConditionType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as DialogConditionType;

                if (type != null)
                {
                    return type;
                }

                type = new DialogConditionType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                DialogConditionType clone = new DialogConditionType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region Prompt
        /// <summary>
        /// A description for the Prompt Property.
        /// </summary>
        public Property<LocalizedText> Prompt
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_prompt; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_prompt != null)
                    {
                        RemoveChild(m_prompt);
                    }

                    m_prompt = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplacePrompt(Property<LocalizedText> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Prompt = replacement;

                Prompt.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Prompt, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.DialogConditionType_Prompt,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                DialogConditionType type = source as DialogConditionType;

                if (type != null && type.Prompt != null)
                {
                    Prompt = (Property<LocalizedText>)type.Prompt.Clone(this);
                    Prompt.Initialize(type.Prompt);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_prompt = Property<LocalizedText>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.DialogConditionType_Prompt, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Prompt, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.DialogConditionType_Prompt);
        }
        #endregion

        #region Private Fields
        Property<LocalizedText> m_prompt;
        #endregion
    }
    #endregion

    #region DialogCondition Class
    /// <summary>
    /// Represents an instance of the DialogConditionType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class DialogCondition : Condition
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected DialogCondition(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = DialogConditionType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new DialogCondition Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            DialogCondition instance = new DialogCondition(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new DialogCondition Construct(IServerInternal server)
        {
            DialogCondition instance = new DialogCondition(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                DialogCondition clone = new DialogCondition(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region Prompt
        /// <summary>
        /// A description for the Prompt Property.
        /// </summary>
        public Property<LocalizedText> Prompt
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_prompt; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_prompt != null)
                    {
                        RemoveChild(m_prompt);
                    }

                    m_prompt = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplacePrompt(Property<LocalizedText> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Prompt = replacement;

                Prompt.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Prompt, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.DialogConditionType_Prompt,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                DialogCondition instance = source as DialogCondition;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                DialogConditionType type = source as DialogConditionType;

                if (type != null && type.Prompt != null)
                {
                    Prompt = (Property<LocalizedText>)type.Prompt.Clone(this);
                    Prompt.Initialize(type.Prompt);
                }
                else if (instance != null && instance.Prompt != null)
                {
                    Prompt = (Property<LocalizedText>)instance.Prompt.Clone(this);
                    Prompt.Initialize(instance.Prompt);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_prompt = Property<LocalizedText>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Prompt, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.DialogConditionType_Prompt);
        }
        #endregion

        #region Private Fields
        private DialogConditionType m_typeDefinition;
        Property<LocalizedText> m_prompt;
        #endregion
    }
    #endregion

    #region OkDialogConditionType Class
    /// <summary>
    /// Represents the OkDialogConditionType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class OkDialogConditionType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public OkDialogConditionType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.OkDialogConditionType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.OkDialogConditionType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.DialogConditionType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new OkDialogConditionType FindSource(IServerInternal server)
        {
            OkDialogConditionType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.OkDialogConditionType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as OkDialogConditionType;

                if (type != null)
                {
                    return type;
                }

                type = new OkDialogConditionType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                OkDialogConditionType clone = new OkDialogConditionType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region State
        /// <summary>
        /// A description for the State Object.
        /// </summary>
        public OkDialogStateMachine State
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_state; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_state != null)
                    {
                        RemoveChild(m_state);
                    }

                    m_state = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceState(OkDialogStateMachine replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                State = replacement;

                State.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.State, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.OkDialogConditionType_State,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                OkDialogConditionType type = source as OkDialogConditionType;

                if (type != null && type.State != null)
                {
                    State = (OkDialogStateMachine)type.State.Clone(this);
                    State.Initialize(type.State);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_state = OkDialogStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ConditionType_State, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.State, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ConditionType_State);
        }
        #endregion

        #region Private Fields
        OkDialogStateMachine m_state;
        #endregion
    }
    #endregion

    #region OkDialogCondition Class
    /// <summary>
    /// Represents an instance of the OkDialogConditionType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class OkDialogCondition : DialogCondition
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected OkDialogCondition(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = OkDialogConditionType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new OkDialogCondition Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            OkDialogCondition instance = new OkDialogCondition(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new OkDialogCondition Construct(IServerInternal server)
        {
            OkDialogCondition instance = new OkDialogCondition(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                OkDialogCondition clone = new OkDialogCondition(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region State
        /// <summary>
        /// A description for the State Object.
        /// </summary>
        public new OkDialogStateMachine State
        {
        	get 
            {    
                return (OkDialogStateMachine)base.State;
            }

            protected set
            {
                base.State = value;
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                OkDialogCondition instance = source as OkDialogCondition;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                OkDialogConditionType type = source as OkDialogConditionType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            State = OkDialogStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.State, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ConditionType_State);
        }
        #endregion

        #region Private Fields
        private OkDialogConditionType m_typeDefinition;
        #endregion
    }
    #endregion

    #region OkDialogStateMachineType Class
    /// <summary>
    /// Represents the OkDialogStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class OkDialogStateMachineType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public OkDialogStateMachineType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.OkDialogStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.OkDialogStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.ConditionStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new OkDialogStateMachineType FindSource(IServerInternal server)
        {
            OkDialogStateMachineType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.OkDialogStateMachineType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as OkDialogStateMachineType;

                if (type != null)
                {
                    return type;
                }

                type = new OkDialogStateMachineType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                OkDialogStateMachineType clone = new OkDialogStateMachineType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region Dialog
        /// <summary>
        /// A description for the Dialog Object.
        /// </summary>
        public OkDialogSubStateMachine Dialog
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_dialog; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_dialog != null)
                    {
                        RemoveChild(m_dialog);
                    }

                    m_dialog = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceDialog(OkDialogSubStateMachine replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Dialog = replacement;

                Dialog.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Dialog, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.OkDialogStateMachineType_Dialog,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                OkDialogStateMachineType type = source as OkDialogStateMachineType;

                if (type != null && type.Dialog != null)
                {
                    Dialog = (OkDialogSubStateMachine)type.Dialog.Clone(this);
                    Dialog.Initialize(type.Dialog);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_dialog = OkDialogSubStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.OkDialogStateMachineType_Dialog, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Dialog, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.OkDialogStateMachineType_Dialog);
        }
        #endregion

        #region Private Fields
        OkDialogSubStateMachine m_dialog;
        #endregion
    }
    #endregion

    #region OkDialogStateMachine Class
    /// <summary>
    /// Represents an instance of the OkDialogStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class OkDialogStateMachine : ConditionStateMachine
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected OkDialogStateMachine(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = OkDialogStateMachineType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new OkDialogStateMachine Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            OkDialogStateMachine instance = new OkDialogStateMachine(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new OkDialogStateMachine Construct(IServerInternal server)
        {
            OkDialogStateMachine instance = new OkDialogStateMachine(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                OkDialogStateMachine clone = new OkDialogStateMachine(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region Dialog
        /// <summary>
        /// A description for the Dialog Object.
        /// </summary>
        public OkDialogSubStateMachine Dialog
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_dialog; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_dialog != null)
                    {
                        RemoveChild(m_dialog);
                    }

                    m_dialog = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceDialog(OkDialogSubStateMachine replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Dialog = replacement;

                Dialog.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Dialog, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.OkDialogStateMachineType_Dialog,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                OkDialogStateMachine instance = source as OkDialogStateMachine;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                OkDialogStateMachineType type = source as OkDialogStateMachineType;

                if (type != null && type.Dialog != null)
                {
                    Dialog = (OkDialogSubStateMachine)type.Dialog.Clone(this);
                    Dialog.Initialize(type.Dialog);
                }
                else if (instance != null && instance.Dialog != null)
                {
                    Dialog = (OkDialogSubStateMachine)instance.Dialog.Clone(this);
                    Dialog.Initialize(instance.Dialog);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_dialog = OkDialogSubStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Dialog, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.OkDialogStateMachineType_Dialog);
        }
        #endregion

        #region Private Fields
        private OkDialogStateMachineType m_typeDefinition;
        OkDialogSubStateMachine m_dialog;
        #endregion
    }
    #endregion

    #region OkDialogSubStateMachineType Class
    /// <summary>
    /// Represents the OkDialogSubStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class OkDialogSubStateMachineType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public OkDialogSubStateMachineType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.OkDialogSubStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.OkDialogSubStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseConditionStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new OkDialogSubStateMachineType FindSource(IServerInternal server)
        {
            OkDialogSubStateMachineType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.OkDialogSubStateMachineType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as OkDialogSubStateMachineType;

                if (type != null)
                {
                    return type;
                }

                type = new OkDialogSubStateMachineType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                OkDialogSubStateMachineType clone = new OkDialogSubStateMachineType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region Inactive
        /// <summary>
        /// A description for the Inactive Object.
        /// </summary>
        public StateMachineInitialState Inactive
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_inactive; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_inactive != null)
                    {
                        RemoveChild(m_inactive);
                    }

                    m_inactive = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceInactive(StateMachineInitialState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Inactive = replacement;

                Inactive.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Inactive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.OkDialogSubStateMachineType_Inactive,
                    null);
            }
        }
        #endregion

        #region Active
        /// <summary>
        /// A description for the Active Object.
        /// </summary>
        public StateMachineState Active
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_active; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_active != null)
                    {
                        RemoveChild(m_active);
                    }

                    m_active = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceActive(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Active = replacement;

                Active.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Active, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.OkDialogSubStateMachineType_Active,
                    null);
            }
        }
        #endregion

        #region Accepting
        /// <summary>
        /// A description for the Accepting Object.
        /// </summary>
        public StateMachineState Accepting
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_accepting; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_accepting != null)
                    {
                        RemoveChild(m_accepting);
                    }

                    m_accepting = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceAccepting(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Accepting = replacement;

                Accepting.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Accepting, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.OkDialogSubStateMachineType_Accepting,
                    null);
            }
        }
        #endregion

        #region ToAccepting
        /// <summary>
        /// A description for the ToAccepting Object.
        /// </summary>
        public StateMachineTransition ToAccepting
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_toAccepting; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_toAccepting != null)
                    {
                        RemoveChild(m_toAccepting);
                    }

                    m_toAccepting = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceToAccepting(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ToAccepting = replacement;

                ToAccepting.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ToAccepting, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.OkDialogSubStateMachineType_ToAccepting,
                    null);
            }
        }
        #endregion

        #region ToActive
        /// <summary>
        /// A description for the ToActive Object.
        /// </summary>
        public StateMachineTransition ToActive
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_toActive; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_toActive != null)
                    {
                        RemoveChild(m_toActive);
                    }

                    m_toActive = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceToActive(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ToActive = replacement;

                ToActive.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ToActive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.OkDialogSubStateMachineType_ToActive,
                    null);
            }
        }
        #endregion

        #region ToInactive
        /// <summary>
        /// A description for the ToInactive Object.
        /// </summary>
        public StateMachineTransition ToInactive
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_toInactive; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_toInactive != null)
                    {
                        RemoveChild(m_toInactive);
                    }

                    m_toInactive = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceToInactive(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ToInactive = replacement;

                ToInactive.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ToInactive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.OkDialogSubStateMachineType_ToInactive,
                    null);
            }
        }
        #endregion

        #region OkMethod
        /// <summary>
        /// A description for the Ok Method.
        /// </summary>
        public MethodSource OkMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_okMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_okMethod != null)
                    {
                        RemoveChild(m_okMethod);
                    }

                    m_okMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the Ok method.
        /// </summary>
        public void Ok(OperationContext context)
        {     
            lock (DataLock)
            {     
                OkMethod.Call(context, this);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the Ok method is called.
        /// </summary>
        public void SetOkCallback(NoArgumentsMethodHandler callback)
        {
            lock (DataLock)
            {  
                OkMethod.SetCallback(this, callback);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                OkDialogSubStateMachineType type = source as OkDialogSubStateMachineType;

                if (type != null && type.Inactive != null)
                {
                    Inactive = (StateMachineInitialState)type.Inactive.Clone(this);
                    Inactive.Initialize(type.Inactive);
                }

                if (type != null && type.Active != null)
                {
                    Active = (StateMachineState)type.Active.Clone(this);
                    Active.Initialize(type.Active);
                }

                if (type != null && type.Accepting != null)
                {
                    Accepting = (StateMachineState)type.Accepting.Clone(this);
                    Accepting.Initialize(type.Accepting);
                }

                if (type != null && type.ToAccepting != null)
                {
                    ToAccepting = (StateMachineTransition)type.ToAccepting.Clone(this);
                    ToAccepting.Initialize(type.ToAccepting);
                }

                if (type != null && type.ToActive != null)
                {
                    ToActive = (StateMachineTransition)type.ToActive.Clone(this);
                    ToActive.Initialize(type.ToActive);
                }

                if (type != null && type.ToInactive != null)
                {
                    ToInactive = (StateMachineTransition)type.ToInactive.Clone(this);
                    ToInactive.Initialize(type.ToInactive);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_inactive = StateMachineInitialState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.OkDialogSubStateMachineType_Inactive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Inactive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.OkDialogSubStateMachineType_Inactive);

            m_active = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.OkDialogSubStateMachineType_Active, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Active, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.OkDialogSubStateMachineType_Active);

            m_accepting = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.OkDialogSubStateMachineType_Accepting, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Accepting, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.OkDialogSubStateMachineType_Accepting);

            m_toAccepting = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.OkDialogSubStateMachineType_ToAccepting, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ToAccepting, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.OkDialogSubStateMachineType_ToAccepting);

            m_toActive = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.OkDialogSubStateMachineType_ToActive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ToActive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.OkDialogSubStateMachineType_ToActive);

            m_toInactive = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.OkDialogSubStateMachineType_ToInactive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ToInactive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.OkDialogSubStateMachineType_ToInactive);

            m_okMethod = MethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Methods.OkDialogSubStateMachineType_Ok, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Ok, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.OkDialogSubStateMachineType_Ok);
        }
        #endregion

        #region Private Fields
        StateMachineInitialState m_inactive;
        StateMachineState m_active;
        StateMachineState m_accepting;
        StateMachineTransition m_toAccepting;
        StateMachineTransition m_toActive;
        StateMachineTransition m_toInactive;
        MethodSource m_okMethod;
        #endregion
    }
    #endregion

    #region OkDialogSubStateMachine Class
    /// <summary>
    /// Represents an instance of the OkDialogSubStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class OkDialogSubStateMachine : BaseConditionStateMachine
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected OkDialogSubStateMachine(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = OkDialogSubStateMachineType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new OkDialogSubStateMachine Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            OkDialogSubStateMachine instance = new OkDialogSubStateMachine(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new OkDialogSubStateMachine Construct(IServerInternal server)
        {
            OkDialogSubStateMachine instance = new OkDialogSubStateMachine(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                OkDialogSubStateMachine clone = new OkDialogSubStateMachine(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region OkMethod
        /// <summary>
        /// A description for the Ok Method.
        /// </summary>
        public MethodSource OkMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_okMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_okMethod != null)
                    {
                        RemoveChild(m_okMethod);
                    }

                    m_okMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the Ok method.
        /// </summary>
        public void Ok(OperationContext context)
        {     
            lock (DataLock)
            {     
                OkMethod.Call(context, this);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the Ok method is called.
        /// </summary>
        public void SetOkCallback(NoArgumentsMethodHandler callback)
        {
            lock (DataLock)
            {  
                OkMethod.SetCallback(this, callback);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                OkDialogSubStateMachine instance = source as OkDialogSubStateMachine;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                OkDialogSubStateMachineType type = source as OkDialogSubStateMachineType;

                if (type != null && type.OkMethod != null)
                {
                    OkMethod = (MethodSource)type.OkMethod.Clone(this);
                    OkMethod.Initialize(type.OkMethod);
                }
                else if (instance != null && instance.OkMethod != null)
                {
                    OkMethod = (MethodSource)instance.OkMethod.Clone(this);
                    OkMethod.Initialize(instance.OkMethod);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_okMethod = MethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Ok, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.OkDialogSubStateMachineType_Ok);
        }
        #endregion

        #region Private Fields
        private OkDialogSubStateMachineType m_typeDefinition;
        MethodSource m_okMethod;
        #endregion
    }
    #endregion

    #region AuditConditionDialogEventType Class
    /// <summary>
    /// Represents the AuditConditionDialogEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditConditionDialogEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AuditConditionDialogEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AuditConditionDialogEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AuditConditionDialogEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AuditConditionEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AuditConditionDialogEventType FindSource(IServerInternal server)
        {
            AuditConditionDialogEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AuditConditionDialogEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AuditConditionDialogEventType;

                if (type != null)
                {
                    return type;
                }

                type = new AuditConditionDialogEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditConditionDialogEventType clone = new AuditConditionDialogEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AuditConditionDialogEventType type = source as AuditConditionDialogEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endregion

    #region AuditConditionDialogEvent Class
    /// <summary>
    /// Represents an instance of the AuditConditionDialogEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditConditionDialogEvent : AuditConditionEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AuditConditionDialogEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AuditConditionDialogEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AuditConditionDialogEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AuditConditionDialogEvent instance = new AuditConditionDialogEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AuditConditionDialogEvent Construct(IServerInternal server)
        {
            AuditConditionDialogEvent instance = new AuditConditionDialogEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditConditionDialogEvent clone = new AuditConditionDialogEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AuditConditionDialogEvent instance = source as AuditConditionDialogEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AuditConditionDialogEventType type = source as AuditConditionDialogEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private AuditConditionDialogEventType m_typeDefinition;
        #endregion
    }
    #endregion

    #region OkCancelDialogConditionType Class
    /// <summary>
    /// Represents the OkCancelDialogConditionType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class OkCancelDialogConditionType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public OkCancelDialogConditionType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.OkCancelDialogConditionType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.OkCancelDialogConditionType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.DialogConditionType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new OkCancelDialogConditionType FindSource(IServerInternal server)
        {
            OkCancelDialogConditionType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.OkCancelDialogConditionType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as OkCancelDialogConditionType;

                if (type != null)
                {
                    return type;
                }

                type = new OkCancelDialogConditionType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                OkCancelDialogConditionType clone = new OkCancelDialogConditionType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region State
        /// <summary>
        /// A description for the State Object.
        /// </summary>
        public OkCancelDialogStateMachine State
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_state; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_state != null)
                    {
                        RemoveChild(m_state);
                    }

                    m_state = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceState(OkCancelDialogStateMachine replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                State = replacement;

                State.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.State, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.OkCancelDialogConditionType_State,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                OkCancelDialogConditionType type = source as OkCancelDialogConditionType;

                if (type != null && type.State != null)
                {
                    State = (OkCancelDialogStateMachine)type.State.Clone(this);
                    State.Initialize(type.State);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_state = OkCancelDialogStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ConditionType_State, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.State, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ConditionType_State);
        }
        #endregion

        #region Private Fields
        OkCancelDialogStateMachine m_state;
        #endregion
    }
    #endregion

    #region OkCancelDialogCondition Class
    /// <summary>
    /// Represents an instance of the OkCancelDialogConditionType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class OkCancelDialogCondition : DialogCondition
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected OkCancelDialogCondition(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = OkCancelDialogConditionType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new OkCancelDialogCondition Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            OkCancelDialogCondition instance = new OkCancelDialogCondition(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new OkCancelDialogCondition Construct(IServerInternal server)
        {
            OkCancelDialogCondition instance = new OkCancelDialogCondition(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                OkCancelDialogCondition clone = new OkCancelDialogCondition(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region State
        /// <summary>
        /// A description for the State Object.
        /// </summary>
        public new OkCancelDialogStateMachine State
        {
        	get 
            {    
                return (OkCancelDialogStateMachine)base.State;
            }

            protected set
            {
                base.State = value;
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                OkCancelDialogCondition instance = source as OkCancelDialogCondition;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                OkCancelDialogConditionType type = source as OkCancelDialogConditionType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            State = OkCancelDialogStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.State, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ConditionType_State);
        }
        #endregion

        #region Private Fields
        private OkCancelDialogConditionType m_typeDefinition;
        #endregion
    }
    #endregion

    #region OkCancelDialogStateMachineType Class
    /// <summary>
    /// Represents the OkCancelDialogStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class OkCancelDialogStateMachineType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public OkCancelDialogStateMachineType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.OkCancelDialogStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.OkCancelDialogStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.ConditionStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new OkCancelDialogStateMachineType FindSource(IServerInternal server)
        {
            OkCancelDialogStateMachineType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.OkCancelDialogStateMachineType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as OkCancelDialogStateMachineType;

                if (type != null)
                {
                    return type;
                }

                type = new OkCancelDialogStateMachineType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                OkCancelDialogStateMachineType clone = new OkCancelDialogStateMachineType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region Dialog
        /// <summary>
        /// A description for the Dialog Object.
        /// </summary>
        public OkCancelDialogSubStateMachine Dialog
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_dialog; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_dialog != null)
                    {
                        RemoveChild(m_dialog);
                    }

                    m_dialog = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceDialog(OkCancelDialogSubStateMachine replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Dialog = replacement;

                Dialog.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Dialog, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.OkCancelDialogStateMachineType_Dialog,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                OkCancelDialogStateMachineType type = source as OkCancelDialogStateMachineType;

                if (type != null && type.Dialog != null)
                {
                    Dialog = (OkCancelDialogSubStateMachine)type.Dialog.Clone(this);
                    Dialog.Initialize(type.Dialog);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_dialog = OkCancelDialogSubStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.OkCancelDialogStateMachineType_Dialog, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Dialog, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.OkCancelDialogStateMachineType_Dialog);
        }
        #endregion

        #region Private Fields
        OkCancelDialogSubStateMachine m_dialog;
        #endregion
    }
    #endregion

    #region OkCancelDialogStateMachine Class
    /// <summary>
    /// Represents an instance of the OkCancelDialogStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class OkCancelDialogStateMachine : ConditionStateMachine
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected OkCancelDialogStateMachine(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = OkCancelDialogStateMachineType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new OkCancelDialogStateMachine Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            OkCancelDialogStateMachine instance = new OkCancelDialogStateMachine(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new OkCancelDialogStateMachine Construct(IServerInternal server)
        {
            OkCancelDialogStateMachine instance = new OkCancelDialogStateMachine(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                OkCancelDialogStateMachine clone = new OkCancelDialogStateMachine(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region Dialog
        /// <summary>
        /// A description for the Dialog Object.
        /// </summary>
        public OkCancelDialogSubStateMachine Dialog
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_dialog; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_dialog != null)
                    {
                        RemoveChild(m_dialog);
                    }

                    m_dialog = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceDialog(OkCancelDialogSubStateMachine replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Dialog = replacement;

                Dialog.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Dialog, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.OkCancelDialogStateMachineType_Dialog,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                OkCancelDialogStateMachine instance = source as OkCancelDialogStateMachine;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                OkCancelDialogStateMachineType type = source as OkCancelDialogStateMachineType;

                if (type != null && type.Dialog != null)
                {
                    Dialog = (OkCancelDialogSubStateMachine)type.Dialog.Clone(this);
                    Dialog.Initialize(type.Dialog);
                }
                else if (instance != null && instance.Dialog != null)
                {
                    Dialog = (OkCancelDialogSubStateMachine)instance.Dialog.Clone(this);
                    Dialog.Initialize(instance.Dialog);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_dialog = OkCancelDialogSubStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Dialog, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.OkCancelDialogStateMachineType_Dialog);
        }
        #endregion

        #region Private Fields
        private OkCancelDialogStateMachineType m_typeDefinition;
        OkCancelDialogSubStateMachine m_dialog;
        #endregion
    }
    #endregion

    #region OkCancelDialogSubStateMachineType Class
    /// <summary>
    /// Represents the OkCancelDialogSubStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class OkCancelDialogSubStateMachineType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public OkCancelDialogSubStateMachineType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.OkCancelDialogSubStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.OkCancelDialogSubStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseConditionStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new OkCancelDialogSubStateMachineType FindSource(IServerInternal server)
        {
            OkCancelDialogSubStateMachineType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.OkCancelDialogSubStateMachineType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as OkCancelDialogSubStateMachineType;

                if (type != null)
                {
                    return type;
                }

                type = new OkCancelDialogSubStateMachineType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                OkCancelDialogSubStateMachineType clone = new OkCancelDialogSubStateMachineType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region Inactive
        /// <summary>
        /// A description for the Inactive Object.
        /// </summary>
        public StateMachineInitialState Inactive
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_inactive; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_inactive != null)
                    {
                        RemoveChild(m_inactive);
                    }

                    m_inactive = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceInactive(StateMachineInitialState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Inactive = replacement;

                Inactive.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Inactive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.OkCancelDialogSubStateMachineType_Inactive,
                    null);
            }
        }
        #endregion

        #region Active
        /// <summary>
        /// A description for the Active Object.
        /// </summary>
        public StateMachineState Active
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_active; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_active != null)
                    {
                        RemoveChild(m_active);
                    }

                    m_active = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceActive(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Active = replacement;

                Active.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Active, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.OkCancelDialogSubStateMachineType_Active,
                    null);
            }
        }
        #endregion

        #region Accepting
        /// <summary>
        /// A description for the Accepting Object.
        /// </summary>
        public StateMachineState Accepting
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_accepting; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_accepting != null)
                    {
                        RemoveChild(m_accepting);
                    }

                    m_accepting = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceAccepting(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Accepting = replacement;

                Accepting.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Accepting, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.OkCancelDialogSubStateMachineType_Accepting,
                    null);
            }
        }
        #endregion

        #region Cancelling
        /// <summary>
        /// A description for the Cancelling Object.
        /// </summary>
        public StateMachineState Cancelling
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_cancelling; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_cancelling != null)
                    {
                        RemoveChild(m_cancelling);
                    }

                    m_cancelling = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCancelling(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Cancelling = replacement;

                Cancelling.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Cancelling, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.OkCancelDialogSubStateMachineType_Cancelling,
                    null);
            }
        }
        #endregion

        #region ToActive
        /// <summary>
        /// A description for the ToActive Object.
        /// </summary>
        public StateMachineTransition ToActive
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_toActive; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_toActive != null)
                    {
                        RemoveChild(m_toActive);
                    }

                    m_toActive = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceToActive(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ToActive = replacement;

                ToActive.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ToActive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.OkCancelDialogSubStateMachineType_ToActive,
                    null);
            }
        }
        #endregion

        #region ToAccepting
        /// <summary>
        /// A description for the ToAccepting Object.
        /// </summary>
        public StateMachineTransition ToAccepting
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_toAccepting; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_toAccepting != null)
                    {
                        RemoveChild(m_toAccepting);
                    }

                    m_toAccepting = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceToAccepting(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ToAccepting = replacement;

                ToAccepting.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ToAccepting, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.OkCancelDialogSubStateMachineType_ToAccepting,
                    null);
            }
        }
        #endregion

        #region AcceptingToInactive
        /// <summary>
        /// A description for the AcceptingToInactive Object.
        /// </summary>
        public StateMachineTransition AcceptingToInactive
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_acceptingToInactive; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_acceptingToInactive != null)
                    {
                        RemoveChild(m_acceptingToInactive);
                    }

                    m_acceptingToInactive = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceAcceptingToInactive(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                AcceptingToInactive = replacement;

                AcceptingToInactive.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.AcceptingToInactive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.OkCancelDialogSubStateMachineType_AcceptingToInactive,
                    null);
            }
        }
        #endregion

        #region ToCancelling
        /// <summary>
        /// A description for the ToCancelling Object.
        /// </summary>
        public StateMachineTransition ToCancelling
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_toCancelling; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_toCancelling != null)
                    {
                        RemoveChild(m_toCancelling);
                    }

                    m_toCancelling = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceToCancelling(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ToCancelling = replacement;

                ToCancelling.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ToCancelling, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.OkCancelDialogSubStateMachineType_ToCancelling,
                    null);
            }
        }
        #endregion

        #region CancellingToInactive
        /// <summary>
        /// A description for the CancellingToInactive Object.
        /// </summary>
        public StateMachineTransition CancellingToInactive
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_cancellingToInactive; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_cancellingToInactive != null)
                    {
                        RemoveChild(m_cancellingToInactive);
                    }

                    m_cancellingToInactive = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCancellingToInactive(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CancellingToInactive = replacement;

                CancellingToInactive.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CancellingToInactive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.OkCancelDialogSubStateMachineType_CancellingToInactive,
                    null);
            }
        }
        #endregion

        #region OkMethod
        /// <summary>
        /// A description for the Ok Method.
        /// </summary>
        public MethodSource OkMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_okMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_okMethod != null)
                    {
                        RemoveChild(m_okMethod);
                    }

                    m_okMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the Ok method.
        /// </summary>
        public void Ok(OperationContext context)
        {     
            lock (DataLock)
            {     
                OkMethod.Call(context, this);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the Ok method is called.
        /// </summary>
        public void SetOkCallback(NoArgumentsMethodHandler callback)
        {
            lock (DataLock)
            {  
                OkMethod.SetCallback(this, callback);
            }
        }
        #endregion

        #region CancelMethod
        /// <summary>
        /// A description for the Cancel Method.
        /// </summary>
        public MethodSource CancelMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_cancelMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_cancelMethod != null)
                    {
                        RemoveChild(m_cancelMethod);
                    }

                    m_cancelMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the Cancel method.
        /// </summary>
        public void Cancel(OperationContext context)
        {     
            lock (DataLock)
            {     
                CancelMethod.Call(context, this);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the Cancel method is called.
        /// </summary>
        public void SetCancelCallback(NoArgumentsMethodHandler callback)
        {
            lock (DataLock)
            {  
                CancelMethod.SetCallback(this, callback);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                OkCancelDialogSubStateMachineType type = source as OkCancelDialogSubStateMachineType;

                if (type != null && type.Inactive != null)
                {
                    Inactive = (StateMachineInitialState)type.Inactive.Clone(this);
                    Inactive.Initialize(type.Inactive);
                }

                if (type != null && type.Active != null)
                {
                    Active = (StateMachineState)type.Active.Clone(this);
                    Active.Initialize(type.Active);
                }

                if (type != null && type.Accepting != null)
                {
                    Accepting = (StateMachineState)type.Accepting.Clone(this);
                    Accepting.Initialize(type.Accepting);
                }

                if (type != null && type.Cancelling != null)
                {
                    Cancelling = (StateMachineState)type.Cancelling.Clone(this);
                    Cancelling.Initialize(type.Cancelling);
                }

                if (type != null && type.ToActive != null)
                {
                    ToActive = (StateMachineTransition)type.ToActive.Clone(this);
                    ToActive.Initialize(type.ToActive);
                }

                if (type != null && type.ToAccepting != null)
                {
                    ToAccepting = (StateMachineTransition)type.ToAccepting.Clone(this);
                    ToAccepting.Initialize(type.ToAccepting);
                }

                if (type != null && type.AcceptingToInactive != null)
                {
                    AcceptingToInactive = (StateMachineTransition)type.AcceptingToInactive.Clone(this);
                    AcceptingToInactive.Initialize(type.AcceptingToInactive);
                }

                if (type != null && type.ToCancelling != null)
                {
                    ToCancelling = (StateMachineTransition)type.ToCancelling.Clone(this);
                    ToCancelling.Initialize(type.ToCancelling);
                }

                if (type != null && type.CancellingToInactive != null)
                {
                    CancellingToInactive = (StateMachineTransition)type.CancellingToInactive.Clone(this);
                    CancellingToInactive.Initialize(type.CancellingToInactive);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_inactive = StateMachineInitialState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.OkCancelDialogSubStateMachineType_Inactive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Inactive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.OkCancelDialogSubStateMachineType_Inactive);

            m_active = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.OkCancelDialogSubStateMachineType_Active, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Active, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.OkCancelDialogSubStateMachineType_Active);

            m_accepting = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.OkCancelDialogSubStateMachineType_Accepting, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Accepting, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.OkCancelDialogSubStateMachineType_Accepting);

            m_cancelling = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.OkCancelDialogSubStateMachineType_Cancelling, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Cancelling, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.OkCancelDialogSubStateMachineType_Cancelling);

            m_toActive = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.OkCancelDialogSubStateMachineType_ToActive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ToActive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.OkCancelDialogSubStateMachineType_ToActive);

            m_toAccepting = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.OkCancelDialogSubStateMachineType_ToAccepting, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ToAccepting, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.OkCancelDialogSubStateMachineType_ToAccepting);

            m_acceptingToInactive = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.OkCancelDialogSubStateMachineType_AcceptingToInactive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.AcceptingToInactive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.OkCancelDialogSubStateMachineType_AcceptingToInactive);

            m_toCancelling = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.OkCancelDialogSubStateMachineType_ToCancelling, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ToCancelling, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.OkCancelDialogSubStateMachineType_ToCancelling);

            m_cancellingToInactive = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.OkCancelDialogSubStateMachineType_CancellingToInactive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.CancellingToInactive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.OkCancelDialogSubStateMachineType_CancellingToInactive);

            m_okMethod = MethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Methods.OkCancelDialogSubStateMachineType_Ok, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Ok, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.OkCancelDialogSubStateMachineType_Ok);

            m_cancelMethod = MethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Methods.OkCancelDialogSubStateMachineType_Cancel, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Cancel, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.OkCancelDialogSubStateMachineType_Cancel);
        }
        #endregion

        #region Private Fields
        StateMachineInitialState m_inactive;
        StateMachineState m_active;
        StateMachineState m_accepting;
        StateMachineState m_cancelling;
        StateMachineTransition m_toActive;
        StateMachineTransition m_toAccepting;
        StateMachineTransition m_acceptingToInactive;
        StateMachineTransition m_toCancelling;
        StateMachineTransition m_cancellingToInactive;
        MethodSource m_okMethod;
        MethodSource m_cancelMethod;
        #endregion
    }
    #endregion

    #region OkCancelDialogSubStateMachine Class
    /// <summary>
    /// Represents an instance of the OkCancelDialogSubStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class OkCancelDialogSubStateMachine : BaseConditionStateMachine
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected OkCancelDialogSubStateMachine(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = OkCancelDialogSubStateMachineType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new OkCancelDialogSubStateMachine Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            OkCancelDialogSubStateMachine instance = new OkCancelDialogSubStateMachine(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new OkCancelDialogSubStateMachine Construct(IServerInternal server)
        {
            OkCancelDialogSubStateMachine instance = new OkCancelDialogSubStateMachine(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                OkCancelDialogSubStateMachine clone = new OkCancelDialogSubStateMachine(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region OkMethod
        /// <summary>
        /// A description for the Ok Method.
        /// </summary>
        public MethodSource OkMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_okMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_okMethod != null)
                    {
                        RemoveChild(m_okMethod);
                    }

                    m_okMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the Ok method.
        /// </summary>
        public void Ok(OperationContext context)
        {     
            lock (DataLock)
            {     
                OkMethod.Call(context, this);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the Ok method is called.
        /// </summary>
        public void SetOkCallback(NoArgumentsMethodHandler callback)
        {
            lock (DataLock)
            {  
                OkMethod.SetCallback(this, callback);
            }
        }
        #endregion

        #region CancelMethod
        /// <summary>
        /// A description for the Cancel Method.
        /// </summary>
        public MethodSource CancelMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_cancelMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_cancelMethod != null)
                    {
                        RemoveChild(m_cancelMethod);
                    }

                    m_cancelMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the Cancel method.
        /// </summary>
        public void Cancel(OperationContext context)
        {     
            lock (DataLock)
            {     
                CancelMethod.Call(context, this);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the Cancel method is called.
        /// </summary>
        public void SetCancelCallback(NoArgumentsMethodHandler callback)
        {
            lock (DataLock)
            {  
                CancelMethod.SetCallback(this, callback);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                OkCancelDialogSubStateMachine instance = source as OkCancelDialogSubStateMachine;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                OkCancelDialogSubStateMachineType type = source as OkCancelDialogSubStateMachineType;

                if (type != null && type.OkMethod != null)
                {
                    OkMethod = (MethodSource)type.OkMethod.Clone(this);
                    OkMethod.Initialize(type.OkMethod);
                }
                else if (instance != null && instance.OkMethod != null)
                {
                    OkMethod = (MethodSource)instance.OkMethod.Clone(this);
                    OkMethod.Initialize(instance.OkMethod);
                }

                if (type != null && type.CancelMethod != null)
                {
                    CancelMethod = (MethodSource)type.CancelMethod.Clone(this);
                    CancelMethod.Initialize(type.CancelMethod);
                }
                else if (instance != null && instance.CancelMethod != null)
                {
                    CancelMethod = (MethodSource)instance.CancelMethod.Clone(this);
                    CancelMethod.Initialize(instance.CancelMethod);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_okMethod = MethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Ok, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.OkCancelDialogSubStateMachineType_Ok);

            m_cancelMethod = MethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Cancel, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.OkCancelDialogSubStateMachineType_Cancel);
        }
        #endregion

        #region Private Fields
        private OkCancelDialogSubStateMachineType m_typeDefinition;
        MethodSource m_okMethod;
        MethodSource m_cancelMethod;
        #endregion
    }
    #endregion

    #region YesNoCancelDialogConditionType Class
    /// <summary>
    /// Represents the YesNoCancelDialogConditionType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class YesNoCancelDialogConditionType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public YesNoCancelDialogConditionType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.YesNoCancelDialogConditionType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.YesNoCancelDialogConditionType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.DialogConditionType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new YesNoCancelDialogConditionType FindSource(IServerInternal server)
        {
            YesNoCancelDialogConditionType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.YesNoCancelDialogConditionType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as YesNoCancelDialogConditionType;

                if (type != null)
                {
                    return type;
                }

                type = new YesNoCancelDialogConditionType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                YesNoCancelDialogConditionType clone = new YesNoCancelDialogConditionType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region State
        /// <summary>
        /// A description for the State Object.
        /// </summary>
        public YesNoCancelDialogStateMachine State
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_state; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_state != null)
                    {
                        RemoveChild(m_state);
                    }

                    m_state = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceState(YesNoCancelDialogStateMachine replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                State = replacement;

                State.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.State, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.YesNoCancelDialogConditionType_State,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                YesNoCancelDialogConditionType type = source as YesNoCancelDialogConditionType;

                if (type != null && type.State != null)
                {
                    State = (YesNoCancelDialogStateMachine)type.State.Clone(this);
                    State.Initialize(type.State);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_state = YesNoCancelDialogStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ConditionType_State, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.State, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ConditionType_State);
        }
        #endregion

        #region Private Fields
        YesNoCancelDialogStateMachine m_state;
        #endregion
    }
    #endregion

    #region YesNoCancelDialogCondition Class
    /// <summary>
    /// Represents an instance of the YesNoCancelDialogConditionType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class YesNoCancelDialogCondition : DialogCondition
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected YesNoCancelDialogCondition(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = YesNoCancelDialogConditionType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new YesNoCancelDialogCondition Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            YesNoCancelDialogCondition instance = new YesNoCancelDialogCondition(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new YesNoCancelDialogCondition Construct(IServerInternal server)
        {
            YesNoCancelDialogCondition instance = new YesNoCancelDialogCondition(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                YesNoCancelDialogCondition clone = new YesNoCancelDialogCondition(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region State
        /// <summary>
        /// A description for the State Object.
        /// </summary>
        public new YesNoCancelDialogStateMachine State
        {
        	get 
            {    
                return (YesNoCancelDialogStateMachine)base.State;
            }

            protected set
            {
                base.State = value;
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                YesNoCancelDialogCondition instance = source as YesNoCancelDialogCondition;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                YesNoCancelDialogConditionType type = source as YesNoCancelDialogConditionType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            State = YesNoCancelDialogStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.State, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ConditionType_State);
        }
        #endregion

        #region Private Fields
        private YesNoCancelDialogConditionType m_typeDefinition;
        #endregion
    }
    #endregion

    #region YesNoCancelDialogStateMachineType Class
    /// <summary>
    /// Represents the YesNoCancelDialogStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class YesNoCancelDialogStateMachineType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public YesNoCancelDialogStateMachineType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.YesNoCancelDialogStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.YesNoCancelDialogStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.ConditionStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new YesNoCancelDialogStateMachineType FindSource(IServerInternal server)
        {
            YesNoCancelDialogStateMachineType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.YesNoCancelDialogStateMachineType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as YesNoCancelDialogStateMachineType;

                if (type != null)
                {
                    return type;
                }

                type = new YesNoCancelDialogStateMachineType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                YesNoCancelDialogStateMachineType clone = new YesNoCancelDialogStateMachineType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region Dialog
        /// <summary>
        /// A description for the Dialog Object.
        /// </summary>
        public YesNoCancelDialogSubStateMachine Dialog
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_dialog; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_dialog != null)
                    {
                        RemoveChild(m_dialog);
                    }

                    m_dialog = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceDialog(YesNoCancelDialogSubStateMachine replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Dialog = replacement;

                Dialog.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Dialog, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.YesNoCancelDialogStateMachineType_Dialog,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                YesNoCancelDialogStateMachineType type = source as YesNoCancelDialogStateMachineType;

                if (type != null && type.Dialog != null)
                {
                    Dialog = (YesNoCancelDialogSubStateMachine)type.Dialog.Clone(this);
                    Dialog.Initialize(type.Dialog);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_dialog = YesNoCancelDialogSubStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.YesNoCancelDialogStateMachineType_Dialog, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Dialog, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.YesNoCancelDialogStateMachineType_Dialog);
        }
        #endregion

        #region Private Fields
        YesNoCancelDialogSubStateMachine m_dialog;
        #endregion
    }
    #endregion

    #region YesNoCancelDialogStateMachine Class
    /// <summary>
    /// Represents an instance of the YesNoCancelDialogStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class YesNoCancelDialogStateMachine : ConditionStateMachine
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected YesNoCancelDialogStateMachine(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = YesNoCancelDialogStateMachineType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new YesNoCancelDialogStateMachine Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            YesNoCancelDialogStateMachine instance = new YesNoCancelDialogStateMachine(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new YesNoCancelDialogStateMachine Construct(IServerInternal server)
        {
            YesNoCancelDialogStateMachine instance = new YesNoCancelDialogStateMachine(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                YesNoCancelDialogStateMachine clone = new YesNoCancelDialogStateMachine(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region Dialog
        /// <summary>
        /// A description for the Dialog Object.
        /// </summary>
        public YesNoCancelDialogSubStateMachine Dialog
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_dialog; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_dialog != null)
                    {
                        RemoveChild(m_dialog);
                    }

                    m_dialog = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceDialog(YesNoCancelDialogSubStateMachine replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Dialog = replacement;

                Dialog.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Dialog, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.YesNoCancelDialogStateMachineType_Dialog,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                YesNoCancelDialogStateMachine instance = source as YesNoCancelDialogStateMachine;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                YesNoCancelDialogStateMachineType type = source as YesNoCancelDialogStateMachineType;

                if (type != null && type.Dialog != null)
                {
                    Dialog = (YesNoCancelDialogSubStateMachine)type.Dialog.Clone(this);
                    Dialog.Initialize(type.Dialog);
                }
                else if (instance != null && instance.Dialog != null)
                {
                    Dialog = (YesNoCancelDialogSubStateMachine)instance.Dialog.Clone(this);
                    Dialog.Initialize(instance.Dialog);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_dialog = YesNoCancelDialogSubStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Dialog, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.YesNoCancelDialogStateMachineType_Dialog);
        }
        #endregion

        #region Private Fields
        private YesNoCancelDialogStateMachineType m_typeDefinition;
        YesNoCancelDialogSubStateMachine m_dialog;
        #endregion
    }
    #endregion

    #region YesNoCancelDialogSubStateMachineType Class
    /// <summary>
    /// Represents the YesNoCancelDialogSubStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class YesNoCancelDialogSubStateMachineType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public YesNoCancelDialogSubStateMachineType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.YesNoCancelDialogSubStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.YesNoCancelDialogSubStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseConditionStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new YesNoCancelDialogSubStateMachineType FindSource(IServerInternal server)
        {
            YesNoCancelDialogSubStateMachineType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.YesNoCancelDialogSubStateMachineType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as YesNoCancelDialogSubStateMachineType;

                if (type != null)
                {
                    return type;
                }

                type = new YesNoCancelDialogSubStateMachineType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                YesNoCancelDialogSubStateMachineType clone = new YesNoCancelDialogSubStateMachineType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region Inactive
        /// <summary>
        /// A description for the Inactive Object.
        /// </summary>
        public StateMachineInitialState Inactive
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_inactive; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_inactive != null)
                    {
                        RemoveChild(m_inactive);
                    }

                    m_inactive = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceInactive(StateMachineInitialState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Inactive = replacement;

                Inactive.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Inactive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.YesNoCancelDialogSubStateMachineType_Inactive,
                    null);
            }
        }
        #endregion

        #region Active
        /// <summary>
        /// A description for the Active Object.
        /// </summary>
        public StateMachineState Active
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_active; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_active != null)
                    {
                        RemoveChild(m_active);
                    }

                    m_active = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceActive(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Active = replacement;

                Active.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Active, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.YesNoCancelDialogSubStateMachineType_Active,
                    null);
            }
        }
        #endregion

        #region Accepting
        /// <summary>
        /// A description for the Accepting Object.
        /// </summary>
        public StateMachineState Accepting
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_accepting; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_accepting != null)
                    {
                        RemoveChild(m_accepting);
                    }

                    m_accepting = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceAccepting(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Accepting = replacement;

                Accepting.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Accepting, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.YesNoCancelDialogSubStateMachineType_Accepting,
                    null);
            }
        }
        #endregion

        #region Cancelling
        /// <summary>
        /// A description for the Cancelling Object.
        /// </summary>
        public StateMachineState Cancelling
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_cancelling; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_cancelling != null)
                    {
                        RemoveChild(m_cancelling);
                    }

                    m_cancelling = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCancelling(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Cancelling = replacement;

                Cancelling.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Cancelling, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.YesNoCancelDialogSubStateMachineType_Cancelling,
                    null);
            }
        }
        #endregion

        #region Rejecting
        /// <summary>
        /// A description for the Rejecting Object.
        /// </summary>
        public StateMachineState Rejecting
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_rejecting; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_rejecting != null)
                    {
                        RemoveChild(m_rejecting);
                    }

                    m_rejecting = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceRejecting(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Rejecting = replacement;

                Rejecting.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Rejecting, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.YesNoCancelDialogSubStateMachineType_Rejecting,
                    null);
            }
        }
        #endregion

        #region ToActive
        /// <summary>
        /// A description for the ToActive Object.
        /// </summary>
        public StateMachineTransition ToActive
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_toActive; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_toActive != null)
                    {
                        RemoveChild(m_toActive);
                    }

                    m_toActive = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceToActive(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ToActive = replacement;

                ToActive.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ToActive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.YesNoCancelDialogSubStateMachineType_ToActive,
                    null);
            }
        }
        #endregion

        #region ToAccepting
        /// <summary>
        /// A description for the ToAccepting Object.
        /// </summary>
        public StateMachineTransition ToAccepting
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_toAccepting; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_toAccepting != null)
                    {
                        RemoveChild(m_toAccepting);
                    }

                    m_toAccepting = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceToAccepting(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ToAccepting = replacement;

                ToAccepting.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ToAccepting, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.YesNoCancelDialogSubStateMachineType_ToAccepting,
                    null);
            }
        }
        #endregion

        #region AcceptingToInactive
        /// <summary>
        /// A description for the AcceptingToInactive Object.
        /// </summary>
        public StateMachineTransition AcceptingToInactive
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_acceptingToInactive; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_acceptingToInactive != null)
                    {
                        RemoveChild(m_acceptingToInactive);
                    }

                    m_acceptingToInactive = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceAcceptingToInactive(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                AcceptingToInactive = replacement;

                AcceptingToInactive.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.AcceptingToInactive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.YesNoCancelDialogSubStateMachineType_AcceptingToInactive,
                    null);
            }
        }
        #endregion

        #region ToCancelling
        /// <summary>
        /// A description for the ToCancelling Object.
        /// </summary>
        public StateMachineTransition ToCancelling
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_toCancelling; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_toCancelling != null)
                    {
                        RemoveChild(m_toCancelling);
                    }

                    m_toCancelling = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceToCancelling(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ToCancelling = replacement;

                ToCancelling.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ToCancelling, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.YesNoCancelDialogSubStateMachineType_ToCancelling,
                    null);
            }
        }
        #endregion

        #region CancellingToInactive
        /// <summary>
        /// A description for the CancellingToInactive Object.
        /// </summary>
        public StateMachineTransition CancellingToInactive
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_cancellingToInactive; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_cancellingToInactive != null)
                    {
                        RemoveChild(m_cancellingToInactive);
                    }

                    m_cancellingToInactive = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceCancellingToInactive(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                CancellingToInactive = replacement;

                CancellingToInactive.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.CancellingToInactive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.YesNoCancelDialogSubStateMachineType_CancellingToInactive,
                    null);
            }
        }
        #endregion

        #region ToRejecting
        /// <summary>
        /// A description for the ToRejecting Object.
        /// </summary>
        public StateMachineTransition ToRejecting
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_toRejecting; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_toRejecting != null)
                    {
                        RemoveChild(m_toRejecting);
                    }

                    m_toRejecting = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceToRejecting(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ToRejecting = replacement;

                ToRejecting.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ToRejecting, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.YesNoCancelDialogSubStateMachineType_ToRejecting,
                    null);
            }
        }
        #endregion

        #region RejectingToInactive
        /// <summary>
        /// A description for the RejectingToInactive Object.
        /// </summary>
        public StateMachineTransition RejectingToInactive
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_rejectingToInactive; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_rejectingToInactive != null)
                    {
                        RemoveChild(m_rejectingToInactive);
                    }

                    m_rejectingToInactive = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceRejectingToInactive(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                RejectingToInactive = replacement;

                RejectingToInactive.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.RejectingToInactive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.YesNoCancelDialogSubStateMachineType_RejectingToInactive,
                    null);
            }
        }
        #endregion

        #region YesMethod
        /// <summary>
        /// A description for the Yes Method.
        /// </summary>
        public MethodSource YesMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_yesMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_yesMethod != null)
                    {
                        RemoveChild(m_yesMethod);
                    }

                    m_yesMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the Yes method.
        /// </summary>
        public void Yes(OperationContext context)
        {     
            lock (DataLock)
            {     
                YesMethod.Call(context, this);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the Yes method is called.
        /// </summary>
        public void SetYesCallback(NoArgumentsMethodHandler callback)
        {
            lock (DataLock)
            {  
                YesMethod.SetCallback(this, callback);
            }
        }
        #endregion

        #region NoMethod
        /// <summary>
        /// A description for the No Method.
        /// </summary>
        public MethodSource NoMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_noMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_noMethod != null)
                    {
                        RemoveChild(m_noMethod);
                    }

                    m_noMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the No method.
        /// </summary>
        public void No(OperationContext context)
        {     
            lock (DataLock)
            {     
                NoMethod.Call(context, this);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the No method is called.
        /// </summary>
        public void SetNoCallback(NoArgumentsMethodHandler callback)
        {
            lock (DataLock)
            {  
                NoMethod.SetCallback(this, callback);
            }
        }
        #endregion

        #region CancelMethod
        /// <summary>
        /// A description for the Cancel Method.
        /// </summary>
        public MethodSource CancelMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_cancelMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_cancelMethod != null)
                    {
                        RemoveChild(m_cancelMethod);
                    }

                    m_cancelMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the Cancel method.
        /// </summary>
        public void Cancel(OperationContext context)
        {     
            lock (DataLock)
            {     
                CancelMethod.Call(context, this);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the Cancel method is called.
        /// </summary>
        public void SetCancelCallback(NoArgumentsMethodHandler callback)
        {
            lock (DataLock)
            {  
                CancelMethod.SetCallback(this, callback);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                YesNoCancelDialogSubStateMachineType type = source as YesNoCancelDialogSubStateMachineType;

                if (type != null && type.Inactive != null)
                {
                    Inactive = (StateMachineInitialState)type.Inactive.Clone(this);
                    Inactive.Initialize(type.Inactive);
                }

                if (type != null && type.Active != null)
                {
                    Active = (StateMachineState)type.Active.Clone(this);
                    Active.Initialize(type.Active);
                }

                if (type != null && type.Accepting != null)
                {
                    Accepting = (StateMachineState)type.Accepting.Clone(this);
                    Accepting.Initialize(type.Accepting);
                }

                if (type != null && type.Cancelling != null)
                {
                    Cancelling = (StateMachineState)type.Cancelling.Clone(this);
                    Cancelling.Initialize(type.Cancelling);
                }

                if (type != null && type.Rejecting != null)
                {
                    Rejecting = (StateMachineState)type.Rejecting.Clone(this);
                    Rejecting.Initialize(type.Rejecting);
                }

                if (type != null && type.ToActive != null)
                {
                    ToActive = (StateMachineTransition)type.ToActive.Clone(this);
                    ToActive.Initialize(type.ToActive);
                }

                if (type != null && type.ToAccepting != null)
                {
                    ToAccepting = (StateMachineTransition)type.ToAccepting.Clone(this);
                    ToAccepting.Initialize(type.ToAccepting);
                }

                if (type != null && type.AcceptingToInactive != null)
                {
                    AcceptingToInactive = (StateMachineTransition)type.AcceptingToInactive.Clone(this);
                    AcceptingToInactive.Initialize(type.AcceptingToInactive);
                }

                if (type != null && type.ToCancelling != null)
                {
                    ToCancelling = (StateMachineTransition)type.ToCancelling.Clone(this);
                    ToCancelling.Initialize(type.ToCancelling);
                }

                if (type != null && type.CancellingToInactive != null)
                {
                    CancellingToInactive = (StateMachineTransition)type.CancellingToInactive.Clone(this);
                    CancellingToInactive.Initialize(type.CancellingToInactive);
                }

                if (type != null && type.ToRejecting != null)
                {
                    ToRejecting = (StateMachineTransition)type.ToRejecting.Clone(this);
                    ToRejecting.Initialize(type.ToRejecting);
                }

                if (type != null && type.RejectingToInactive != null)
                {
                    RejectingToInactive = (StateMachineTransition)type.RejectingToInactive.Clone(this);
                    RejectingToInactive.Initialize(type.RejectingToInactive);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_inactive = StateMachineInitialState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.YesNoCancelDialogSubStateMachineType_Inactive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Inactive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.YesNoCancelDialogSubStateMachineType_Inactive);

            m_active = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.YesNoCancelDialogSubStateMachineType_Active, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Active, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.YesNoCancelDialogSubStateMachineType_Active);

            m_accepting = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.YesNoCancelDialogSubStateMachineType_Accepting, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Accepting, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.YesNoCancelDialogSubStateMachineType_Accepting);

            m_cancelling = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.YesNoCancelDialogSubStateMachineType_Cancelling, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Cancelling, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.YesNoCancelDialogSubStateMachineType_Cancelling);

            m_rejecting = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.YesNoCancelDialogSubStateMachineType_Rejecting, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Rejecting, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.YesNoCancelDialogSubStateMachineType_Rejecting);

            m_toActive = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.YesNoCancelDialogSubStateMachineType_ToActive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ToActive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.YesNoCancelDialogSubStateMachineType_ToActive);

            m_toAccepting = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.YesNoCancelDialogSubStateMachineType_ToAccepting, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ToAccepting, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.YesNoCancelDialogSubStateMachineType_ToAccepting);

            m_acceptingToInactive = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.YesNoCancelDialogSubStateMachineType_AcceptingToInactive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.AcceptingToInactive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.YesNoCancelDialogSubStateMachineType_AcceptingToInactive);

            m_toCancelling = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.YesNoCancelDialogSubStateMachineType_ToCancelling, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ToCancelling, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.YesNoCancelDialogSubStateMachineType_ToCancelling);

            m_cancellingToInactive = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.YesNoCancelDialogSubStateMachineType_CancellingToInactive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.CancellingToInactive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.YesNoCancelDialogSubStateMachineType_CancellingToInactive);

            m_toRejecting = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.YesNoCancelDialogSubStateMachineType_ToRejecting, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ToRejecting, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.YesNoCancelDialogSubStateMachineType_ToRejecting);

            m_rejectingToInactive = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.YesNoCancelDialogSubStateMachineType_RejectingToInactive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.RejectingToInactive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.YesNoCancelDialogSubStateMachineType_RejectingToInactive);

            m_yesMethod = MethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Methods.YesNoCancelDialogSubStateMachineType_Yes, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Yes, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.YesNoCancelDialogSubStateMachineType_Yes);

            m_noMethod = MethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Methods.YesNoCancelDialogSubStateMachineType_No, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.No, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.YesNoCancelDialogSubStateMachineType_No);

            m_cancelMethod = MethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Methods.YesNoCancelDialogSubStateMachineType_Cancel, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Cancel, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.YesNoCancelDialogSubStateMachineType_Cancel);
        }
        #endregion

        #region Private Fields
        StateMachineInitialState m_inactive;
        StateMachineState m_active;
        StateMachineState m_accepting;
        StateMachineState m_cancelling;
        StateMachineState m_rejecting;
        StateMachineTransition m_toActive;
        StateMachineTransition m_toAccepting;
        StateMachineTransition m_acceptingToInactive;
        StateMachineTransition m_toCancelling;
        StateMachineTransition m_cancellingToInactive;
        StateMachineTransition m_toRejecting;
        StateMachineTransition m_rejectingToInactive;
        MethodSource m_yesMethod;
        MethodSource m_noMethod;
        MethodSource m_cancelMethod;
        #endregion
    }
    #endregion

    #region YesNoCancelDialogSubStateMachine Class
    /// <summary>
    /// Represents an instance of the YesNoCancelDialogSubStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class YesNoCancelDialogSubStateMachine : BaseConditionStateMachine
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected YesNoCancelDialogSubStateMachine(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = YesNoCancelDialogSubStateMachineType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new YesNoCancelDialogSubStateMachine Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            YesNoCancelDialogSubStateMachine instance = new YesNoCancelDialogSubStateMachine(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new YesNoCancelDialogSubStateMachine Construct(IServerInternal server)
        {
            YesNoCancelDialogSubStateMachine instance = new YesNoCancelDialogSubStateMachine(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                YesNoCancelDialogSubStateMachine clone = new YesNoCancelDialogSubStateMachine(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region YesMethod
        /// <summary>
        /// A description for the Yes Method.
        /// </summary>
        public MethodSource YesMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_yesMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_yesMethod != null)
                    {
                        RemoveChild(m_yesMethod);
                    }

                    m_yesMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the Yes method.
        /// </summary>
        public void Yes(OperationContext context)
        {     
            lock (DataLock)
            {     
                YesMethod.Call(context, this);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the Yes method is called.
        /// </summary>
        public void SetYesCallback(NoArgumentsMethodHandler callback)
        {
            lock (DataLock)
            {  
                YesMethod.SetCallback(this, callback);
            }
        }
        #endregion

        #region NoMethod
        /// <summary>
        /// A description for the No Method.
        /// </summary>
        public MethodSource NoMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_noMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_noMethod != null)
                    {
                        RemoveChild(m_noMethod);
                    }

                    m_noMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the No method.
        /// </summary>
        public void No(OperationContext context)
        {     
            lock (DataLock)
            {     
                NoMethod.Call(context, this);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the No method is called.
        /// </summary>
        public void SetNoCallback(NoArgumentsMethodHandler callback)
        {
            lock (DataLock)
            {  
                NoMethod.SetCallback(this, callback);
            }
        }
        #endregion

        #region CancelMethod
        /// <summary>
        /// A description for the Cancel Method.
        /// </summary>
        public MethodSource CancelMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_cancelMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_cancelMethod != null)
                    {
                        RemoveChild(m_cancelMethod);
                    }

                    m_cancelMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the Cancel method.
        /// </summary>
        public void Cancel(OperationContext context)
        {     
            lock (DataLock)
            {     
                CancelMethod.Call(context, this);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the Cancel method is called.
        /// </summary>
        public void SetCancelCallback(NoArgumentsMethodHandler callback)
        {
            lock (DataLock)
            {  
                CancelMethod.SetCallback(this, callback);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                YesNoCancelDialogSubStateMachine instance = source as YesNoCancelDialogSubStateMachine;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                YesNoCancelDialogSubStateMachineType type = source as YesNoCancelDialogSubStateMachineType;

                if (type != null && type.YesMethod != null)
                {
                    YesMethod = (MethodSource)type.YesMethod.Clone(this);
                    YesMethod.Initialize(type.YesMethod);
                }
                else if (instance != null && instance.YesMethod != null)
                {
                    YesMethod = (MethodSource)instance.YesMethod.Clone(this);
                    YesMethod.Initialize(instance.YesMethod);
                }

                if (type != null && type.NoMethod != null)
                {
                    NoMethod = (MethodSource)type.NoMethod.Clone(this);
                    NoMethod.Initialize(type.NoMethod);
                }
                else if (instance != null && instance.NoMethod != null)
                {
                    NoMethod = (MethodSource)instance.NoMethod.Clone(this);
                    NoMethod.Initialize(instance.NoMethod);
                }

                if (type != null && type.CancelMethod != null)
                {
                    CancelMethod = (MethodSource)type.CancelMethod.Clone(this);
                    CancelMethod.Initialize(type.CancelMethod);
                }
                else if (instance != null && instance.CancelMethod != null)
                {
                    CancelMethod = (MethodSource)instance.CancelMethod.Clone(this);
                    CancelMethod.Initialize(instance.CancelMethod);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_yesMethod = MethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Yes, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.YesNoCancelDialogSubStateMachineType_Yes);

            m_noMethod = MethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.No, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.YesNoCancelDialogSubStateMachineType_No);

            m_cancelMethod = MethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Cancel, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.YesNoCancelDialogSubStateMachineType_Cancel);
        }
        #endregion

        #region Private Fields
        private YesNoCancelDialogSubStateMachineType m_typeDefinition;
        MethodSource m_yesMethod;
        MethodSource m_noMethod;
        MethodSource m_cancelMethod;
        #endregion
    }
    #endregion

    #region AcknowledgeableConditionType Class
    /// <summary>
    /// Represents the AcknowledgeableConditionType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AcknowledgeableConditionType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AcknowledgeableConditionType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AcknowledgeableConditionType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AcknowledgeableConditionType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.ConditionType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AcknowledgeableConditionType FindSource(IServerInternal server)
        {
            AcknowledgeableConditionType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AcknowledgeableConditionType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AcknowledgeableConditionType;

                if (type != null)
                {
                    return type;
                }

                type = new AcknowledgeableConditionType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AcknowledgeableConditionType clone = new AcknowledgeableConditionType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region State
        /// <summary>
        /// A description for the State Object.
        /// </summary>
        public AcknowledgeableConditionStateMachine State
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_state; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_state != null)
                    {
                        RemoveChild(m_state);
                    }

                    m_state = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceState(AcknowledgeableConditionStateMachine replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                State = replacement;

                State.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.State, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.AcknowledgeableConditionType_State,
                    null);
            }
        }
        #endregion

        #region AckPrevious
        /// <summary>
        /// A description for the AckPrevious Property.
        /// </summary>
        public Property<bool> AckPrevious
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_ackPrevious; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_ackPrevious != null)
                    {
                        RemoveChild(m_ackPrevious);
                    }

                    m_ackPrevious = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceAckPrevious(Property<bool> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                AckPrevious = replacement;

                AckPrevious.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.AckPrevious, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AcknowledgeableConditionType_AckPrevious,
                    null);
            }
        }
        #endregion

        #region AcknowledgeByEventIdsMethod
        /// <summary>
        /// A description for the AcknowledgeByEventIds Method.
        /// </summary>
        public AddCommentByEventIdsMethodSource AcknowledgeByEventIdsMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_acknowledgeByEventIdsMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_acknowledgeByEventIdsMethod != null)
                    {
                        RemoveChild(m_acknowledgeByEventIdsMethod);
                    }

                    m_acknowledgeByEventIdsMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the AcknowledgeByEventIds method.
        /// </summary>
        public StatusResult[] AcknowledgeByEventIds(
            OperationContext context,
            byte[][]         eventIds,
            LocalizedText    comment)
        {     
            lock (DataLock)
            {     
                return AcknowledgeByEventIdsMethod.Call(
                    context,
                    this,
                    eventIds,
                    comment);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the AcknowledgeByEventIds method is called.
        /// </summary>
        public void SetAcknowledgeByEventIdsCallback(AddCommentByEventIdsMethodHandler callback)
        {
            lock (DataLock)
            {  
                AcknowledgeByEventIdsMethod.SetCallback(this, callback);
            }
        }
        #endregion

        #region ConfirmByEventIdsMethod
        /// <summary>
        /// A description for the ConfirmByEventIds Method.
        /// </summary>
        public AddCommentByEventIdsMethodSource ConfirmByEventIdsMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_confirmByEventIdsMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_confirmByEventIdsMethod != null)
                    {
                        RemoveChild(m_confirmByEventIdsMethod);
                    }

                    m_confirmByEventIdsMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the ConfirmByEventIds method.
        /// </summary>
        public StatusResult[] ConfirmByEventIds(
            OperationContext context,
            byte[][]         eventIds,
            LocalizedText    comment)
        {     
            lock (DataLock)
            {     
                return ConfirmByEventIdsMethod.Call(
                    context,
                    this,
                    eventIds,
                    comment);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the ConfirmByEventIds method is called.
        /// </summary>
        public void SetConfirmByEventIdsCallback(AddCommentByEventIdsMethodHandler callback)
        {
            lock (DataLock)
            {  
                ConfirmByEventIdsMethod.SetCallback(this, callback);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AcknowledgeableConditionType type = source as AcknowledgeableConditionType;

                if (type != null && type.State != null)
                {
                    State = (AcknowledgeableConditionStateMachine)type.State.Clone(this);
                    State.Initialize(type.State);
                }

                if (type != null && type.AckPrevious != null)
                {
                    AckPrevious = (Property<bool>)type.AckPrevious.Clone(this);
                    AckPrevious.Initialize(type.AckPrevious);
                }

                if (type != null && type.AcknowledgeByEventIdsMethod != null)
                {
                    AcknowledgeByEventIdsMethod = (AddCommentByEventIdsMethodSource)type.AcknowledgeByEventIdsMethod.Clone(this);
                    AcknowledgeByEventIdsMethod.Initialize(type.AcknowledgeByEventIdsMethod);
                }

                if (type != null && type.ConfirmByEventIdsMethod != null)
                {
                    ConfirmByEventIdsMethod = (AddCommentByEventIdsMethodSource)type.ConfirmByEventIdsMethod.Clone(this);
                    ConfirmByEventIdsMethod.Initialize(type.ConfirmByEventIdsMethod);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_state = AcknowledgeableConditionStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ConditionType_State, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.State, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ConditionType_State);

            m_ackPrevious = Property<bool>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AcknowledgeableConditionType_AckPrevious, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.AckPrevious, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AcknowledgeableConditionType_AckPrevious);

            m_acknowledgeByEventIdsMethod = AddCommentByEventIdsMethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Methods.AcknowledgeableConditionType_AcknowledgeByEventIds, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.AcknowledgeByEventIds, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.AcknowledgeableConditionType_AcknowledgeByEventIds);

            m_confirmByEventIdsMethod = AddCommentByEventIdsMethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Methods.AcknowledgeableConditionType_ConfirmByEventIds, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ConfirmByEventIds, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.AcknowledgeableConditionType_ConfirmByEventIds);
        }
        #endregion

        #region Private Fields
        AcknowledgeableConditionStateMachine m_state;
        Property<bool> m_ackPrevious;
        AddCommentByEventIdsMethodSource m_acknowledgeByEventIdsMethod;
        AddCommentByEventIdsMethodSource m_confirmByEventIdsMethod;
        #endregion
    }
    #endregion

    #region AcknowledgeableCondition Class
    /// <summary>
    /// Represents an instance of the AcknowledgeableConditionType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AcknowledgeableCondition : Condition
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AcknowledgeableCondition(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AcknowledgeableConditionType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AcknowledgeableCondition Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AcknowledgeableCondition instance = new AcknowledgeableCondition(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AcknowledgeableCondition Construct(IServerInternal server)
        {
            AcknowledgeableCondition instance = new AcknowledgeableCondition(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AcknowledgeableCondition clone = new AcknowledgeableCondition(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region State
        /// <summary>
        /// A description for the State Object.
        /// </summary>
        public new AcknowledgeableConditionStateMachine State
        {
        	get 
            {    
                return (AcknowledgeableConditionStateMachine)base.State;
            }

            protected set
            {
                base.State = value;
            }
        }
        #endregion

        #region AckPrevious
        /// <summary>
        /// A description for the AckPrevious Property.
        /// </summary>
        public Property<bool> AckPrevious
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_ackPrevious; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_ackPrevious != null)
                    {
                        RemoveChild(m_ackPrevious);
                    }

                    m_ackPrevious = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceAckPrevious(Property<bool> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                AckPrevious = replacement;

                AckPrevious.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.AckPrevious, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AcknowledgeableConditionType_AckPrevious,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AcknowledgeableCondition instance = source as AcknowledgeableCondition;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AcknowledgeableConditionType type = source as AcknowledgeableConditionType;

                if (type != null && type.AckPrevious != null)
                {
                    AckPrevious = (Property<bool>)type.AckPrevious.Clone(this);
                    AckPrevious.Initialize(type.AckPrevious);
                }
                else if (instance != null && instance.AckPrevious != null)
                {
                    AckPrevious = (Property<bool>)instance.AckPrevious.Clone(this);
                    AckPrevious.Initialize(instance.AckPrevious);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            State = AcknowledgeableConditionStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.State, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ConditionType_State);

            m_ackPrevious = Property<bool>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.AckPrevious, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AcknowledgeableConditionType_AckPrevious);
        }
        #endregion

        #region Private Fields
        private AcknowledgeableConditionType m_typeDefinition;
        Property<bool> m_ackPrevious;
        #endregion
    }
    #endregion

    #region AcknowledgeableConditionStateMachineType Class
    /// <summary>
    /// Represents the AcknowledgeableConditionStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AcknowledgeableConditionStateMachineType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AcknowledgeableConditionStateMachineType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AcknowledgeableConditionStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AcknowledgeableConditionStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.ConditionStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AcknowledgeableConditionStateMachineType FindSource(IServerInternal server)
        {
            AcknowledgeableConditionStateMachineType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AcknowledgeableConditionStateMachineType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AcknowledgeableConditionStateMachineType;

                if (type != null)
                {
                    return type;
                }

                type = new AcknowledgeableConditionStateMachineType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AcknowledgeableConditionStateMachineType clone = new AcknowledgeableConditionStateMachineType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region Acknowledged
        /// <summary>
        /// A description for the Acknowledged Object.
        /// </summary>
        public AcknowledgeStateMachine Acknowledged
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_acknowledged; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_acknowledged != null)
                    {
                        RemoveChild(m_acknowledged);
                    }

                    m_acknowledged = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceAcknowledged(AcknowledgeStateMachine replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Acknowledged = replacement;

                Acknowledged.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Acknowledged, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.AcknowledgeableConditionStateMachineType_Acknowledged,
                    null);
            }
        }
        #endregion

        #region AckPreviousRequired
        /// <summary>
        /// A description for the AckPreviousRequired Object.
        /// </summary>
        public AckPreviousStateMachine AckPreviousRequired
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_ackPreviousRequired; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_ackPreviousRequired != null)
                    {
                        RemoveChild(m_ackPreviousRequired);
                    }

                    m_ackPreviousRequired = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceAckPreviousRequired(AckPreviousStateMachine replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                AckPreviousRequired = replacement;

                AckPreviousRequired.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.AckPreviousRequired, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.AcknowledgeableConditionStateMachineType_AckPreviousRequired,
                    null);
            }
        }
        #endregion

        #region Confirm
        /// <summary>
        /// A description for the Confirm Object.
        /// </summary>
        public ConfirmedStateMachine Confirm
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_confirm; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_confirm != null)
                    {
                        RemoveChild(m_confirm);
                    }

                    m_confirm = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceConfirm(ConfirmedStateMachine replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Confirm = replacement;

                Confirm.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Confirm, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.AcknowledgeableConditionStateMachineType_Confirm,
                    null);
            }
        }
        #endregion

        #region ConfirmPrevious
        /// <summary>
        /// A description for the ConfirmPrevious Object.
        /// </summary>
        public ConfirmedStateMachine ConfirmPrevious
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_confirmPrevious; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_confirmPrevious != null)
                    {
                        RemoveChild(m_confirmPrevious);
                    }

                    m_confirmPrevious = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceConfirmPrevious(ConfirmedStateMachine replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ConfirmPrevious = replacement;

                ConfirmPrevious.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ConfirmPrevious, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.AcknowledgeableConditionStateMachineType_ConfirmPrevious,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AcknowledgeableConditionStateMachineType type = source as AcknowledgeableConditionStateMachineType;

                if (type != null && type.Acknowledged != null)
                {
                    Acknowledged = (AcknowledgeStateMachine)type.Acknowledged.Clone(this);
                    Acknowledged.Initialize(type.Acknowledged);
                }

                if (type != null && type.AckPreviousRequired != null)
                {
                    AckPreviousRequired = (AckPreviousStateMachine)type.AckPreviousRequired.Clone(this);
                    AckPreviousRequired.Initialize(type.AckPreviousRequired);
                }

                if (type != null && type.Confirm != null)
                {
                    Confirm = (ConfirmedStateMachine)type.Confirm.Clone(this);
                    Confirm.Initialize(type.Confirm);
                }

                if (type != null && type.ConfirmPrevious != null)
                {
                    ConfirmPrevious = (ConfirmedStateMachine)type.ConfirmPrevious.Clone(this);
                    ConfirmPrevious.Initialize(type.ConfirmPrevious);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_acknowledged = AcknowledgeStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.AcknowledgeableConditionStateMachineType_Acknowledged, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Acknowledged, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.AcknowledgeableConditionStateMachineType_Acknowledged);

            m_ackPreviousRequired = AckPreviousStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.AcknowledgeableConditionStateMachineType_AckPreviousRequired, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.AckPreviousRequired, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.AcknowledgeableConditionStateMachineType_AckPreviousRequired);

            m_confirm = ConfirmedStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.AcknowledgeableConditionStateMachineType_Confirm, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Confirm, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.AcknowledgeableConditionStateMachineType_Confirm);

            m_confirmPrevious = ConfirmedStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.AcknowledgeableConditionStateMachineType_ConfirmPrevious, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ConfirmPrevious, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.AcknowledgeableConditionStateMachineType_ConfirmPrevious);
        }
        #endregion

        #region Private Fields
        AcknowledgeStateMachine m_acknowledged;
        AckPreviousStateMachine m_ackPreviousRequired;
        ConfirmedStateMachine m_confirm;
        ConfirmedStateMachine m_confirmPrevious;
        #endregion
    }
    #endregion

    #region AcknowledgeableConditionStateMachine Class
    /// <summary>
    /// Represents an instance of the AcknowledgeableConditionStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AcknowledgeableConditionStateMachine : ConditionStateMachine
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AcknowledgeableConditionStateMachine(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AcknowledgeableConditionStateMachineType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AcknowledgeableConditionStateMachine Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AcknowledgeableConditionStateMachine instance = new AcknowledgeableConditionStateMachine(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AcknowledgeableConditionStateMachine Construct(IServerInternal server)
        {
            AcknowledgeableConditionStateMachine instance = new AcknowledgeableConditionStateMachine(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AcknowledgeableConditionStateMachine clone = new AcknowledgeableConditionStateMachine(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region Acknowledged
        /// <summary>
        /// A description for the Acknowledged Object.
        /// </summary>
        public AcknowledgeStateMachine Acknowledged
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_acknowledged; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_acknowledged != null)
                    {
                        RemoveChild(m_acknowledged);
                    }

                    m_acknowledged = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceAcknowledged(AcknowledgeStateMachine replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Acknowledged = replacement;

                Acknowledged.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Acknowledged, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.AcknowledgeableConditionStateMachineType_Acknowledged,
                    null);
            }
        }
        #endregion

        #region AckPreviousRequired
        /// <summary>
        /// A description for the AckPreviousRequired Object.
        /// </summary>
        public AckPreviousStateMachine AckPreviousRequired
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_ackPreviousRequired; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_ackPreviousRequired != null)
                    {
                        RemoveChild(m_ackPreviousRequired);
                    }

                    m_ackPreviousRequired = value; 
                }
            }
        }

        /// <summary>
        /// Whether the AckPreviousRequired node is specified for the node.
        /// </summary>
        public bool AckPreviousRequiredSpecified
        {
        	get 
            { 
                lock (DataLock)
                {
                    return m_ackPreviousRequired != null; 
                }
            }
        }

        /// <summary>
        /// Specifies the optional child.
        /// </summary>
        public void SpecifyAckPreviousRequired(AckPreviousStateMachine replacement)
        {
            CheckNodeManagerState();

            lock (DataLock)
            {
                if (AckPreviousRequiredSpecified)
                {
                    AckPreviousRequired = (AckPreviousStateMachine)DeleteChild(m_ackPreviousRequired);
                }

                if (replacement != null)
                {       
                    AckPreviousRequired = replacement;

                    AckPreviousRequired.Create(
                        this.NodeId, 
                        new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                        null,
                        new QualifiedName(Opc.Ua.BrowseNames.AckPreviousRequired, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                        Opc.Ua.Objects.AcknowledgeableConditionStateMachineType_AckPreviousRequired,
                        null);
                }
            }
        }
        #endregion

        #region Confirm
        /// <summary>
        /// A description for the Confirm Object.
        /// </summary>
        public ConfirmedStateMachine Confirm
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_confirm; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_confirm != null)
                    {
                        RemoveChild(m_confirm);
                    }

                    m_confirm = value; 
                }
            }
        }

        /// <summary>
        /// Whether the Confirm node is specified for the node.
        /// </summary>
        public bool ConfirmSpecified
        {
        	get 
            { 
                lock (DataLock)
                {
                    return m_confirm != null; 
                }
            }
        }

        /// <summary>
        /// Specifies the optional child.
        /// </summary>
        public void SpecifyConfirm(ConfirmedStateMachine replacement)
        {
            CheckNodeManagerState();

            lock (DataLock)
            {
                if (ConfirmSpecified)
                {
                    Confirm = (ConfirmedStateMachine)DeleteChild(m_confirm);
                }

                if (replacement != null)
                {       
                    Confirm = replacement;

                    Confirm.Create(
                        this.NodeId, 
                        new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                        null,
                        new QualifiedName(Opc.Ua.BrowseNames.Confirm, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                        Opc.Ua.Objects.AcknowledgeableConditionStateMachineType_Confirm,
                        null);
                }
            }
        }
        #endregion

        #region ConfirmPrevious
        /// <summary>
        /// A description for the ConfirmPrevious Object.
        /// </summary>
        public ConfirmedStateMachine ConfirmPrevious
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_confirmPrevious; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_confirmPrevious != null)
                    {
                        RemoveChild(m_confirmPrevious);
                    }

                    m_confirmPrevious = value; 
                }
            }
        }

        /// <summary>
        /// Whether the ConfirmPrevious node is specified for the node.
        /// </summary>
        public bool ConfirmPreviousSpecified
        {
        	get 
            { 
                lock (DataLock)
                {
                    return m_confirmPrevious != null; 
                }
            }
        }

        /// <summary>
        /// Specifies the optional child.
        /// </summary>
        public void SpecifyConfirmPrevious(ConfirmedStateMachine replacement)
        {
            CheckNodeManagerState();

            lock (DataLock)
            {
                if (ConfirmPreviousSpecified)
                {
                    ConfirmPrevious = (ConfirmedStateMachine)DeleteChild(m_confirmPrevious);
                }

                if (replacement != null)
                {       
                    ConfirmPrevious = replacement;

                    ConfirmPrevious.Create(
                        this.NodeId, 
                        new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                        null,
                        new QualifiedName(Opc.Ua.BrowseNames.ConfirmPrevious, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                        Opc.Ua.Objects.AcknowledgeableConditionStateMachineType_ConfirmPrevious,
                        null);
                }
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AcknowledgeableConditionStateMachine instance = source as AcknowledgeableConditionStateMachine;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AcknowledgeableConditionStateMachineType type = source as AcknowledgeableConditionStateMachineType;

                if (type != null && type.Acknowledged != null)
                {
                    Acknowledged = (AcknowledgeStateMachine)type.Acknowledged.Clone(this);
                    Acknowledged.Initialize(type.Acknowledged);
                }
                else if (instance != null && instance.Acknowledged != null)
                {
                    Acknowledged = (AcknowledgeStateMachine)instance.Acknowledged.Clone(this);
                    Acknowledged.Initialize(instance.Acknowledged);
                }

                if (type != null && type.AckPreviousRequired != null)
                {
                    AckPreviousRequired = (AckPreviousStateMachine)type.AckPreviousRequired.Clone(this);
                    AckPreviousRequired.Initialize(type.AckPreviousRequired);
                }
                else if (instance != null && instance.AckPreviousRequired != null)
                {
                    AckPreviousRequired = (AckPreviousStateMachine)instance.AckPreviousRequired.Clone(this);
                    AckPreviousRequired.Initialize(instance.AckPreviousRequired);
                }

                if (type != null && type.Confirm != null)
                {
                    Confirm = (ConfirmedStateMachine)type.Confirm.Clone(this);
                    Confirm.Initialize(type.Confirm);
                }
                else if (instance != null && instance.Confirm != null)
                {
                    Confirm = (ConfirmedStateMachine)instance.Confirm.Clone(this);
                    Confirm.Initialize(instance.Confirm);
                }

                if (type != null && type.ConfirmPrevious != null)
                {
                    ConfirmPrevious = (ConfirmedStateMachine)type.ConfirmPrevious.Clone(this);
                    ConfirmPrevious.Initialize(type.ConfirmPrevious);
                }
                else if (instance != null && instance.ConfirmPrevious != null)
                {
                    ConfirmPrevious = (ConfirmedStateMachine)instance.ConfirmPrevious.Clone(this);
                    ConfirmPrevious.Initialize(instance.ConfirmPrevious);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_acknowledged = AcknowledgeStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Acknowledged, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.AcknowledgeableConditionStateMachineType_Acknowledged);
        }
        
        /// <summary cref="NodeSource.CreateChildren" />
        protected override void CreateChildren(object configuration)
        {
            base.CreateChildren(configuration);
                            
            AckPreviousRequired = (AckPreviousStateMachine)InitializeOptionalChild(
                new ConstructInstanceDelegate(AckPreviousStateMachine.Construct), 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.AckPreviousRequired, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.AcknowledgeableConditionStateMachineType_AckPreviousRequired,
                configuration);

            Confirm = (ConfirmedStateMachine)InitializeOptionalChild(
                new ConstructInstanceDelegate(ConfirmedStateMachine.Construct), 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Confirm, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.AcknowledgeableConditionStateMachineType_Confirm,
                configuration);

            ConfirmPrevious = (ConfirmedStateMachine)InitializeOptionalChild(
                new ConstructInstanceDelegate(ConfirmedStateMachine.Construct), 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ConfirmPrevious, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.AcknowledgeableConditionStateMachineType_ConfirmPrevious,
                configuration);
        }
        #endregion

        #region Private Fields
        private AcknowledgeableConditionStateMachineType m_typeDefinition;
        AcknowledgeStateMachine m_acknowledged;
        AckPreviousStateMachine m_ackPreviousRequired;
        ConfirmedStateMachine m_confirm;
        ConfirmedStateMachine m_confirmPrevious;
        #endregion
    }
    #endregion

    #region AuditAcknowledgeEventType Class
    /// <summary>
    /// Represents the AuditAcknowledgeEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditAcknowledgeEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AuditAcknowledgeEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AuditAcknowledgeEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AuditAcknowledgeEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AuditConditionEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AuditAcknowledgeEventType FindSource(IServerInternal server)
        {
            AuditAcknowledgeEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AuditAcknowledgeEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AuditAcknowledgeEventType;

                if (type != null)
                {
                    return type;
                }

                type = new AuditAcknowledgeEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditAcknowledgeEventType clone = new AuditAcknowledgeEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AuditAcknowledgeEventType type = source as AuditAcknowledgeEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endregion

    #region AuditAcknowledgeEvent Class
    /// <summary>
    /// Represents an instance of the AuditAcknowledgeEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AuditAcknowledgeEvent : AuditConditionEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AuditAcknowledgeEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AuditAcknowledgeEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AuditAcknowledgeEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AuditAcknowledgeEvent instance = new AuditAcknowledgeEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AuditAcknowledgeEvent Construct(IServerInternal server)
        {
            AuditAcknowledgeEvent instance = new AuditAcknowledgeEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AuditAcknowledgeEvent clone = new AuditAcknowledgeEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AuditAcknowledgeEvent instance = source as AuditAcknowledgeEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AuditAcknowledgeEventType type = source as AuditAcknowledgeEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private AuditAcknowledgeEventType m_typeDefinition;
        #endregion
    }
    #endregion

    #region AcknowledgeStateMachineType Class
    /// <summary>
    /// Represents the AcknowledgeStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AcknowledgeStateMachineType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AcknowledgeStateMachineType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AcknowledgeStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AcknowledgeStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseConditionStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AcknowledgeStateMachineType FindSource(IServerInternal server)
        {
            AcknowledgeStateMachineType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AcknowledgeStateMachineType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AcknowledgeStateMachineType;

                if (type != null)
                {
                    return type;
                }

                type = new AcknowledgeStateMachineType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AcknowledgeStateMachineType clone = new AcknowledgeStateMachineType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region Unacknowledged
        /// <summary>
        /// A description for the Unacknowledged Object.
        /// </summary>
        public StateMachineState Unacknowledged
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_unacknowledged; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_unacknowledged != null)
                    {
                        RemoveChild(m_unacknowledged);
                    }

                    m_unacknowledged = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceUnacknowledged(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Unacknowledged = replacement;

                Unacknowledged.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Unacknowledged, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.AcknowledgeStateMachineType_Unacknowledged,
                    null);
            }
        }
        #endregion

        #region Acknowledged
        /// <summary>
        /// A description for the Acknowledged Object.
        /// </summary>
        public StateMachineState Acknowledged
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_acknowledged; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_acknowledged != null)
                    {
                        RemoveChild(m_acknowledged);
                    }

                    m_acknowledged = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceAcknowledged(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Acknowledged = replacement;

                Acknowledged.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Acknowledged, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.AcknowledgeStateMachineType_Acknowledged,
                    null);
            }
        }
        #endregion

        #region Acknowledging
        /// <summary>
        /// A description for the Acknowledging Object.
        /// </summary>
        public StateMachineState Acknowledging
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_acknowledging; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_acknowledging != null)
                    {
                        RemoveChild(m_acknowledging);
                    }

                    m_acknowledging = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceAcknowledging(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Acknowledging = replacement;

                Acknowledging.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Acknowledging, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.AcknowledgeStateMachineType_Acknowledging,
                    null);
            }
        }
        #endregion

        #region ToAcknowledging
        /// <summary>
        /// A description for the ToAcknowledging Object.
        /// </summary>
        public StateMachineTransition ToAcknowledging
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_toAcknowledging; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_toAcknowledging != null)
                    {
                        RemoveChild(m_toAcknowledging);
                    }

                    m_toAcknowledging = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceToAcknowledging(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ToAcknowledging = replacement;

                ToAcknowledging.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ToAcknowledging, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.AcknowledgeStateMachineType_ToAcknowledging,
                    null);
            }
        }
        #endregion

        #region ToAcknowledged
        /// <summary>
        /// A description for the ToAcknowledged Object.
        /// </summary>
        public StateMachineTransition ToAcknowledged
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_toAcknowledged; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_toAcknowledged != null)
                    {
                        RemoveChild(m_toAcknowledged);
                    }

                    m_toAcknowledged = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceToAcknowledged(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ToAcknowledged = replacement;

                ToAcknowledged.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ToAcknowledged, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.AcknowledgeStateMachineType_ToAcknowledged,
                    null);
            }
        }
        #endregion

        #region ToUnacknowledged
        /// <summary>
        /// A description for the ToUnacknowledged Object.
        /// </summary>
        public StateMachineTransition ToUnacknowledged
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_toUnacknowledged; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_toUnacknowledged != null)
                    {
                        RemoveChild(m_toUnacknowledged);
                    }

                    m_toUnacknowledged = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceToUnacknowledged(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ToUnacknowledged = replacement;

                ToUnacknowledged.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ToUnacknowledged, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.AcknowledgeStateMachineType_ToUnacknowledged,
                    null);
            }
        }
        #endregion

        #region AcknowledgeMethod
        /// <summary>
        /// A description for the Acknowledge Method.
        /// </summary>
        public AddCommentMethodSource AcknowledgeMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_acknowledgeMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_acknowledgeMethod != null)
                    {
                        RemoveChild(m_acknowledgeMethod);
                    }

                    m_acknowledgeMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the Acknowledge method.
        /// </summary>
        public void Acknowledge(OperationContext context, LocalizedText comment)
        {     
            lock (DataLock)
            {     
                AcknowledgeMethod.Call(context, this, comment);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the Acknowledge method is called.
        /// </summary>
        public void SetAcknowledgeCallback(AddCommentMethodHandler callback)
        {
            lock (DataLock)
            {  
                AcknowledgeMethod.SetCallback(this, callback);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AcknowledgeStateMachineType type = source as AcknowledgeStateMachineType;

                if (type != null && type.Unacknowledged != null)
                {
                    Unacknowledged = (StateMachineState)type.Unacknowledged.Clone(this);
                    Unacknowledged.Initialize(type.Unacknowledged);
                }

                if (type != null && type.Acknowledged != null)
                {
                    Acknowledged = (StateMachineState)type.Acknowledged.Clone(this);
                    Acknowledged.Initialize(type.Acknowledged);
                }

                if (type != null && type.Acknowledging != null)
                {
                    Acknowledging = (StateMachineState)type.Acknowledging.Clone(this);
                    Acknowledging.Initialize(type.Acknowledging);
                }

                if (type != null && type.ToAcknowledging != null)
                {
                    ToAcknowledging = (StateMachineTransition)type.ToAcknowledging.Clone(this);
                    ToAcknowledging.Initialize(type.ToAcknowledging);
                }

                if (type != null && type.ToAcknowledged != null)
                {
                    ToAcknowledged = (StateMachineTransition)type.ToAcknowledged.Clone(this);
                    ToAcknowledged.Initialize(type.ToAcknowledged);
                }

                if (type != null && type.ToUnacknowledged != null)
                {
                    ToUnacknowledged = (StateMachineTransition)type.ToUnacknowledged.Clone(this);
                    ToUnacknowledged.Initialize(type.ToUnacknowledged);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_unacknowledged = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.AcknowledgeStateMachineType_Unacknowledged, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Unacknowledged, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.AcknowledgeStateMachineType_Unacknowledged);

            m_acknowledged = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.AcknowledgeStateMachineType_Acknowledged, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Acknowledged, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.AcknowledgeStateMachineType_Acknowledged);

            m_acknowledging = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.AcknowledgeStateMachineType_Acknowledging, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Acknowledging, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.AcknowledgeStateMachineType_Acknowledging);

            m_toAcknowledging = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.AcknowledgeStateMachineType_ToAcknowledging, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ToAcknowledging, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.AcknowledgeStateMachineType_ToAcknowledging);

            m_toAcknowledged = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.AcknowledgeStateMachineType_ToAcknowledged, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ToAcknowledged, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.AcknowledgeStateMachineType_ToAcknowledged);

            m_toUnacknowledged = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.AcknowledgeStateMachineType_ToUnacknowledged, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ToUnacknowledged, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.AcknowledgeStateMachineType_ToUnacknowledged);

            m_acknowledgeMethod = AddCommentMethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Methods.AcknowledgeStateMachineType_Acknowledge, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Acknowledge, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.AcknowledgeStateMachineType_Acknowledge);
        }
        #endregion

        #region Private Fields
        StateMachineState m_unacknowledged;
        StateMachineState m_acknowledged;
        StateMachineState m_acknowledging;
        StateMachineTransition m_toAcknowledging;
        StateMachineTransition m_toAcknowledged;
        StateMachineTransition m_toUnacknowledged;
        AddCommentMethodSource m_acknowledgeMethod;
        #endregion
    }
    #endregion

    #region AcknowledgeStateMachine Class
    /// <summary>
    /// Represents an instance of the AcknowledgeStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AcknowledgeStateMachine : BaseConditionStateMachine
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AcknowledgeStateMachine(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AcknowledgeStateMachineType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AcknowledgeStateMachine Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AcknowledgeStateMachine instance = new AcknowledgeStateMachine(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AcknowledgeStateMachine Construct(IServerInternal server)
        {
            AcknowledgeStateMachine instance = new AcknowledgeStateMachine(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AcknowledgeStateMachine clone = new AcknowledgeStateMachine(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region AcknowledgeMethod
        /// <summary>
        /// A description for the Acknowledge Method.
        /// </summary>
        public AddCommentMethodSource AcknowledgeMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_acknowledgeMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_acknowledgeMethod != null)
                    {
                        RemoveChild(m_acknowledgeMethod);
                    }

                    m_acknowledgeMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the Acknowledge method.
        /// </summary>
        public void Acknowledge(OperationContext context, LocalizedText comment)
        {     
            lock (DataLock)
            {     
                AcknowledgeMethod.Call(context, this, comment);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the Acknowledge method is called.
        /// </summary>
        public void SetAcknowledgeCallback(AddCommentMethodHandler callback)
        {
            lock (DataLock)
            {  
                AcknowledgeMethod.SetCallback(this, callback);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AcknowledgeStateMachine instance = source as AcknowledgeStateMachine;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AcknowledgeStateMachineType type = source as AcknowledgeStateMachineType;

                if (type != null && type.AcknowledgeMethod != null)
                {
                    AcknowledgeMethod = (AddCommentMethodSource)type.AcknowledgeMethod.Clone(this);
                    AcknowledgeMethod.Initialize(type.AcknowledgeMethod);
                }
                else if (instance != null && instance.AcknowledgeMethod != null)
                {
                    AcknowledgeMethod = (AddCommentMethodSource)instance.AcknowledgeMethod.Clone(this);
                    AcknowledgeMethod.Initialize(instance.AcknowledgeMethod);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_acknowledgeMethod = AddCommentMethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Acknowledge, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.AcknowledgeStateMachineType_Acknowledge);
        }
        #endregion

        #region Private Fields
        private AcknowledgeStateMachineType m_typeDefinition;
        AddCommentMethodSource m_acknowledgeMethod;
        #endregion
    }
    #endregion

    #region ConfirmedStateMachineType Class
    /// <summary>
    /// Represents the ConfirmedStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class ConfirmedStateMachineType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public ConfirmedStateMachineType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.ConfirmedStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.ConfirmedStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseConditionStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new ConfirmedStateMachineType FindSource(IServerInternal server)
        {
            ConfirmedStateMachineType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.ConfirmedStateMachineType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as ConfirmedStateMachineType;

                if (type != null)
                {
                    return type;
                }

                type = new ConfirmedStateMachineType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                ConfirmedStateMachineType clone = new ConfirmedStateMachineType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region Unconfirmed
        /// <summary>
        /// A description for the Unconfirmed Object.
        /// </summary>
        public StateMachineState Unconfirmed
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_unconfirmed; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_unconfirmed != null)
                    {
                        RemoveChild(m_unconfirmed);
                    }

                    m_unconfirmed = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceUnconfirmed(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Unconfirmed = replacement;

                Unconfirmed.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Unconfirmed, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ConfirmedStateMachineType_Unconfirmed,
                    null);
            }
        }
        #endregion

        #region Confirmed
        /// <summary>
        /// A description for the Confirmed Object.
        /// </summary>
        public StateMachineState Confirmed
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_confirmed; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_confirmed != null)
                    {
                        RemoveChild(m_confirmed);
                    }

                    m_confirmed = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceConfirmed(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Confirmed = replacement;

                Confirmed.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Confirmed, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ConfirmedStateMachineType_Confirmed,
                    null);
            }
        }
        #endregion

        #region Confirming
        /// <summary>
        /// A description for the Confirming Object.
        /// </summary>
        public StateMachineState Confirming
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_confirming; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_confirming != null)
                    {
                        RemoveChild(m_confirming);
                    }

                    m_confirming = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceConfirming(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Confirming = replacement;

                Confirming.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Confirming, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ConfirmedStateMachineType_Confirming,
                    null);
            }
        }
        #endregion

        #region ToConfirming
        /// <summary>
        /// A description for the ToConfirming Object.
        /// </summary>
        public StateMachineTransition ToConfirming
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_toConfirming; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_toConfirming != null)
                    {
                        RemoveChild(m_toConfirming);
                    }

                    m_toConfirming = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceToConfirming(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ToConfirming = replacement;

                ToConfirming.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ToConfirming, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ConfirmedStateMachineType_ToConfirming,
                    null);
            }
        }
        #endregion

        #region ToConfirmed
        /// <summary>
        /// A description for the ToConfirmed Object.
        /// </summary>
        public StateMachineTransition ToConfirmed
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_toConfirmed; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_toConfirmed != null)
                    {
                        RemoveChild(m_toConfirmed);
                    }

                    m_toConfirmed = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceToConfirmed(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ToConfirmed = replacement;

                ToConfirmed.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ToConfirmed, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ConfirmedStateMachineType_ToConfirmed,
                    null);
            }
        }
        #endregion

        #region ConfirmingToUnconfirmed
        /// <summary>
        /// A description for the ConfirmingToUnconfirmed Object.
        /// </summary>
        public StateMachineTransition ConfirmingToUnconfirmed
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_confirmingToUnconfirmed; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_confirmingToUnconfirmed != null)
                    {
                        RemoveChild(m_confirmingToUnconfirmed);
                    }

                    m_confirmingToUnconfirmed = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceConfirmingToUnconfirmed(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ConfirmingToUnconfirmed = replacement;

                ConfirmingToUnconfirmed.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ConfirmingToUnconfirmed, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ConfirmedStateMachineType_ConfirmingToUnconfirmed,
                    null);
            }
        }
        #endregion

        #region ConfirmedToUnconfirmed
        /// <summary>
        /// A description for the ConfirmedToUnconfirmed Object.
        /// </summary>
        public StateMachineTransition ConfirmedToUnconfirmed
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_confirmedToUnconfirmed; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_confirmedToUnconfirmed != null)
                    {
                        RemoveChild(m_confirmedToUnconfirmed);
                    }

                    m_confirmedToUnconfirmed = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceConfirmedToUnconfirmed(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ConfirmedToUnconfirmed = replacement;

                ConfirmedToUnconfirmed.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ConfirmedToUnconfirmed, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ConfirmedStateMachineType_ConfirmedToUnconfirmed,
                    null);
            }
        }
        #endregion

        #region ConfirmMethod
        /// <summary>
        /// A description for the Confirm Method.
        /// </summary>
        public AddCommentMethodSource ConfirmMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_confirmMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_confirmMethod != null)
                    {
                        RemoveChild(m_confirmMethod);
                    }

                    m_confirmMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the Confirm method.
        /// </summary>
        public void Confirm(OperationContext context, LocalizedText comment)
        {     
            lock (DataLock)
            {     
                ConfirmMethod.Call(context, this, comment);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the Confirm method is called.
        /// </summary>
        public void SetConfirmCallback(AddCommentMethodHandler callback)
        {
            lock (DataLock)
            {  
                ConfirmMethod.SetCallback(this, callback);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                ConfirmedStateMachineType type = source as ConfirmedStateMachineType;

                if (type != null && type.Unconfirmed != null)
                {
                    Unconfirmed = (StateMachineState)type.Unconfirmed.Clone(this);
                    Unconfirmed.Initialize(type.Unconfirmed);
                }

                if (type != null && type.Confirmed != null)
                {
                    Confirmed = (StateMachineState)type.Confirmed.Clone(this);
                    Confirmed.Initialize(type.Confirmed);
                }

                if (type != null && type.Confirming != null)
                {
                    Confirming = (StateMachineState)type.Confirming.Clone(this);
                    Confirming.Initialize(type.Confirming);
                }

                if (type != null && type.ToConfirming != null)
                {
                    ToConfirming = (StateMachineTransition)type.ToConfirming.Clone(this);
                    ToConfirming.Initialize(type.ToConfirming);
                }

                if (type != null && type.ToConfirmed != null)
                {
                    ToConfirmed = (StateMachineTransition)type.ToConfirmed.Clone(this);
                    ToConfirmed.Initialize(type.ToConfirmed);
                }

                if (type != null && type.ConfirmingToUnconfirmed != null)
                {
                    ConfirmingToUnconfirmed = (StateMachineTransition)type.ConfirmingToUnconfirmed.Clone(this);
                    ConfirmingToUnconfirmed.Initialize(type.ConfirmingToUnconfirmed);
                }

                if (type != null && type.ConfirmedToUnconfirmed != null)
                {
                    ConfirmedToUnconfirmed = (StateMachineTransition)type.ConfirmedToUnconfirmed.Clone(this);
                    ConfirmedToUnconfirmed.Initialize(type.ConfirmedToUnconfirmed);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_unconfirmed = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ConfirmedStateMachineType_Unconfirmed, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Unconfirmed, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ConfirmedStateMachineType_Unconfirmed);

            m_confirmed = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ConfirmedStateMachineType_Confirmed, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Confirmed, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ConfirmedStateMachineType_Confirmed);

            m_confirming = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ConfirmedStateMachineType_Confirming, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Confirming, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ConfirmedStateMachineType_Confirming);

            m_toConfirming = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ConfirmedStateMachineType_ToConfirming, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ToConfirming, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ConfirmedStateMachineType_ToConfirming);

            m_toConfirmed = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ConfirmedStateMachineType_ToConfirmed, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ToConfirmed, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ConfirmedStateMachineType_ToConfirmed);

            m_confirmingToUnconfirmed = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ConfirmedStateMachineType_ConfirmingToUnconfirmed, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ConfirmingToUnconfirmed, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ConfirmedStateMachineType_ConfirmingToUnconfirmed);

            m_confirmedToUnconfirmed = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ConfirmedStateMachineType_ConfirmedToUnconfirmed, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ConfirmedToUnconfirmed, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ConfirmedStateMachineType_ConfirmedToUnconfirmed);

            m_confirmMethod = AddCommentMethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Methods.ConfirmedStateMachineType_Confirm, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Confirm, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.ConfirmedStateMachineType_Confirm);
        }
        #endregion

        #region Private Fields
        StateMachineState m_unconfirmed;
        StateMachineState m_confirmed;
        StateMachineState m_confirming;
        StateMachineTransition m_toConfirming;
        StateMachineTransition m_toConfirmed;
        StateMachineTransition m_confirmingToUnconfirmed;
        StateMachineTransition m_confirmedToUnconfirmed;
        AddCommentMethodSource m_confirmMethod;
        #endregion
    }
    #endregion

    #region ConfirmedStateMachine Class
    /// <summary>
    /// Represents an instance of the ConfirmedStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class ConfirmedStateMachine : BaseConditionStateMachine
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected ConfirmedStateMachine(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = ConfirmedStateMachineType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new ConfirmedStateMachine Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            ConfirmedStateMachine instance = new ConfirmedStateMachine(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new ConfirmedStateMachine Construct(IServerInternal server)
        {
            ConfirmedStateMachine instance = new ConfirmedStateMachine(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                ConfirmedStateMachine clone = new ConfirmedStateMachine(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region ConfirmMethod
        /// <summary>
        /// A description for the Confirm Method.
        /// </summary>
        public AddCommentMethodSource ConfirmMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_confirmMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_confirmMethod != null)
                    {
                        RemoveChild(m_confirmMethod);
                    }

                    m_confirmMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the Confirm method.
        /// </summary>
        public void Confirm(OperationContext context, LocalizedText comment)
        {     
            lock (DataLock)
            {     
                ConfirmMethod.Call(context, this, comment);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the Confirm method is called.
        /// </summary>
        public void SetConfirmCallback(AddCommentMethodHandler callback)
        {
            lock (DataLock)
            {  
                ConfirmMethod.SetCallback(this, callback);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                ConfirmedStateMachine instance = source as ConfirmedStateMachine;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                ConfirmedStateMachineType type = source as ConfirmedStateMachineType;

                if (type != null && type.ConfirmMethod != null)
                {
                    ConfirmMethod = (AddCommentMethodSource)type.ConfirmMethod.Clone(this);
                    ConfirmMethod.Initialize(type.ConfirmMethod);
                }
                else if (instance != null && instance.ConfirmMethod != null)
                {
                    ConfirmMethod = (AddCommentMethodSource)instance.ConfirmMethod.Clone(this);
                    ConfirmMethod.Initialize(instance.ConfirmMethod);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_confirmMethod = AddCommentMethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Confirm, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.ConfirmedStateMachineType_Confirm);
        }
        #endregion

        #region Private Fields
        private ConfirmedStateMachineType m_typeDefinition;
        AddCommentMethodSource m_confirmMethod;
        #endregion
    }
    #endregion

    #region AckPreviousStateMachineType Class
    /// <summary>
    /// Represents the AckPreviousStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AckPreviousStateMachineType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AckPreviousStateMachineType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AckPreviousStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AckPreviousStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseConditionStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AckPreviousStateMachineType FindSource(IServerInternal server)
        {
            AckPreviousStateMachineType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AckPreviousStateMachineType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AckPreviousStateMachineType;

                if (type != null)
                {
                    return type;
                }

                type = new AckPreviousStateMachineType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AckPreviousStateMachineType clone = new AckPreviousStateMachineType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region Inactive
        /// <summary>
        /// A description for the Inactive Object.
        /// </summary>
        public StateMachineState Inactive
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_inactive; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_inactive != null)
                    {
                        RemoveChild(m_inactive);
                    }

                    m_inactive = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceInactive(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Inactive = replacement;

                Inactive.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Inactive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.AckPreviousStateMachineType_Inactive,
                    null);
            }
        }
        #endregion

        #region Active
        /// <summary>
        /// A description for the Active Object.
        /// </summary>
        public StateMachineState Active
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_active; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_active != null)
                    {
                        RemoveChild(m_active);
                    }

                    m_active = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceActive(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Active = replacement;

                Active.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Active, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.AckPreviousStateMachineType_Active,
                    null);
            }
        }
        #endregion

        #region Confirming
        /// <summary>
        /// A description for the Confirming Object.
        /// </summary>
        public StateMachineState Confirming
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_confirming; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_confirming != null)
                    {
                        RemoveChild(m_confirming);
                    }

                    m_confirming = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceConfirming(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Confirming = replacement;

                Confirming.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Confirming, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.AckPreviousStateMachineType_Confirming,
                    null);
            }
        }
        #endregion

        #region ToActive
        /// <summary>
        /// A description for the ToActive Object.
        /// </summary>
        public StateMachineTransition ToActive
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_toActive; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_toActive != null)
                    {
                        RemoveChild(m_toActive);
                    }

                    m_toActive = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceToActive(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ToActive = replacement;

                ToActive.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ToActive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.AckPreviousStateMachineType_ToActive,
                    null);
            }
        }
        #endregion

        #region ToInactive
        /// <summary>
        /// A description for the ToInactive Object.
        /// </summary>
        public StateMachineTransition ToInactive
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_toInactive; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_toInactive != null)
                    {
                        RemoveChild(m_toInactive);
                    }

                    m_toInactive = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceToInactive(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ToInactive = replacement;

                ToInactive.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ToInactive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.AckPreviousStateMachineType_ToInactive,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AckPreviousStateMachineType type = source as AckPreviousStateMachineType;

                if (type != null && type.Inactive != null)
                {
                    Inactive = (StateMachineState)type.Inactive.Clone(this);
                    Inactive.Initialize(type.Inactive);
                }

                if (type != null && type.Active != null)
                {
                    Active = (StateMachineState)type.Active.Clone(this);
                    Active.Initialize(type.Active);
                }

                if (type != null && type.Confirming != null)
                {
                    Confirming = (StateMachineState)type.Confirming.Clone(this);
                    Confirming.Initialize(type.Confirming);
                }

                if (type != null && type.ToActive != null)
                {
                    ToActive = (StateMachineTransition)type.ToActive.Clone(this);
                    ToActive.Initialize(type.ToActive);
                }

                if (type != null && type.ToInactive != null)
                {
                    ToInactive = (StateMachineTransition)type.ToInactive.Clone(this);
                    ToInactive.Initialize(type.ToInactive);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_inactive = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.AckPreviousStateMachineType_Inactive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Inactive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.AckPreviousStateMachineType_Inactive);

            m_active = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.AckPreviousStateMachineType_Active, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Active, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.AckPreviousStateMachineType_Active);

            m_confirming = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.AckPreviousStateMachineType_Confirming, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Confirming, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.AckPreviousStateMachineType_Confirming);

            m_toActive = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.AckPreviousStateMachineType_ToActive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ToActive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.AckPreviousStateMachineType_ToActive);

            m_toInactive = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.AckPreviousStateMachineType_ToInactive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ToInactive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.AckPreviousStateMachineType_ToInactive);
        }
        #endregion

        #region Private Fields
        StateMachineState m_inactive;
        StateMachineState m_active;
        StateMachineState m_confirming;
        StateMachineTransition m_toActive;
        StateMachineTransition m_toInactive;
        #endregion
    }
    #endregion

    #region AckPreviousStateMachine Class
    /// <summary>
    /// Represents an instance of the AckPreviousStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AckPreviousStateMachine : BaseConditionStateMachine
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AckPreviousStateMachine(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AckPreviousStateMachineType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AckPreviousStateMachine Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AckPreviousStateMachine instance = new AckPreviousStateMachine(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AckPreviousStateMachine Construct(IServerInternal server)
        {
            AckPreviousStateMachine instance = new AckPreviousStateMachine(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AckPreviousStateMachine clone = new AckPreviousStateMachine(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AckPreviousStateMachine instance = source as AckPreviousStateMachine;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AckPreviousStateMachineType type = source as AckPreviousStateMachineType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private AckPreviousStateMachineType m_typeDefinition;
        #endregion
    }
    #endregion

    #region AlarmConditionType Class
    /// <summary>
    /// Represents the AlarmConditionType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AlarmConditionType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AlarmConditionType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AlarmConditionType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AlarmConditionType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AcknowledgeableConditionType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AlarmConditionType FindSource(IServerInternal server)
        {
            AlarmConditionType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AlarmConditionType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AlarmConditionType;

                if (type != null)
                {
                    return type;
                }

                type = new AlarmConditionType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AlarmConditionType clone = new AlarmConditionType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region State
        /// <summary>
        /// A description for the State Object.
        /// </summary>
        public AlarmConditionStateMachine State
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_state; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_state != null)
                    {
                        RemoveChild(m_state);
                    }

                    m_state = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceState(AlarmConditionStateMachine replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                State = replacement;

                State.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.State, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.AlarmConditionType_State,
                    null);
            }
        }
        #endregion

        #region SuppressedOrShelved
        /// <summary>
        /// A description for the SuppressedOrShelved Property.
        /// </summary>
        public Property<bool> SuppressedOrShelved
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_suppressedOrShelved; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_suppressedOrShelved != null)
                    {
                        RemoveChild(m_suppressedOrShelved);
                    }

                    m_suppressedOrShelved = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSuppressedOrShelved(Property<bool> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SuppressedOrShelved = replacement;

                SuppressedOrShelved.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SuppressedOrShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AlarmConditionType_SuppressedOrShelved,
                    null);
            }
        }
        #endregion

        #region MaxTimeShelved
        /// <summary>
        /// A description for the MaxTimeShelved Property.
        /// </summary>
        public Property<double> MaxTimeShelved
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_maxTimeShelved; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_maxTimeShelved != null)
                    {
                        RemoveChild(m_maxTimeShelved);
                    }

                    m_maxTimeShelved = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceMaxTimeShelved(Property<double> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                MaxTimeShelved = replacement;

                MaxTimeShelved.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.MaxTimeShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AlarmConditionType_MaxTimeShelved,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AlarmConditionType type = source as AlarmConditionType;

                if (type != null && type.State != null)
                {
                    State = (AlarmConditionStateMachine)type.State.Clone(this);
                    State.Initialize(type.State);
                }

                if (type != null && type.SuppressedOrShelved != null)
                {
                    SuppressedOrShelved = (Property<bool>)type.SuppressedOrShelved.Clone(this);
                    SuppressedOrShelved.Initialize(type.SuppressedOrShelved);
                }

                if (type != null && type.MaxTimeShelved != null)
                {
                    MaxTimeShelved = (Property<double>)type.MaxTimeShelved.Clone(this);
                    MaxTimeShelved.Initialize(type.MaxTimeShelved);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_state = AlarmConditionStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.AcknowledgeableConditionType_State, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.State, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.AcknowledgeableConditionType_State);

            m_suppressedOrShelved = Property<bool>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AlarmConditionType_SuppressedOrShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.SuppressedOrShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AlarmConditionType_SuppressedOrShelved);

            m_maxTimeShelved = Property<double>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.AlarmConditionType_MaxTimeShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.MaxTimeShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AlarmConditionType_MaxTimeShelved);
        }
        #endregion

        #region Private Fields
        AlarmConditionStateMachine m_state;
        Property<bool> m_suppressedOrShelved;
        Property<double> m_maxTimeShelved;
        #endregion
    }
    #endregion

    #region AlarmCondition Class
    /// <summary>
    /// Represents an instance of the AlarmConditionType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AlarmCondition : AcknowledgeableCondition
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AlarmCondition(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AlarmConditionType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AlarmCondition Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AlarmCondition instance = new AlarmCondition(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AlarmCondition Construct(IServerInternal server)
        {
            AlarmCondition instance = new AlarmCondition(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AlarmCondition clone = new AlarmCondition(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region State
        /// <summary>
        /// A description for the State Object.
        /// </summary>
        public new AlarmConditionStateMachine State
        {
        	get 
            {    
                return (AlarmConditionStateMachine)base.State;
            }

            protected set
            {
                base.State = value;
            }
        }
        #endregion

        #region SuppressedOrShelved
        /// <summary>
        /// A description for the SuppressedOrShelved Property.
        /// </summary>
        public Property<bool> SuppressedOrShelved
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_suppressedOrShelved; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_suppressedOrShelved != null)
                    {
                        RemoveChild(m_suppressedOrShelved);
                    }

                    m_suppressedOrShelved = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSuppressedOrShelved(Property<bool> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                SuppressedOrShelved = replacement;

                SuppressedOrShelved.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.SuppressedOrShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AlarmConditionType_SuppressedOrShelved,
                    null);
            }
        }
        #endregion

        #region MaxTimeShelved
        /// <summary>
        /// A description for the MaxTimeShelved Property.
        /// </summary>
        public Property<double> MaxTimeShelved
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_maxTimeShelved; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_maxTimeShelved != null)
                    {
                        RemoveChild(m_maxTimeShelved);
                    }

                    m_maxTimeShelved = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceMaxTimeShelved(Property<double> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                MaxTimeShelved = replacement;

                MaxTimeShelved.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.MaxTimeShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.AlarmConditionType_MaxTimeShelved,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AlarmCondition instance = source as AlarmCondition;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AlarmConditionType type = source as AlarmConditionType;

                if (type != null && type.SuppressedOrShelved != null)
                {
                    SuppressedOrShelved = (Property<bool>)type.SuppressedOrShelved.Clone(this);
                    SuppressedOrShelved.Initialize(type.SuppressedOrShelved);
                }
                else if (instance != null && instance.SuppressedOrShelved != null)
                {
                    SuppressedOrShelved = (Property<bool>)instance.SuppressedOrShelved.Clone(this);
                    SuppressedOrShelved.Initialize(instance.SuppressedOrShelved);
                }

                if (type != null && type.MaxTimeShelved != null)
                {
                    MaxTimeShelved = (Property<double>)type.MaxTimeShelved.Clone(this);
                    MaxTimeShelved.Initialize(type.MaxTimeShelved);
                }
                else if (instance != null && instance.MaxTimeShelved != null)
                {
                    MaxTimeShelved = (Property<double>)instance.MaxTimeShelved.Clone(this);
                    MaxTimeShelved.Initialize(instance.MaxTimeShelved);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            State = AlarmConditionStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.State, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.AcknowledgeableConditionType_State);

            m_suppressedOrShelved = Property<bool>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.SuppressedOrShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AlarmConditionType_SuppressedOrShelved);

            m_maxTimeShelved = Property<double>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasProperty, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.MaxTimeShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.AlarmConditionType_MaxTimeShelved);
        }
        #endregion

        #region Private Fields
        private AlarmConditionType m_typeDefinition;
        Property<bool> m_suppressedOrShelved;
        Property<double> m_maxTimeShelved;
        #endregion
    }
    #endregion

    #region AlarmConditionStateMachineType Class
    /// <summary>
    /// Represents the AlarmConditionStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AlarmConditionStateMachineType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AlarmConditionStateMachineType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AlarmConditionStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AlarmConditionStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AcknowledgeableConditionStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AlarmConditionStateMachineType FindSource(IServerInternal server)
        {
            AlarmConditionStateMachineType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AlarmConditionStateMachineType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AlarmConditionStateMachineType;

                if (type != null)
                {
                    return type;
                }

                type = new AlarmConditionStateMachineType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AlarmConditionStateMachineType clone = new AlarmConditionStateMachineType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region AlarmActive
        /// <summary>
        /// A description for the AlarmActive Object.
        /// </summary>
        public AlarmStateMachine AlarmActive
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_alarmActive; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_alarmActive != null)
                    {
                        RemoveChild(m_alarmActive);
                    }

                    m_alarmActive = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceAlarmActive(AlarmStateMachine replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                AlarmActive = replacement;

                AlarmActive.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.AlarmActive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.AlarmConditionStateMachineType_AlarmActive,
                    null);
            }
        }
        #endregion

        #region AlarmShelved
        /// <summary>
        /// A description for the AlarmShelved Object.
        /// </summary>
        public ShelvedStateMachine AlarmShelved
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_alarmShelved; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_alarmShelved != null)
                    {
                        RemoveChild(m_alarmShelved);
                    }

                    m_alarmShelved = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceAlarmShelved(ShelvedStateMachine replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                AlarmShelved = replacement;

                AlarmShelved.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.AlarmShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.AlarmConditionStateMachineType_AlarmShelved,
                    null);
            }
        }
        #endregion

        #region AlarmSuppressed
        /// <summary>
        /// A description for the AlarmSuppressed Object.
        /// </summary>
        public SuppressedStateMachine AlarmSuppressed
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_alarmSuppressed; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_alarmSuppressed != null)
                    {
                        RemoveChild(m_alarmSuppressed);
                    }

                    m_alarmSuppressed = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceAlarmSuppressed(SuppressedStateMachine replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                AlarmSuppressed = replacement;

                AlarmSuppressed.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.AlarmSuppressed, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.AlarmConditionStateMachineType_AlarmSuppressed,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AlarmConditionStateMachineType type = source as AlarmConditionStateMachineType;

                if (type != null && type.AlarmActive != null)
                {
                    AlarmActive = (AlarmStateMachine)type.AlarmActive.Clone(this);
                    AlarmActive.Initialize(type.AlarmActive);
                }

                if (type != null && type.AlarmShelved != null)
                {
                    AlarmShelved = (ShelvedStateMachine)type.AlarmShelved.Clone(this);
                    AlarmShelved.Initialize(type.AlarmShelved);
                }

                if (type != null && type.AlarmSuppressed != null)
                {
                    AlarmSuppressed = (SuppressedStateMachine)type.AlarmSuppressed.Clone(this);
                    AlarmSuppressed.Initialize(type.AlarmSuppressed);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_alarmActive = AlarmStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.AlarmConditionStateMachineType_AlarmActive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.AlarmActive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.AlarmConditionStateMachineType_AlarmActive);

            m_alarmShelved = ShelvedStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.AlarmConditionStateMachineType_AlarmShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.AlarmShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.AlarmConditionStateMachineType_AlarmShelved);

            m_alarmSuppressed = SuppressedStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.AlarmConditionStateMachineType_AlarmSuppressed, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.AlarmSuppressed, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.AlarmConditionStateMachineType_AlarmSuppressed);
        }
        #endregion

        #region Private Fields
        AlarmStateMachine m_alarmActive;
        ShelvedStateMachine m_alarmShelved;
        SuppressedStateMachine m_alarmSuppressed;
        #endregion
    }
    #endregion

    #region AlarmConditionStateMachine Class
    /// <summary>
    /// Represents an instance of the AlarmConditionStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AlarmConditionStateMachine : AcknowledgeableConditionStateMachine
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AlarmConditionStateMachine(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AlarmConditionStateMachineType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AlarmConditionStateMachine Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AlarmConditionStateMachine instance = new AlarmConditionStateMachine(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AlarmConditionStateMachine Construct(IServerInternal server)
        {
            AlarmConditionStateMachine instance = new AlarmConditionStateMachine(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AlarmConditionStateMachine clone = new AlarmConditionStateMachine(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region AlarmActive
        /// <summary>
        /// A description for the AlarmActive Object.
        /// </summary>
        public AlarmStateMachine AlarmActive
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_alarmActive; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_alarmActive != null)
                    {
                        RemoveChild(m_alarmActive);
                    }

                    m_alarmActive = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceAlarmActive(AlarmStateMachine replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                AlarmActive = replacement;

                AlarmActive.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.AlarmActive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.AlarmConditionStateMachineType_AlarmActive,
                    null);
            }
        }
        #endregion

        #region AlarmShelved
        /// <summary>
        /// A description for the AlarmShelved Object.
        /// </summary>
        public ShelvedStateMachine AlarmShelved
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_alarmShelved; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_alarmShelved != null)
                    {
                        RemoveChild(m_alarmShelved);
                    }

                    m_alarmShelved = value; 
                }
            }
        }

        /// <summary>
        /// Whether the AlarmShelved node is specified for the node.
        /// </summary>
        public bool AlarmShelvedSpecified
        {
        	get 
            { 
                lock (DataLock)
                {
                    return m_alarmShelved != null; 
                }
            }
        }

        /// <summary>
        /// Specifies the optional child.
        /// </summary>
        public void SpecifyAlarmShelved(ShelvedStateMachine replacement)
        {
            CheckNodeManagerState();

            lock (DataLock)
            {
                if (AlarmShelvedSpecified)
                {
                    AlarmShelved = (ShelvedStateMachine)DeleteChild(m_alarmShelved);
                }

                if (replacement != null)
                {       
                    AlarmShelved = replacement;

                    AlarmShelved.Create(
                        this.NodeId, 
                        new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                        null,
                        new QualifiedName(Opc.Ua.BrowseNames.AlarmShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                        Opc.Ua.Objects.AlarmConditionStateMachineType_AlarmShelved,
                        null);
                }
            }
        }
        #endregion

        #region AlarmSuppressed
        /// <summary>
        /// A description for the AlarmSuppressed Object.
        /// </summary>
        public SuppressedStateMachine AlarmSuppressed
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_alarmSuppressed; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_alarmSuppressed != null)
                    {
                        RemoveChild(m_alarmSuppressed);
                    }

                    m_alarmSuppressed = value; 
                }
            }
        }

        /// <summary>
        /// Whether the AlarmSuppressed node is specified for the node.
        /// </summary>
        public bool AlarmSuppressedSpecified
        {
        	get 
            { 
                lock (DataLock)
                {
                    return m_alarmSuppressed != null; 
                }
            }
        }

        /// <summary>
        /// Specifies the optional child.
        /// </summary>
        public void SpecifyAlarmSuppressed(SuppressedStateMachine replacement)
        {
            CheckNodeManagerState();

            lock (DataLock)
            {
                if (AlarmSuppressedSpecified)
                {
                    AlarmSuppressed = (SuppressedStateMachine)DeleteChild(m_alarmSuppressed);
                }

                if (replacement != null)
                {       
                    AlarmSuppressed = replacement;

                    AlarmSuppressed.Create(
                        this.NodeId, 
                        new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                        null,
                        new QualifiedName(Opc.Ua.BrowseNames.AlarmSuppressed, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                        Opc.Ua.Objects.AlarmConditionStateMachineType_AlarmSuppressed,
                        null);
                }
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AlarmConditionStateMachine instance = source as AlarmConditionStateMachine;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AlarmConditionStateMachineType type = source as AlarmConditionStateMachineType;

                if (type != null && type.AlarmActive != null)
                {
                    AlarmActive = (AlarmStateMachine)type.AlarmActive.Clone(this);
                    AlarmActive.Initialize(type.AlarmActive);
                }
                else if (instance != null && instance.AlarmActive != null)
                {
                    AlarmActive = (AlarmStateMachine)instance.AlarmActive.Clone(this);
                    AlarmActive.Initialize(instance.AlarmActive);
                }

                if (type != null && type.AlarmShelved != null)
                {
                    AlarmShelved = (ShelvedStateMachine)type.AlarmShelved.Clone(this);
                    AlarmShelved.Initialize(type.AlarmShelved);
                }
                else if (instance != null && instance.AlarmShelved != null)
                {
                    AlarmShelved = (ShelvedStateMachine)instance.AlarmShelved.Clone(this);
                    AlarmShelved.Initialize(instance.AlarmShelved);
                }

                if (type != null && type.AlarmSuppressed != null)
                {
                    AlarmSuppressed = (SuppressedStateMachine)type.AlarmSuppressed.Clone(this);
                    AlarmSuppressed.Initialize(type.AlarmSuppressed);
                }
                else if (instance != null && instance.AlarmSuppressed != null)
                {
                    AlarmSuppressed = (SuppressedStateMachine)instance.AlarmSuppressed.Clone(this);
                    AlarmSuppressed.Initialize(instance.AlarmSuppressed);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_alarmActive = AlarmStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.AlarmActive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.AlarmConditionStateMachineType_AlarmActive);
        }
        
        /// <summary cref="NodeSource.CreateChildren" />
        protected override void CreateChildren(object configuration)
        {
            base.CreateChildren(configuration);
                            
            AlarmShelved = (ShelvedStateMachine)InitializeOptionalChild(
                new ConstructInstanceDelegate(ShelvedStateMachine.Construct), 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.AlarmShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.AlarmConditionStateMachineType_AlarmShelved,
                configuration);

            AlarmSuppressed = (SuppressedStateMachine)InitializeOptionalChild(
                new ConstructInstanceDelegate(SuppressedStateMachine.Construct), 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.AlarmSuppressed, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.AlarmConditionStateMachineType_AlarmSuppressed,
                configuration);
        }
        #endregion

        #region Private Fields
        private AlarmConditionStateMachineType m_typeDefinition;
        AlarmStateMachine m_alarmActive;
        ShelvedStateMachine m_alarmShelved;
        SuppressedStateMachine m_alarmSuppressed;
        #endregion
    }
    #endregion

    #region AlarmStateMachineType Class
    /// <summary>
    /// Represents the AlarmStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AlarmStateMachineType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AlarmStateMachineType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.AlarmStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AlarmStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseConditionStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AlarmStateMachineType FindSource(IServerInternal server)
        {
            AlarmStateMachineType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.AlarmStateMachineType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AlarmStateMachineType;

                if (type != null)
                {
                    return type;
                }

                type = new AlarmStateMachineType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AlarmStateMachineType clone = new AlarmStateMachineType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region Inactive
        /// <summary>
        /// A description for the Inactive Object.
        /// </summary>
        public StateMachineState Inactive
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_inactive; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_inactive != null)
                    {
                        RemoveChild(m_inactive);
                    }

                    m_inactive = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceInactive(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Inactive = replacement;

                Inactive.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Inactive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.AlarmStateMachineType_Inactive,
                    null);
            }
        }
        #endregion

        #region Active
        /// <summary>
        /// A description for the Active Object.
        /// </summary>
        public StateMachineState Active
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_active; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_active != null)
                    {
                        RemoveChild(m_active);
                    }

                    m_active = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceActive(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Active = replacement;

                Active.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Active, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.AlarmStateMachineType_Active,
                    null);
            }
        }
        #endregion

        #region ToActive
        /// <summary>
        /// A description for the ToActive Object.
        /// </summary>
        public StateMachineTransition ToActive
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_toActive; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_toActive != null)
                    {
                        RemoveChild(m_toActive);
                    }

                    m_toActive = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceToActive(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ToActive = replacement;

                ToActive.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ToActive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.AlarmStateMachineType_ToActive,
                    null);
            }
        }
        #endregion

        #region ToInactive
        /// <summary>
        /// A description for the ToInactive Object.
        /// </summary>
        public StateMachineTransition ToInactive
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_toInactive; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_toInactive != null)
                    {
                        RemoveChild(m_toInactive);
                    }

                    m_toInactive = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceToInactive(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ToInactive = replacement;

                ToInactive.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ToInactive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.AlarmStateMachineType_ToInactive,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AlarmStateMachineType type = source as AlarmStateMachineType;

                if (type != null && type.Inactive != null)
                {
                    Inactive = (StateMachineState)type.Inactive.Clone(this);
                    Inactive.Initialize(type.Inactive);
                }

                if (type != null && type.Active != null)
                {
                    Active = (StateMachineState)type.Active.Clone(this);
                    Active.Initialize(type.Active);
                }

                if (type != null && type.ToActive != null)
                {
                    ToActive = (StateMachineTransition)type.ToActive.Clone(this);
                    ToActive.Initialize(type.ToActive);
                }

                if (type != null && type.ToInactive != null)
                {
                    ToInactive = (StateMachineTransition)type.ToInactive.Clone(this);
                    ToInactive.Initialize(type.ToInactive);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_inactive = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.AlarmStateMachineType_Inactive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Inactive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.AlarmStateMachineType_Inactive);

            m_active = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.AlarmStateMachineType_Active, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Active, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.AlarmStateMachineType_Active);

            m_toActive = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.AlarmStateMachineType_ToActive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ToActive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.AlarmStateMachineType_ToActive);

            m_toInactive = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.AlarmStateMachineType_ToInactive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ToInactive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.AlarmStateMachineType_ToInactive);
        }
        #endregion

        #region Private Fields
        StateMachineState m_inactive;
        StateMachineState m_active;
        StateMachineTransition m_toActive;
        StateMachineTransition m_toInactive;
        #endregion
    }
    #endregion

    #region AlarmStateMachine Class
    /// <summary>
    /// Represents an instance of the AlarmStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AlarmStateMachine : BaseConditionStateMachine
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AlarmStateMachine(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AlarmStateMachineType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AlarmStateMachine Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AlarmStateMachine instance = new AlarmStateMachine(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AlarmStateMachine Construct(IServerInternal server)
        {
            AlarmStateMachine instance = new AlarmStateMachine(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AlarmStateMachine clone = new AlarmStateMachine(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AlarmStateMachine instance = source as AlarmStateMachine;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AlarmStateMachineType type = source as AlarmStateMachineType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private AlarmStateMachineType m_typeDefinition;
        #endregion
    }
    #endregion

    #region ShelvedAuditEventType Class
    /// <summary>
    /// Represents the ShelvedAuditEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class ShelvedAuditEventType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public ShelvedAuditEventType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.ShelvedAuditEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.ShelvedAuditEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AuditConditionEventType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new ShelvedAuditEventType FindSource(IServerInternal server)
        {
            ShelvedAuditEventType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.ShelvedAuditEventType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as ShelvedAuditEventType;

                if (type != null)
                {
                    return type;
                }

                type = new ShelvedAuditEventType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                ShelvedAuditEventType clone = new ShelvedAuditEventType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                ShelvedAuditEventType type = source as ShelvedAuditEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endregion

    #region ShelvedAuditEvent Class
    /// <summary>
    /// Represents an instance of the ShelvedAuditEventType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class ShelvedAuditEvent : AuditConditionEvent
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected ShelvedAuditEvent(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = ShelvedAuditEventType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new ShelvedAuditEvent Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            ShelvedAuditEvent instance = new ShelvedAuditEvent(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new ShelvedAuditEvent Construct(IServerInternal server)
        {
            ShelvedAuditEvent instance = new ShelvedAuditEvent(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                ShelvedAuditEvent clone = new ShelvedAuditEvent(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                ShelvedAuditEvent instance = source as ShelvedAuditEvent;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                ShelvedAuditEventType type = source as ShelvedAuditEventType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private ShelvedAuditEventType m_typeDefinition;
        #endregion
    }
    #endregion

    #region ShelvedStateMachineType Class
    /// <summary>
    /// Represents the ShelvedStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class ShelvedStateMachineType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public ShelvedStateMachineType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.ShelvedStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.ShelvedStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseConditionStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new ShelvedStateMachineType FindSource(IServerInternal server)
        {
            ShelvedStateMachineType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.ShelvedStateMachineType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as ShelvedStateMachineType;

                if (type != null)
                {
                    return type;
                }

                type = new ShelvedStateMachineType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                ShelvedStateMachineType clone = new ShelvedStateMachineType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region Unshelved
        /// <summary>
        /// A description for the Unshelved Object.
        /// </summary>
        public StateMachineState Unshelved
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_unshelved; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_unshelved != null)
                    {
                        RemoveChild(m_unshelved);
                    }

                    m_unshelved = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceUnshelved(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Unshelved = replacement;

                Unshelved.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Unshelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ShelvedStateMachineType_Unshelved,
                    null);
            }
        }
        #endregion

        #region ManualShelved
        /// <summary>
        /// A description for the ManualShelved Object.
        /// </summary>
        public StateMachineState ManualShelved
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_manualShelved; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_manualShelved != null)
                    {
                        RemoveChild(m_manualShelved);
                    }

                    m_manualShelved = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceManualShelved(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ManualShelved = replacement;

                ManualShelved.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ManualShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ShelvedStateMachineType_ManualShelved,
                    null);
            }
        }
        #endregion

        #region TimedShelved
        /// <summary>
        /// A description for the TimedShelved Object.
        /// </summary>
        public StateMachineState TimedShelved
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_timedShelved; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_timedShelved != null)
                    {
                        RemoveChild(m_timedShelved);
                    }

                    m_timedShelved = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceTimedShelved(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                TimedShelved = replacement;

                TimedShelved.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.TimedShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ShelvedStateMachineType_TimedShelved,
                    null);
            }
        }
        #endregion

        #region OneShotShelved
        /// <summary>
        /// A description for the OneShotShelved Object.
        /// </summary>
        public StateMachineState OneShotShelved
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_oneShotShelved; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_oneShotShelved != null)
                    {
                        RemoveChild(m_oneShotShelved);
                    }

                    m_oneShotShelved = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceOneShotShelved(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                OneShotShelved = replacement;

                OneShotShelved.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.OneShotShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ShelvedStateMachineType_OneShotShelved,
                    null);
            }
        }
        #endregion

        #region UnshelvedToManualShelved
        /// <summary>
        /// A description for the UnshelvedToManualShelved Object.
        /// </summary>
        public StateMachineTransition UnshelvedToManualShelved
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_unshelvedToManualShelved; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_unshelvedToManualShelved != null)
                    {
                        RemoveChild(m_unshelvedToManualShelved);
                    }

                    m_unshelvedToManualShelved = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceUnshelvedToManualShelved(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                UnshelvedToManualShelved = replacement;

                UnshelvedToManualShelved.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.UnshelvedToManualShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ShelvedStateMachineType_UnshelvedToManualShelved,
                    null);
            }
        }
        #endregion

        #region UnshelvedToTimedShelved
        /// <summary>
        /// A description for the UnshelvedToTimedShelved Object.
        /// </summary>
        public StateMachineTransition UnshelvedToTimedShelved
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_unshelvedToTimedShelved; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_unshelvedToTimedShelved != null)
                    {
                        RemoveChild(m_unshelvedToTimedShelved);
                    }

                    m_unshelvedToTimedShelved = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceUnshelvedToTimedShelved(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                UnshelvedToTimedShelved = replacement;

                UnshelvedToTimedShelved.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.UnshelvedToTimedShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ShelvedStateMachineType_UnshelvedToTimedShelved,
                    null);
            }
        }
        #endregion

        #region UnshelvedToOneShotShelved
        /// <summary>
        /// A description for the UnshelvedToOneShotShelved Object.
        /// </summary>
        public StateMachineTransition UnshelvedToOneShotShelved
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_unshelvedToOneShotShelved; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_unshelvedToOneShotShelved != null)
                    {
                        RemoveChild(m_unshelvedToOneShotShelved);
                    }

                    m_unshelvedToOneShotShelved = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceUnshelvedToOneShotShelved(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                UnshelvedToOneShotShelved = replacement;

                UnshelvedToOneShotShelved.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.UnshelvedToOneShotShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ShelvedStateMachineType_UnshelvedToOneShotShelved,
                    null);
            }
        }
        #endregion

        #region ManualShelvedToUnshelved
        /// <summary>
        /// A description for the ManualShelvedToUnshelved Object.
        /// </summary>
        public StateMachineTransition ManualShelvedToUnshelved
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_manualShelvedToUnshelved; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_manualShelvedToUnshelved != null)
                    {
                        RemoveChild(m_manualShelvedToUnshelved);
                    }

                    m_manualShelvedToUnshelved = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceManualShelvedToUnshelved(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ManualShelvedToUnshelved = replacement;

                ManualShelvedToUnshelved.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ManualShelvedToUnshelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ShelvedStateMachineType_ManualShelvedToUnshelved,
                    null);
            }
        }
        #endregion

        #region ManualShelvedToTimedShelved
        /// <summary>
        /// A description for the ManualShelvedToTimedShelved Object.
        /// </summary>
        public StateMachineTransition ManualShelvedToTimedShelved
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_manualShelvedToTimedShelved; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_manualShelvedToTimedShelved != null)
                    {
                        RemoveChild(m_manualShelvedToTimedShelved);
                    }

                    m_manualShelvedToTimedShelved = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceManualShelvedToTimedShelved(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ManualShelvedToTimedShelved = replacement;

                ManualShelvedToTimedShelved.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ManualShelvedToTimedShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ShelvedStateMachineType_ManualShelvedToTimedShelved,
                    null);
            }
        }
        #endregion

        #region ManualShelvedToOneShotShelved
        /// <summary>
        /// A description for the ManualShelvedToOneShotShelved Object.
        /// </summary>
        public StateMachineTransition ManualShelvedToOneShotShelved
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_manualShelvedToOneShotShelved; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_manualShelvedToOneShotShelved != null)
                    {
                        RemoveChild(m_manualShelvedToOneShotShelved);
                    }

                    m_manualShelvedToOneShotShelved = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceManualShelvedToOneShotShelved(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ManualShelvedToOneShotShelved = replacement;

                ManualShelvedToOneShotShelved.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ManualShelvedToOneShotShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ShelvedStateMachineType_ManualShelvedToOneShotShelved,
                    null);
            }
        }
        #endregion

        #region TimedShelvedToUnshelved
        /// <summary>
        /// A description for the TimedShelvedToUnshelved Object.
        /// </summary>
        public StateMachineTransition TimedShelvedToUnshelved
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_timedShelvedToUnshelved; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_timedShelvedToUnshelved != null)
                    {
                        RemoveChild(m_timedShelvedToUnshelved);
                    }

                    m_timedShelvedToUnshelved = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceTimedShelvedToUnshelved(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                TimedShelvedToUnshelved = replacement;

                TimedShelvedToUnshelved.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.TimedShelvedToUnshelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ShelvedStateMachineType_TimedShelvedToUnshelved,
                    null);
            }
        }
        #endregion

        #region TimedShelvedToManualShelved
        /// <summary>
        /// A description for the TimedShelvedToManualShelved Object.
        /// </summary>
        public StateMachineTransition TimedShelvedToManualShelved
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_timedShelvedToManualShelved; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_timedShelvedToManualShelved != null)
                    {
                        RemoveChild(m_timedShelvedToManualShelved);
                    }

                    m_timedShelvedToManualShelved = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceTimedShelvedToManualShelved(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                TimedShelvedToManualShelved = replacement;

                TimedShelvedToManualShelved.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.TimedShelvedToManualShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ShelvedStateMachineType_TimedShelvedToManualShelved,
                    null);
            }
        }
        #endregion

        #region TimedShelvedToOneShotShelved
        /// <summary>
        /// A description for the TimedShelvedToOneShotShelved Object.
        /// </summary>
        public StateMachineTransition TimedShelvedToOneShotShelved
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_timedShelvedToOneShotShelved; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_timedShelvedToOneShotShelved != null)
                    {
                        RemoveChild(m_timedShelvedToOneShotShelved);
                    }

                    m_timedShelvedToOneShotShelved = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceTimedShelvedToOneShotShelved(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                TimedShelvedToOneShotShelved = replacement;

                TimedShelvedToOneShotShelved.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.TimedShelvedToOneShotShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ShelvedStateMachineType_TimedShelvedToOneShotShelved,
                    null);
            }
        }
        #endregion

        #region OneShotShelvedToUnshelved
        /// <summary>
        /// A description for the OneShotShelvedToUnshelved Object.
        /// </summary>
        public StateMachineTransition OneShotShelvedToUnshelved
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_oneShotShelvedToUnshelved; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_oneShotShelvedToUnshelved != null)
                    {
                        RemoveChild(m_oneShotShelvedToUnshelved);
                    }

                    m_oneShotShelvedToUnshelved = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceOneShotShelvedToUnshelved(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                OneShotShelvedToUnshelved = replacement;

                OneShotShelvedToUnshelved.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.OneShotShelvedToUnshelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ShelvedStateMachineType_OneShotShelvedToUnshelved,
                    null);
            }
        }
        #endregion

        #region OneShotShelvedToManualShelved
        /// <summary>
        /// A description for the OneShotShelvedToManualShelved Object.
        /// </summary>
        public StateMachineTransition OneShotShelvedToManualShelved
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_oneShotShelvedToManualShelved; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_oneShotShelvedToManualShelved != null)
                    {
                        RemoveChild(m_oneShotShelvedToManualShelved);
                    }

                    m_oneShotShelvedToManualShelved = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceOneShotShelvedToManualShelved(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                OneShotShelvedToManualShelved = replacement;

                OneShotShelvedToManualShelved.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.OneShotShelvedToManualShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ShelvedStateMachineType_OneShotShelvedToManualShelved,
                    null);
            }
        }
        #endregion

        #region OneShotShelvedToTimedShelved
        /// <summary>
        /// A description for the OneShotShelvedToTimedShelved Object.
        /// </summary>
        public StateMachineTransition OneShotShelvedToTimedShelved
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_oneShotShelvedToTimedShelved; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_oneShotShelvedToTimedShelved != null)
                    {
                        RemoveChild(m_oneShotShelvedToTimedShelved);
                    }

                    m_oneShotShelvedToTimedShelved = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceOneShotShelvedToTimedShelved(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                OneShotShelvedToTimedShelved = replacement;

                OneShotShelvedToTimedShelved.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.OneShotShelvedToTimedShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.ShelvedStateMachineType_OneShotShelvedToTimedShelved,
                    null);
            }
        }
        #endregion

        #region ManualShelveMethod
        /// <summary>
        /// A description for the ManualShelve Method.
        /// </summary>
        public MethodSource ManualShelveMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_manualShelveMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_manualShelveMethod != null)
                    {
                        RemoveChild(m_manualShelveMethod);
                    }

                    m_manualShelveMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the ManualShelve method.
        /// </summary>
        public void ManualShelve(OperationContext context)
        {     
            lock (DataLock)
            {     
                ManualShelveMethod.Call(context, this);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the ManualShelve method is called.
        /// </summary>
        public void SetManualShelveCallback(NoArgumentsMethodHandler callback)
        {
            lock (DataLock)
            {  
                ManualShelveMethod.SetCallback(this, callback);
            }
        }
        #endregion

        #region UnshelveMethod
        /// <summary>
        /// A description for the Unshelve Method.
        /// </summary>
        public MethodSource UnshelveMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_unshelveMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_unshelveMethod != null)
                    {
                        RemoveChild(m_unshelveMethod);
                    }

                    m_unshelveMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the Unshelve method.
        /// </summary>
        public void Unshelve(OperationContext context)
        {     
            lock (DataLock)
            {     
                UnshelveMethod.Call(context, this);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the Unshelve method is called.
        /// </summary>
        public void SetUnshelveCallback(NoArgumentsMethodHandler callback)
        {
            lock (DataLock)
            {  
                UnshelveMethod.SetCallback(this, callback);
            }
        }
        #endregion

        #region OneShotShelveMethod
        /// <summary>
        /// A description for the OneShotShelve Method.
        /// </summary>
        public MethodSource OneShotShelveMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_oneShotShelveMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_oneShotShelveMethod != null)
                    {
                        RemoveChild(m_oneShotShelveMethod);
                    }

                    m_oneShotShelveMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the OneShotShelve method.
        /// </summary>
        public void OneShotShelve(OperationContext context)
        {     
            lock (DataLock)
            {     
                OneShotShelveMethod.Call(context, this);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the OneShotShelve method is called.
        /// </summary>
        public void SetOneShotShelveCallback(NoArgumentsMethodHandler callback)
        {
            lock (DataLock)
            {  
                OneShotShelveMethod.SetCallback(this, callback);
            }
        }
        #endregion

        #region TimedShelveMethod
        /// <summary>
        /// A description for the TimedShelve Method.
        /// </summary>
        public ShelvedStateMachineType.TimedShelveMethodSource TimedShelveMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_timedShelveMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_timedShelveMethod != null)
                    {
                        RemoveChild(m_timedShelveMethod);
                    }

                    m_timedShelveMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the TimedShelve method.
        /// </summary>
        public void TimedShelve(OperationContext context, double time)
        {     
            lock (DataLock)
            {     
                TimedShelveMethod.Call(context, this, time);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the TimedShelve method is called.
        /// </summary>
        public void SetTimedShelveCallback(ShelvedStateMachineType.TimedShelveMethodHandler callback)
        {
            lock (DataLock)
            {  
                TimedShelveMethod.SetCallback(this, callback);
            }
        }
        #endregion
        #endregion
        
        #region Method Declarations
        #region TimedShelveMethodSource Class
        /// <summary>
        /// Implements a method which may be used by many nodes.
        /// </summary>
        public partial class TimedShelveMethodSource : MethodSource
        {
            #region Constructors
            /// <summary>
            /// Initializes the object with default values.
            /// </summary>
            public TimedShelveMethodSource(IServerInternal server, NodeSource parent) : base(server, parent)
            {
                Arguments = CreateArguments();
            }
            
            /// <summary>
            /// Creates a new instance of the node.
            /// </summary>
            public static new TimedShelveMethodSource Construct(
                IServerInternal server, 
                NodeSource      parent, 
                NodeId          referenceTypeId,
                NodeId          nodeId,
                QualifiedName   browseName,
                uint            numericId)
            {
                TimedShelveMethodSource instance = new TimedShelveMethodSource(server, parent);
                instance.Initialize(referenceTypeId, nodeId, browseName, numericId, null);
                return instance;
            }
            #endregion
             
            #region ICloneable Members
            /// <summary cref="NodeSource.Clone(NodeSource)" />
            public override NodeSource Clone(NodeSource parent)
            {
                lock (DataLock)
                {
                    TimedShelveMethodSource clone = new TimedShelveMethodSource(Server, parent);
                    clone.Initialize(this);
                    return clone;
                }
            }
            #endregion

            #region Public Interface
            /// <summary>
            /// Calls the TimedShelve method.
            /// </summary>
            public void Call(OperationContext context, NodeSource target, double time)
            {    
                List<object> inputArguments = new List<object>();
                List<ServiceResult> argumentErrors = new List<ServiceResult>();
                List<object> outputArguments = new List<object>();
                
                inputArguments.Add(time);

                ServiceResult result = Call(
                    context, 
                    NodeId, 
                    null, 
                    Parent.NodeId, 
                    inputArguments, 
                    argumentErrors, 
                    outputArguments);

                if (ServiceResult.IsBad(result))
                {
                    throw new ServiceResultException(result);
                }
                    
            }
            #endregion
            
            #region Protected Methods
            /// <summary>
            /// Called when the TimedShelve method is called.
            /// </summary>
            protected override void Call(
                OperationContext     context, 
                NodeSource           target,
                Delegate             methodToCall,
                IList<object>        inputArguments,
                IList<ServiceResult> argumentErrors,
                IList<object>        outputArguments)
            {
                TimedShelveMethodHandler Callback = methodToCall as TimedShelveMethodHandler;

                if (Callback == null)
                {
                    base.Call(context, target, methodToCall, inputArguments, argumentErrors, outputArguments);
                    return;
                }

                double time = (double)inputArguments[0];

                Callback(context, target, time);
            }

            /// <summary>
            /// Creates the arguments for the TimedShelve method.
            /// </summary>
            protected MethodArguments CreateArguments()
            {
                MethodArguments arguments = new MethodArguments();

                Argument argument = null;
                
                // Time
                argument = new Argument();

                argument.Name = "Time";
                argument.DataType = Opc.Ua.DataTypes.Duration;
                argument.ValueRank = ValueRanks.Scalar;
                argument.Description = new LocalizedText("ShelvedStateMachineType_TimedShelve_InputArgument_Time_Description", "en", "Specifies how long the alarm should be shelved.");

                arguments.Input.Add(argument);
                

                return arguments;
            }
            #endregion
        }

        /// <summary>
        /// A delegate used to receive notifications when the method is called.
        /// </summary>
        public delegate void TimedShelveMethodHandler(OperationContext context, NodeSource target, double time);
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                ShelvedStateMachineType type = source as ShelvedStateMachineType;

                if (type != null && type.Unshelved != null)
                {
                    Unshelved = (StateMachineState)type.Unshelved.Clone(this);
                    Unshelved.Initialize(type.Unshelved);
                }

                if (type != null && type.ManualShelved != null)
                {
                    ManualShelved = (StateMachineState)type.ManualShelved.Clone(this);
                    ManualShelved.Initialize(type.ManualShelved);
                }

                if (type != null && type.TimedShelved != null)
                {
                    TimedShelved = (StateMachineState)type.TimedShelved.Clone(this);
                    TimedShelved.Initialize(type.TimedShelved);
                }

                if (type != null && type.OneShotShelved != null)
                {
                    OneShotShelved = (StateMachineState)type.OneShotShelved.Clone(this);
                    OneShotShelved.Initialize(type.OneShotShelved);
                }

                if (type != null && type.UnshelvedToManualShelved != null)
                {
                    UnshelvedToManualShelved = (StateMachineTransition)type.UnshelvedToManualShelved.Clone(this);
                    UnshelvedToManualShelved.Initialize(type.UnshelvedToManualShelved);
                }

                if (type != null && type.UnshelvedToTimedShelved != null)
                {
                    UnshelvedToTimedShelved = (StateMachineTransition)type.UnshelvedToTimedShelved.Clone(this);
                    UnshelvedToTimedShelved.Initialize(type.UnshelvedToTimedShelved);
                }

                if (type != null && type.UnshelvedToOneShotShelved != null)
                {
                    UnshelvedToOneShotShelved = (StateMachineTransition)type.UnshelvedToOneShotShelved.Clone(this);
                    UnshelvedToOneShotShelved.Initialize(type.UnshelvedToOneShotShelved);
                }

                if (type != null && type.ManualShelvedToUnshelved != null)
                {
                    ManualShelvedToUnshelved = (StateMachineTransition)type.ManualShelvedToUnshelved.Clone(this);
                    ManualShelvedToUnshelved.Initialize(type.ManualShelvedToUnshelved);
                }

                if (type != null && type.ManualShelvedToTimedShelved != null)
                {
                    ManualShelvedToTimedShelved = (StateMachineTransition)type.ManualShelvedToTimedShelved.Clone(this);
                    ManualShelvedToTimedShelved.Initialize(type.ManualShelvedToTimedShelved);
                }

                if (type != null && type.ManualShelvedToOneShotShelved != null)
                {
                    ManualShelvedToOneShotShelved = (StateMachineTransition)type.ManualShelvedToOneShotShelved.Clone(this);
                    ManualShelvedToOneShotShelved.Initialize(type.ManualShelvedToOneShotShelved);
                }

                if (type != null && type.TimedShelvedToUnshelved != null)
                {
                    TimedShelvedToUnshelved = (StateMachineTransition)type.TimedShelvedToUnshelved.Clone(this);
                    TimedShelvedToUnshelved.Initialize(type.TimedShelvedToUnshelved);
                }

                if (type != null && type.TimedShelvedToManualShelved != null)
                {
                    TimedShelvedToManualShelved = (StateMachineTransition)type.TimedShelvedToManualShelved.Clone(this);
                    TimedShelvedToManualShelved.Initialize(type.TimedShelvedToManualShelved);
                }

                if (type != null && type.TimedShelvedToOneShotShelved != null)
                {
                    TimedShelvedToOneShotShelved = (StateMachineTransition)type.TimedShelvedToOneShotShelved.Clone(this);
                    TimedShelvedToOneShotShelved.Initialize(type.TimedShelvedToOneShotShelved);
                }

                if (type != null && type.OneShotShelvedToUnshelved != null)
                {
                    OneShotShelvedToUnshelved = (StateMachineTransition)type.OneShotShelvedToUnshelved.Clone(this);
                    OneShotShelvedToUnshelved.Initialize(type.OneShotShelvedToUnshelved);
                }

                if (type != null && type.OneShotShelvedToManualShelved != null)
                {
                    OneShotShelvedToManualShelved = (StateMachineTransition)type.OneShotShelvedToManualShelved.Clone(this);
                    OneShotShelvedToManualShelved.Initialize(type.OneShotShelvedToManualShelved);
                }

                if (type != null && type.OneShotShelvedToTimedShelved != null)
                {
                    OneShotShelvedToTimedShelved = (StateMachineTransition)type.OneShotShelvedToTimedShelved.Clone(this);
                    OneShotShelvedToTimedShelved.Initialize(type.OneShotShelvedToTimedShelved);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_unshelved = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ShelvedStateMachineType_Unshelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Unshelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ShelvedStateMachineType_Unshelved);

            m_manualShelved = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ShelvedStateMachineType_ManualShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ManualShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ShelvedStateMachineType_ManualShelved);

            m_timedShelved = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ShelvedStateMachineType_TimedShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.TimedShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ShelvedStateMachineType_TimedShelved);

            m_oneShotShelved = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ShelvedStateMachineType_OneShotShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.OneShotShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ShelvedStateMachineType_OneShotShelved);

            m_unshelvedToManualShelved = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ShelvedStateMachineType_UnshelvedToManualShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.UnshelvedToManualShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ShelvedStateMachineType_UnshelvedToManualShelved);

            m_unshelvedToTimedShelved = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ShelvedStateMachineType_UnshelvedToTimedShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.UnshelvedToTimedShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ShelvedStateMachineType_UnshelvedToTimedShelved);

            m_unshelvedToOneShotShelved = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ShelvedStateMachineType_UnshelvedToOneShotShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.UnshelvedToOneShotShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ShelvedStateMachineType_UnshelvedToOneShotShelved);

            m_manualShelvedToUnshelved = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ShelvedStateMachineType_ManualShelvedToUnshelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ManualShelvedToUnshelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ShelvedStateMachineType_ManualShelvedToUnshelved);

            m_manualShelvedToTimedShelved = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ShelvedStateMachineType_ManualShelvedToTimedShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ManualShelvedToTimedShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ShelvedStateMachineType_ManualShelvedToTimedShelved);

            m_manualShelvedToOneShotShelved = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ShelvedStateMachineType_ManualShelvedToOneShotShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ManualShelvedToOneShotShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ShelvedStateMachineType_ManualShelvedToOneShotShelved);

            m_timedShelvedToUnshelved = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ShelvedStateMachineType_TimedShelvedToUnshelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.TimedShelvedToUnshelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ShelvedStateMachineType_TimedShelvedToUnshelved);

            m_timedShelvedToManualShelved = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ShelvedStateMachineType_TimedShelvedToManualShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.TimedShelvedToManualShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ShelvedStateMachineType_TimedShelvedToManualShelved);

            m_timedShelvedToOneShotShelved = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ShelvedStateMachineType_TimedShelvedToOneShotShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.TimedShelvedToOneShotShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ShelvedStateMachineType_TimedShelvedToOneShotShelved);

            m_oneShotShelvedToUnshelved = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ShelvedStateMachineType_OneShotShelvedToUnshelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.OneShotShelvedToUnshelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ShelvedStateMachineType_OneShotShelvedToUnshelved);

            m_oneShotShelvedToManualShelved = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ShelvedStateMachineType_OneShotShelvedToManualShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.OneShotShelvedToManualShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ShelvedStateMachineType_OneShotShelvedToManualShelved);

            m_oneShotShelvedToTimedShelved = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.ShelvedStateMachineType_OneShotShelvedToTimedShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.OneShotShelvedToTimedShelved, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.ShelvedStateMachineType_OneShotShelvedToTimedShelved);

            m_manualShelveMethod = MethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Methods.ShelvedStateMachineType_ManualShelve, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ManualShelve, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.ShelvedStateMachineType_ManualShelve);

            m_unshelveMethod = MethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Methods.ShelvedStateMachineType_Unshelve, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Unshelve, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.ShelvedStateMachineType_Unshelve);

            m_oneShotShelveMethod = MethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Methods.ShelvedStateMachineType_OneShotShelve, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.OneShotShelve, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.ShelvedStateMachineType_OneShotShelve);

            m_timedShelveMethod = ShelvedStateMachineType.TimedShelveMethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Methods.ShelvedStateMachineType_TimedShelve, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.TimedShelve, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.ShelvedStateMachineType_TimedShelve);
        }
        #endregion

        #region Private Fields
        StateMachineState m_unshelved;
        StateMachineState m_manualShelved;
        StateMachineState m_timedShelved;
        StateMachineState m_oneShotShelved;
        StateMachineTransition m_unshelvedToManualShelved;
        StateMachineTransition m_unshelvedToTimedShelved;
        StateMachineTransition m_unshelvedToOneShotShelved;
        StateMachineTransition m_manualShelvedToUnshelved;
        StateMachineTransition m_manualShelvedToTimedShelved;
        StateMachineTransition m_manualShelvedToOneShotShelved;
        StateMachineTransition m_timedShelvedToUnshelved;
        StateMachineTransition m_timedShelvedToManualShelved;
        StateMachineTransition m_timedShelvedToOneShotShelved;
        StateMachineTransition m_oneShotShelvedToUnshelved;
        StateMachineTransition m_oneShotShelvedToManualShelved;
        StateMachineTransition m_oneShotShelvedToTimedShelved;
        MethodSource m_manualShelveMethod;
        MethodSource m_unshelveMethod;
        MethodSource m_oneShotShelveMethod;
        ShelvedStateMachineType.TimedShelveMethodSource m_timedShelveMethod;
        #endregion
    }
    #endregion

    #region ShelvedStateMachine Class
    /// <summary>
    /// Represents an instance of the ShelvedStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class ShelvedStateMachine : BaseConditionStateMachine
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected ShelvedStateMachine(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = ShelvedStateMachineType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new ShelvedStateMachine Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            ShelvedStateMachine instance = new ShelvedStateMachine(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new ShelvedStateMachine Construct(IServerInternal server)
        {
            ShelvedStateMachine instance = new ShelvedStateMachine(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                ShelvedStateMachine clone = new ShelvedStateMachine(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region ManualShelveMethod
        /// <summary>
        /// A description for the ManualShelve Method.
        /// </summary>
        public MethodSource ManualShelveMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_manualShelveMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_manualShelveMethod != null)
                    {
                        RemoveChild(m_manualShelveMethod);
                    }

                    m_manualShelveMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the ManualShelve method.
        /// </summary>
        public void ManualShelve(OperationContext context)
        {     
            lock (DataLock)
            {     
                ManualShelveMethod.Call(context, this);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the ManualShelve method is called.
        /// </summary>
        public void SetManualShelveCallback(NoArgumentsMethodHandler callback)
        {
            lock (DataLock)
            {  
                ManualShelveMethod.SetCallback(this, callback);
            }
        }
        #endregion

        #region UnshelveMethod
        /// <summary>
        /// A description for the Unshelve Method.
        /// </summary>
        public MethodSource UnshelveMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_unshelveMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_unshelveMethod != null)
                    {
                        RemoveChild(m_unshelveMethod);
                    }

                    m_unshelveMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the Unshelve method.
        /// </summary>
        public void Unshelve(OperationContext context)
        {     
            lock (DataLock)
            {     
                UnshelveMethod.Call(context, this);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the Unshelve method is called.
        /// </summary>
        public void SetUnshelveCallback(NoArgumentsMethodHandler callback)
        {
            lock (DataLock)
            {  
                UnshelveMethod.SetCallback(this, callback);
            }
        }
        #endregion

        #region OneShotShelveMethod
        /// <summary>
        /// A description for the OneShotShelve Method.
        /// </summary>
        public MethodSource OneShotShelveMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_oneShotShelveMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_oneShotShelveMethod != null)
                    {
                        RemoveChild(m_oneShotShelveMethod);
                    }

                    m_oneShotShelveMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the OneShotShelve method.
        /// </summary>
        public void OneShotShelve(OperationContext context)
        {     
            lock (DataLock)
            {     
                OneShotShelveMethod.Call(context, this);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the OneShotShelve method is called.
        /// </summary>
        public void SetOneShotShelveCallback(NoArgumentsMethodHandler callback)
        {
            lock (DataLock)
            {  
                OneShotShelveMethod.SetCallback(this, callback);
            }
        }
        #endregion

        #region TimedShelveMethod
        /// <summary>
        /// A description for the TimedShelve Method.
        /// </summary>
        public ShelvedStateMachineType.TimedShelveMethodSource TimedShelveMethod
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_timedShelveMethod; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_timedShelveMethod != null)
                    {
                        RemoveChild(m_timedShelveMethod);
                    }

                    m_timedShelveMethod = value; 
                }
            }
        }
            
        /// <summary>
        /// Calls the TimedShelve method.
        /// </summary>
        public void TimedShelve(OperationContext context, double time)
        {     
            lock (DataLock)
            {     
                TimedShelveMethod.Call(context, this, time);
            }
        }
            
        /// <summary>
        /// Sets the callback to use when the TimedShelve method is called.
        /// </summary>
        public void SetTimedShelveCallback(ShelvedStateMachineType.TimedShelveMethodHandler callback)
        {
            lock (DataLock)
            {  
                TimedShelveMethod.SetCallback(this, callback);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                ShelvedStateMachine instance = source as ShelvedStateMachine;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                ShelvedStateMachineType type = source as ShelvedStateMachineType;

                if (type != null && type.ManualShelveMethod != null)
                {
                    ManualShelveMethod = (MethodSource)type.ManualShelveMethod.Clone(this);
                    ManualShelveMethod.Initialize(type.ManualShelveMethod);
                }
                else if (instance != null && instance.ManualShelveMethod != null)
                {
                    ManualShelveMethod = (MethodSource)instance.ManualShelveMethod.Clone(this);
                    ManualShelveMethod.Initialize(instance.ManualShelveMethod);
                }

                if (type != null && type.UnshelveMethod != null)
                {
                    UnshelveMethod = (MethodSource)type.UnshelveMethod.Clone(this);
                    UnshelveMethod.Initialize(type.UnshelveMethod);
                }
                else if (instance != null && instance.UnshelveMethod != null)
                {
                    UnshelveMethod = (MethodSource)instance.UnshelveMethod.Clone(this);
                    UnshelveMethod.Initialize(instance.UnshelveMethod);
                }

                if (type != null && type.OneShotShelveMethod != null)
                {
                    OneShotShelveMethod = (MethodSource)type.OneShotShelveMethod.Clone(this);
                    OneShotShelveMethod.Initialize(type.OneShotShelveMethod);
                }
                else if (instance != null && instance.OneShotShelveMethod != null)
                {
                    OneShotShelveMethod = (MethodSource)instance.OneShotShelveMethod.Clone(this);
                    OneShotShelveMethod.Initialize(instance.OneShotShelveMethod);
                }

                if (type != null && type.TimedShelveMethod != null)
                {
                    TimedShelveMethod = (ShelvedStateMachineType.TimedShelveMethodSource)type.TimedShelveMethod.Clone(this);
                    TimedShelveMethod.Initialize(type.TimedShelveMethod);
                }
                else if (instance != null && instance.TimedShelveMethod != null)
                {
                    TimedShelveMethod = (ShelvedStateMachineType.TimedShelveMethodSource)instance.TimedShelveMethod.Clone(this);
                    TimedShelveMethod.Initialize(instance.TimedShelveMethod);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_manualShelveMethod = MethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ManualShelve, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.ShelvedStateMachineType_ManualShelve);

            m_unshelveMethod = MethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.Unshelve, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.ShelvedStateMachineType_Unshelve);

            m_oneShotShelveMethod = MethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.OneShotShelve, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.ShelvedStateMachineType_OneShotShelve);

            m_timedShelveMethod = ShelvedStateMachineType.TimedShelveMethodSource.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.TimedShelve, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Methods.ShelvedStateMachineType_TimedShelve);
        }
        #endregion

        #region Private Fields
        private ShelvedStateMachineType m_typeDefinition;
        MethodSource m_manualShelveMethod;
        MethodSource m_unshelveMethod;
        MethodSource m_oneShotShelveMethod;
        ShelvedStateMachineType.TimedShelveMethodSource m_timedShelveMethod;
        #endregion
    }
    #endregion

    #region SuppressedStateMachineType Class
    /// <summary>
    /// Represents the SuppressedStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class SuppressedStateMachineType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public SuppressedStateMachineType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.SuppressedStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.SuppressedStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseConditionStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new SuppressedStateMachineType FindSource(IServerInternal server)
        {
            SuppressedStateMachineType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.SuppressedStateMachineType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as SuppressedStateMachineType;

                if (type != null)
                {
                    return type;
                }

                type = new SuppressedStateMachineType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                SuppressedStateMachineType clone = new SuppressedStateMachineType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region Unsuppressed
        /// <summary>
        /// A description for the Unsuppressed Object.
        /// </summary>
        public StateMachineState Unsuppressed
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_unsuppressed; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_unsuppressed != null)
                    {
                        RemoveChild(m_unsuppressed);
                    }

                    m_unsuppressed = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceUnsuppressed(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Unsuppressed = replacement;

                Unsuppressed.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Unsuppressed, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.SuppressedStateMachineType_Unsuppressed,
                    null);
            }
        }
        #endregion

        #region Suppressed
        /// <summary>
        /// A description for the Suppressed Object.
        /// </summary>
        public StateMachineState Suppressed
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_suppressed; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_suppressed != null)
                    {
                        RemoveChild(m_suppressed);
                    }

                    m_suppressed = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceSuppressed(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Suppressed = replacement;

                Suppressed.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Suppressed, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.SuppressedStateMachineType_Suppressed,
                    null);
            }
        }
        #endregion

        #region ToUnsuppressed
        /// <summary>
        /// A description for the ToUnsuppressed Object.
        /// </summary>
        public StateMachineTransition ToUnsuppressed
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_toUnsuppressed; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_toUnsuppressed != null)
                    {
                        RemoveChild(m_toUnsuppressed);
                    }

                    m_toUnsuppressed = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceToUnsuppressed(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ToUnsuppressed = replacement;

                ToUnsuppressed.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ToUnsuppressed, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.SuppressedStateMachineType_ToUnsuppressed,
                    null);
            }
        }
        #endregion

        #region ToSuppressed
        /// <summary>
        /// A description for the ToSuppressed Object.
        /// </summary>
        public StateMachineTransition ToSuppressed
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_toSuppressed; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_toSuppressed != null)
                    {
                        RemoveChild(m_toSuppressed);
                    }

                    m_toSuppressed = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceToSuppressed(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ToSuppressed = replacement;

                ToSuppressed.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ToSuppressed, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.SuppressedStateMachineType_ToSuppressed,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                SuppressedStateMachineType type = source as SuppressedStateMachineType;

                if (type != null && type.Unsuppressed != null)
                {
                    Unsuppressed = (StateMachineState)type.Unsuppressed.Clone(this);
                    Unsuppressed.Initialize(type.Unsuppressed);
                }

                if (type != null && type.Suppressed != null)
                {
                    Suppressed = (StateMachineState)type.Suppressed.Clone(this);
                    Suppressed.Initialize(type.Suppressed);
                }

                if (type != null && type.ToUnsuppressed != null)
                {
                    ToUnsuppressed = (StateMachineTransition)type.ToUnsuppressed.Clone(this);
                    ToUnsuppressed.Initialize(type.ToUnsuppressed);
                }

                if (type != null && type.ToSuppressed != null)
                {
                    ToSuppressed = (StateMachineTransition)type.ToSuppressed.Clone(this);
                    ToSuppressed.Initialize(type.ToSuppressed);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_unsuppressed = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.SuppressedStateMachineType_Unsuppressed, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Unsuppressed, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.SuppressedStateMachineType_Unsuppressed);

            m_suppressed = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.SuppressedStateMachineType_Suppressed, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Suppressed, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.SuppressedStateMachineType_Suppressed);

            m_toUnsuppressed = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.SuppressedStateMachineType_ToUnsuppressed, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ToUnsuppressed, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.SuppressedStateMachineType_ToUnsuppressed);

            m_toSuppressed = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.SuppressedStateMachineType_ToSuppressed, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ToSuppressed, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.SuppressedStateMachineType_ToSuppressed);
        }
        #endregion

        #region Private Fields
        StateMachineState m_unsuppressed;
        StateMachineState m_suppressed;
        StateMachineTransition m_toUnsuppressed;
        StateMachineTransition m_toSuppressed;
        #endregion
    }
    #endregion

    #region SuppressedStateMachine Class
    /// <summary>
    /// Represents an instance of the SuppressedStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class SuppressedStateMachine : BaseConditionStateMachine
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected SuppressedStateMachine(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = SuppressedStateMachineType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new SuppressedStateMachine Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            SuppressedStateMachine instance = new SuppressedStateMachine(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new SuppressedStateMachine Construct(IServerInternal server)
        {
            SuppressedStateMachine instance = new SuppressedStateMachine(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                SuppressedStateMachine clone = new SuppressedStateMachine(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                SuppressedStateMachine instance = source as SuppressedStateMachine;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                SuppressedStateMachineType type = source as SuppressedStateMachineType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private SuppressedStateMachineType m_typeDefinition;
        #endregion
    }
    #endregion

    #region ProcessAlarmType Class
    /// <summary>
    /// Represents the ProcessAlarmType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class ProcessAlarmType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public ProcessAlarmType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.ProcessAlarmType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.ProcessAlarmType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AlarmConditionType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new ProcessAlarmType FindSource(IServerInternal server)
        {
            ProcessAlarmType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.ProcessAlarmType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as ProcessAlarmType;

                if (type != null)
                {
                    return type;
                }

                type = new ProcessAlarmType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                ProcessAlarmType clone = new ProcessAlarmType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                ProcessAlarmType type = source as ProcessAlarmType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endregion

    #region ProcessAlarm Class
    /// <summary>
    /// Represents an instance of the ProcessAlarmType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class ProcessAlarm : AlarmCondition
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected ProcessAlarm(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = ProcessAlarmType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new ProcessAlarm Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            ProcessAlarm instance = new ProcessAlarm(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new ProcessAlarm Construct(IServerInternal server)
        {
            ProcessAlarm instance = new ProcessAlarm(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                ProcessAlarm clone = new ProcessAlarm(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                ProcessAlarm instance = source as ProcessAlarm;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                ProcessAlarmType type = source as ProcessAlarmType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private ProcessAlarmType m_typeDefinition;
        #endregion
    }
    #endregion

    #region LevelAlarmType Class
    /// <summary>
    /// Represents the LevelAlarmType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class LevelAlarmType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public LevelAlarmType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.LevelAlarmType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.LevelAlarmType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.ProcessAlarmType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new LevelAlarmType FindSource(IServerInternal server)
        {
            LevelAlarmType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.LevelAlarmType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as LevelAlarmType;

                if (type != null)
                {
                    return type;
                }

                type = new LevelAlarmType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                LevelAlarmType clone = new LevelAlarmType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                LevelAlarmType type = source as LevelAlarmType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endregion

    #region LevelAlarm Class
    /// <summary>
    /// Represents an instance of the LevelAlarmType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class LevelAlarm : ProcessAlarm
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected LevelAlarm(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = LevelAlarmType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new LevelAlarm Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            LevelAlarm instance = new LevelAlarm(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new LevelAlarm Construct(IServerInternal server)
        {
            LevelAlarm instance = new LevelAlarm(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                LevelAlarm clone = new LevelAlarm(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                LevelAlarm instance = source as LevelAlarm;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                LevelAlarmType type = source as LevelAlarmType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private LevelAlarmType m_typeDefinition;
        #endregion
    }
    #endregion

    #region SingleLevelAlarmType Class
    /// <summary>
    /// Represents the SingleLevelAlarmType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class SingleLevelAlarmType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public SingleLevelAlarmType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.SingleLevelAlarmType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.SingleLevelAlarmType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.LevelAlarmType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new SingleLevelAlarmType FindSource(IServerInternal server)
        {
            SingleLevelAlarmType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.SingleLevelAlarmType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as SingleLevelAlarmType;

                if (type != null)
                {
                    return type;
                }

                type = new SingleLevelAlarmType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                SingleLevelAlarmType clone = new SingleLevelAlarmType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region Limit
        /// <summary>
        /// A description for the Limit Variable.
        /// </summary>
        public AlarmLimit<double> Limit
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_limit; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_limit != null)
                    {
                        RemoveChild(m_limit);
                    }

                    m_limit = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceLimit(AlarmLimit<double> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Limit = replacement;

                Limit.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Limit, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.SingleLevelAlarmType_Limit,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                SingleLevelAlarmType type = source as SingleLevelAlarmType;

                if (type != null && type.Limit != null)
                {
                    Limit = (AlarmLimit<double>)type.Limit.Clone(this);
                    Limit.Initialize(type.Limit);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_limit = AlarmLimit<double>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.SingleLevelAlarmType_Limit, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Limit, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SingleLevelAlarmType_Limit);
        }
        #endregion

        #region Private Fields
        AlarmLimit<double> m_limit;
        #endregion
    }
    #endregion

    #region SingleLevelAlarm Class
    /// <summary>
    /// Represents an instance of the SingleLevelAlarmType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class SingleLevelAlarm : LevelAlarm
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected SingleLevelAlarm(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = SingleLevelAlarmType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new SingleLevelAlarm Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            SingleLevelAlarm instance = new SingleLevelAlarm(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new SingleLevelAlarm Construct(IServerInternal server)
        {
            SingleLevelAlarm instance = new SingleLevelAlarm(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                SingleLevelAlarm clone = new SingleLevelAlarm(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region Limit
        /// <summary>
        /// A description for the Limit Variable.
        /// </summary>
        public AlarmLimit<double> Limit
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_limit; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_limit != null)
                    {
                        RemoveChild(m_limit);
                    }

                    m_limit = value; 
                }
            }
        }

        /// <summary>
        /// Whether the Limit node is specified for the node.
        /// </summary>
        public bool LimitSpecified
        {
        	get 
            { 
                lock (DataLock)
                {
                    return m_limit != null; 
                }
            }
        }

        /// <summary>
        /// Specifies the optional child.
        /// </summary>
        public void SpecifyLimit(AlarmLimit<double> replacement)
        {
            CheckNodeManagerState();

            lock (DataLock)
            {
                if (LimitSpecified)
                {
                    Limit = (AlarmLimit<double>)DeleteChild(m_limit);
                }

                if (replacement != null)
                {       
                    Limit = replacement;

                    Limit.Create(
                        this.NodeId, 
                        new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                        null,
                        new QualifiedName(Opc.Ua.BrowseNames.Limit, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                        Opc.Ua.Variables.SingleLevelAlarmType_Limit,
                        null);
                }
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                SingleLevelAlarm instance = source as SingleLevelAlarm;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                SingleLevelAlarmType type = source as SingleLevelAlarmType;

                if (type != null && type.Limit != null)
                {
                    Limit = (AlarmLimit<double>)type.Limit.Clone(this);
                    Limit.Initialize(type.Limit);
                }
                else if (instance != null && instance.Limit != null)
                {
                    Limit = (AlarmLimit<double>)instance.Limit.Clone(this);
                    Limit.Initialize(instance.Limit);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        
        /// <summary cref="NodeSource.CreateChildren" />
        protected override void CreateChildren(object configuration)
        {
            base.CreateChildren(configuration);
                            
            Limit = (AlarmLimit<double>)InitializeOptionalChild(
                new ConstructInstanceDelegate(AlarmLimit<double>.Construct), 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Limit, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.SingleLevelAlarmType_Limit,
                configuration);
        }
        #endregion

        #region Private Fields
        private SingleLevelAlarmType m_typeDefinition;
        AlarmLimit<double> m_limit;
        #endregion
    }
    #endregion

    #region MultiLevelAlarmType Class
    /// <summary>
    /// Represents the MultiLevelAlarmType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class MultiLevelAlarmType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public MultiLevelAlarmType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.MultiLevelAlarmType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.MultiLevelAlarmType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.LevelAlarmType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new MultiLevelAlarmType FindSource(IServerInternal server)
        {
            MultiLevelAlarmType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.MultiLevelAlarmType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as MultiLevelAlarmType;

                if (type != null)
                {
                    return type;
                }

                type = new MultiLevelAlarmType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                MultiLevelAlarmType clone = new MultiLevelAlarmType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region State
        /// <summary>
        /// A description for the State Object.
        /// </summary>
        public MultiLevelAlarmConditionStateMachine State
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_state; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_state != null)
                    {
                        RemoveChild(m_state);
                    }

                    m_state = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceState(MultiLevelAlarmConditionStateMachine replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                State = replacement;

                State.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.State, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.MultiLevelAlarmType_State,
                    null);
            }
        }
        #endregion

        #region HighHighLimit
        /// <summary>
        /// A description for the HighHighLimit Variable.
        /// </summary>
        public AlarmLimit<double> HighHighLimit
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_highHighLimit; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_highHighLimit != null)
                    {
                        RemoveChild(m_highHighLimit);
                    }

                    m_highHighLimit = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceHighHighLimit(AlarmLimit<double> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                HighHighLimit = replacement;

                HighHighLimit.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.HighHighLimit, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.MultiLevelAlarmType_HighHighLimit,
                    null);
            }
        }
        #endregion

        #region HighLimit
        /// <summary>
        /// A description for the HighLimit Variable.
        /// </summary>
        public AlarmLimit<double> HighLimit
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_highLimit; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_highLimit != null)
                    {
                        RemoveChild(m_highLimit);
                    }

                    m_highLimit = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceHighLimit(AlarmLimit<double> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                HighLimit = replacement;

                HighLimit.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.HighLimit, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.MultiLevelAlarmType_HighLimit,
                    null);
            }
        }
        #endregion

        #region LowLimit
        /// <summary>
        /// A description for the LowLimit Variable.
        /// </summary>
        public AlarmLimit<double> LowLimit
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_lowLimit; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_lowLimit != null)
                    {
                        RemoveChild(m_lowLimit);
                    }

                    m_lowLimit = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceLowLimit(AlarmLimit<double> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                LowLimit = replacement;

                LowLimit.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.LowLimit, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.MultiLevelAlarmType_LowLimit,
                    null);
            }
        }
        #endregion

        #region LowLowLimit
        /// <summary>
        /// A description for the LowLowLimit Variable.
        /// </summary>
        public AlarmLimit<double> LowLowLimit
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_lowLowLimit; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_lowLowLimit != null)
                    {
                        RemoveChild(m_lowLowLimit);
                    }

                    m_lowLowLimit = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceLowLowLimit(AlarmLimit<double> replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                LowLowLimit = replacement;

                LowLowLimit.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.LowLowLimit, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Variables.MultiLevelAlarmType_LowLowLimit,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                MultiLevelAlarmType type = source as MultiLevelAlarmType;

                if (type != null && type.State != null)
                {
                    State = (MultiLevelAlarmConditionStateMachine)type.State.Clone(this);
                    State.Initialize(type.State);
                }

                if (type != null && type.HighHighLimit != null)
                {
                    HighHighLimit = (AlarmLimit<double>)type.HighHighLimit.Clone(this);
                    HighHighLimit.Initialize(type.HighHighLimit);
                }

                if (type != null && type.HighLimit != null)
                {
                    HighLimit = (AlarmLimit<double>)type.HighLimit.Clone(this);
                    HighLimit.Initialize(type.HighLimit);
                }

                if (type != null && type.LowLimit != null)
                {
                    LowLimit = (AlarmLimit<double>)type.LowLimit.Clone(this);
                    LowLimit.Initialize(type.LowLimit);
                }

                if (type != null && type.LowLowLimit != null)
                {
                    LowLowLimit = (AlarmLimit<double>)type.LowLowLimit.Clone(this);
                    LowLowLimit.Initialize(type.LowLowLimit);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_state = MultiLevelAlarmConditionStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.AlarmConditionType_State, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.State, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.AlarmConditionType_State);

            m_highHighLimit = AlarmLimit<double>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.MultiLevelAlarmType_HighHighLimit, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.HighHighLimit, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.MultiLevelAlarmType_HighHighLimit);

            m_highLimit = AlarmLimit<double>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.MultiLevelAlarmType_HighLimit, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.HighLimit, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.MultiLevelAlarmType_HighLimit);

            m_lowLimit = AlarmLimit<double>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.MultiLevelAlarmType_LowLimit, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.LowLimit, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.MultiLevelAlarmType_LowLimit);

            m_lowLowLimit = AlarmLimit<double>.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Variables.MultiLevelAlarmType_LowLowLimit, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.LowLowLimit, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.MultiLevelAlarmType_LowLowLimit);
        }
        #endregion

        #region Private Fields
        MultiLevelAlarmConditionStateMachine m_state;
        AlarmLimit<double> m_highHighLimit;
        AlarmLimit<double> m_highLimit;
        AlarmLimit<double> m_lowLimit;
        AlarmLimit<double> m_lowLowLimit;
        #endregion
    }
    #endregion

    #region MultiLevelAlarm Class
    /// <summary>
    /// Represents an instance of the MultiLevelAlarmType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class MultiLevelAlarm : LevelAlarm
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected MultiLevelAlarm(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = MultiLevelAlarmType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new MultiLevelAlarm Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            MultiLevelAlarm instance = new MultiLevelAlarm(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new MultiLevelAlarm Construct(IServerInternal server)
        {
            MultiLevelAlarm instance = new MultiLevelAlarm(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                MultiLevelAlarm clone = new MultiLevelAlarm(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region State
        /// <summary>
        /// A description for the State Object.
        /// </summary>
        public new MultiLevelAlarmConditionStateMachine State
        {
        	get 
            {    
                return (MultiLevelAlarmConditionStateMachine)base.State;
            }

            protected set
            {
                base.State = value;
            }
        }
        #endregion

        #region HighHighLimit
        /// <summary>
        /// A description for the HighHighLimit Variable.
        /// </summary>
        public AlarmLimit<double> HighHighLimit
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_highHighLimit; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_highHighLimit != null)
                    {
                        RemoveChild(m_highHighLimit);
                    }

                    m_highHighLimit = value; 
                }
            }
        }

        /// <summary>
        /// Whether the HighHighLimit node is specified for the node.
        /// </summary>
        public bool HighHighLimitSpecified
        {
        	get 
            { 
                lock (DataLock)
                {
                    return m_highHighLimit != null; 
                }
            }
        }

        /// <summary>
        /// Specifies the optional child.
        /// </summary>
        public void SpecifyHighHighLimit(AlarmLimit<double> replacement)
        {
            CheckNodeManagerState();

            lock (DataLock)
            {
                if (HighHighLimitSpecified)
                {
                    HighHighLimit = (AlarmLimit<double>)DeleteChild(m_highHighLimit);
                }

                if (replacement != null)
                {       
                    HighHighLimit = replacement;

                    HighHighLimit.Create(
                        this.NodeId, 
                        new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                        null,
                        new QualifiedName(Opc.Ua.BrowseNames.HighHighLimit, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                        Opc.Ua.Variables.MultiLevelAlarmType_HighHighLimit,
                        null);
                }
            }
        }
        #endregion

        #region HighLimit
        /// <summary>
        /// A description for the HighLimit Variable.
        /// </summary>
        public AlarmLimit<double> HighLimit
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_highLimit; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_highLimit != null)
                    {
                        RemoveChild(m_highLimit);
                    }

                    m_highLimit = value; 
                }
            }
        }

        /// <summary>
        /// Whether the HighLimit node is specified for the node.
        /// </summary>
        public bool HighLimitSpecified
        {
        	get 
            { 
                lock (DataLock)
                {
                    return m_highLimit != null; 
                }
            }
        }

        /// <summary>
        /// Specifies the optional child.
        /// </summary>
        public void SpecifyHighLimit(AlarmLimit<double> replacement)
        {
            CheckNodeManagerState();

            lock (DataLock)
            {
                if (HighLimitSpecified)
                {
                    HighLimit = (AlarmLimit<double>)DeleteChild(m_highLimit);
                }

                if (replacement != null)
                {       
                    HighLimit = replacement;

                    HighLimit.Create(
                        this.NodeId, 
                        new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                        null,
                        new QualifiedName(Opc.Ua.BrowseNames.HighLimit, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                        Opc.Ua.Variables.MultiLevelAlarmType_HighLimit,
                        null);
                }
            }
        }
        #endregion

        #region LowLimit
        /// <summary>
        /// A description for the LowLimit Variable.
        /// </summary>
        public AlarmLimit<double> LowLimit
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_lowLimit; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_lowLimit != null)
                    {
                        RemoveChild(m_lowLimit);
                    }

                    m_lowLimit = value; 
                }
            }
        }

        /// <summary>
        /// Whether the LowLimit node is specified for the node.
        /// </summary>
        public bool LowLimitSpecified
        {
        	get 
            { 
                lock (DataLock)
                {
                    return m_lowLimit != null; 
                }
            }
        }

        /// <summary>
        /// Specifies the optional child.
        /// </summary>
        public void SpecifyLowLimit(AlarmLimit<double> replacement)
        {
            CheckNodeManagerState();

            lock (DataLock)
            {
                if (LowLimitSpecified)
                {
                    LowLimit = (AlarmLimit<double>)DeleteChild(m_lowLimit);
                }

                if (replacement != null)
                {       
                    LowLimit = replacement;

                    LowLimit.Create(
                        this.NodeId, 
                        new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                        null,
                        new QualifiedName(Opc.Ua.BrowseNames.LowLimit, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                        Opc.Ua.Variables.MultiLevelAlarmType_LowLimit,
                        null);
                }
            }
        }
        #endregion

        #region LowLowLimit
        /// <summary>
        /// A description for the LowLowLimit Variable.
        /// </summary>
        public AlarmLimit<double> LowLowLimit
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_lowLowLimit; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_lowLowLimit != null)
                    {
                        RemoveChild(m_lowLowLimit);
                    }

                    m_lowLowLimit = value; 
                }
            }
        }

        /// <summary>
        /// Whether the LowLowLimit node is specified for the node.
        /// </summary>
        public bool LowLowLimitSpecified
        {
        	get 
            { 
                lock (DataLock)
                {
                    return m_lowLowLimit != null; 
                }
            }
        }

        /// <summary>
        /// Specifies the optional child.
        /// </summary>
        public void SpecifyLowLowLimit(AlarmLimit<double> replacement)
        {
            CheckNodeManagerState();

            lock (DataLock)
            {
                if (LowLowLimitSpecified)
                {
                    LowLowLimit = (AlarmLimit<double>)DeleteChild(m_lowLowLimit);
                }

                if (replacement != null)
                {       
                    LowLowLimit = replacement;

                    LowLowLimit.Create(
                        this.NodeId, 
                        new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                        null,
                        new QualifiedName(Opc.Ua.BrowseNames.LowLowLimit, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                        Opc.Ua.Variables.MultiLevelAlarmType_LowLowLimit,
                        null);
                }
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                MultiLevelAlarm instance = source as MultiLevelAlarm;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                MultiLevelAlarmType type = source as MultiLevelAlarmType;

                if (type != null && type.HighHighLimit != null)
                {
                    HighHighLimit = (AlarmLimit<double>)type.HighHighLimit.Clone(this);
                    HighHighLimit.Initialize(type.HighHighLimit);
                }
                else if (instance != null && instance.HighHighLimit != null)
                {
                    HighHighLimit = (AlarmLimit<double>)instance.HighHighLimit.Clone(this);
                    HighHighLimit.Initialize(instance.HighHighLimit);
                }

                if (type != null && type.HighLimit != null)
                {
                    HighLimit = (AlarmLimit<double>)type.HighLimit.Clone(this);
                    HighLimit.Initialize(type.HighLimit);
                }
                else if (instance != null && instance.HighLimit != null)
                {
                    HighLimit = (AlarmLimit<double>)instance.HighLimit.Clone(this);
                    HighLimit.Initialize(instance.HighLimit);
                }

                if (type != null && type.LowLimit != null)
                {
                    LowLimit = (AlarmLimit<double>)type.LowLimit.Clone(this);
                    LowLimit.Initialize(type.LowLimit);
                }
                else if (instance != null && instance.LowLimit != null)
                {
                    LowLimit = (AlarmLimit<double>)instance.LowLimit.Clone(this);
                    LowLimit.Initialize(instance.LowLimit);
                }

                if (type != null && type.LowLowLimit != null)
                {
                    LowLowLimit = (AlarmLimit<double>)type.LowLowLimit.Clone(this);
                    LowLowLimit.Initialize(type.LowLowLimit);
                }
                else if (instance != null && instance.LowLowLimit != null)
                {
                    LowLowLimit = (AlarmLimit<double>)instance.LowLowLimit.Clone(this);
                    LowLowLimit.Initialize(instance.LowLowLimit);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            State = MultiLevelAlarmConditionStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.State, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.AlarmConditionType_State);
        }
        
        /// <summary cref="NodeSource.CreateChildren" />
        protected override void CreateChildren(object configuration)
        {
            base.CreateChildren(configuration);
                            
            HighHighLimit = (AlarmLimit<double>)InitializeOptionalChild(
                new ConstructInstanceDelegate(AlarmLimit<double>.Construct), 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.HighHighLimit, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.MultiLevelAlarmType_HighHighLimit,
                configuration);

            HighLimit = (AlarmLimit<double>)InitializeOptionalChild(
                new ConstructInstanceDelegate(AlarmLimit<double>.Construct), 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.HighLimit, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.MultiLevelAlarmType_HighLimit,
                configuration);

            LowLimit = (AlarmLimit<double>)InitializeOptionalChild(
                new ConstructInstanceDelegate(AlarmLimit<double>.Construct), 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.LowLimit, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.MultiLevelAlarmType_LowLimit,
                configuration);

            LowLowLimit = (AlarmLimit<double>)InitializeOptionalChild(
                new ConstructInstanceDelegate(AlarmLimit<double>.Construct), 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.LowLowLimit, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Variables.MultiLevelAlarmType_LowLowLimit,
                configuration);
        }
        #endregion

        #region Private Fields
        private MultiLevelAlarmType m_typeDefinition;
        AlarmLimit<double> m_highHighLimit;
        AlarmLimit<double> m_highLimit;
        AlarmLimit<double> m_lowLimit;
        AlarmLimit<double> m_lowLowLimit;
        #endregion
    }
    #endregion

    #region MultiLevelAlarmConditionStateMachineType Class
    /// <summary>
    /// Represents the MultiLevelAlarmConditionStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class MultiLevelAlarmConditionStateMachineType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public MultiLevelAlarmConditionStateMachineType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.MultiLevelAlarmConditionStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.MultiLevelAlarmConditionStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AlarmConditionStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new MultiLevelAlarmConditionStateMachineType FindSource(IServerInternal server)
        {
            MultiLevelAlarmConditionStateMachineType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.MultiLevelAlarmConditionStateMachineType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as MultiLevelAlarmConditionStateMachineType;

                if (type != null)
                {
                    return type;
                }

                type = new MultiLevelAlarmConditionStateMachineType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                MultiLevelAlarmConditionStateMachineType clone = new MultiLevelAlarmConditionStateMachineType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region AlarmActive
        /// <summary>
        /// A description for the AlarmActive Object.
        /// </summary>
        public MultiLevelAlarmStateMachine AlarmActive
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_alarmActive; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_alarmActive != null)
                    {
                        RemoveChild(m_alarmActive);
                    }

                    m_alarmActive = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceAlarmActive(MultiLevelAlarmStateMachine replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                AlarmActive = replacement;

                AlarmActive.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.AlarmActive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.MultiLevelAlarmConditionStateMachineType_AlarmActive,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                MultiLevelAlarmConditionStateMachineType type = source as MultiLevelAlarmConditionStateMachineType;

                if (type != null && type.AlarmActive != null)
                {
                    AlarmActive = (MultiLevelAlarmStateMachine)type.AlarmActive.Clone(this);
                    AlarmActive.Initialize(type.AlarmActive);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_alarmActive = MultiLevelAlarmStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.AlarmConditionStateMachineType_AlarmActive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.AlarmActive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.AlarmConditionStateMachineType_AlarmActive);
        }
        #endregion

        #region Private Fields
        MultiLevelAlarmStateMachine m_alarmActive;
        #endregion
    }
    #endregion

    #region MultiLevelAlarmConditionStateMachine Class
    /// <summary>
    /// Represents an instance of the MultiLevelAlarmConditionStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class MultiLevelAlarmConditionStateMachine : AlarmConditionStateMachine
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected MultiLevelAlarmConditionStateMachine(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = MultiLevelAlarmConditionStateMachineType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new MultiLevelAlarmConditionStateMachine Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            MultiLevelAlarmConditionStateMachine instance = new MultiLevelAlarmConditionStateMachine(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new MultiLevelAlarmConditionStateMachine Construct(IServerInternal server)
        {
            MultiLevelAlarmConditionStateMachine instance = new MultiLevelAlarmConditionStateMachine(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                MultiLevelAlarmConditionStateMachine clone = new MultiLevelAlarmConditionStateMachine(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region AlarmActive
        /// <summary>
        /// A description for the AlarmActive Object.
        /// </summary>
        public new MultiLevelAlarmStateMachine AlarmActive
        {
        	get 
            {    
                return (MultiLevelAlarmStateMachine)base.AlarmActive;
            }

            protected set
            {
                base.AlarmActive = value;
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                MultiLevelAlarmConditionStateMachine instance = source as MultiLevelAlarmConditionStateMachine;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                MultiLevelAlarmConditionStateMachineType type = source as MultiLevelAlarmConditionStateMachineType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            AlarmActive = MultiLevelAlarmStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.AlarmActive, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.AlarmConditionStateMachineType_AlarmActive);
        }
        #endregion

        #region Private Fields
        private MultiLevelAlarmConditionStateMachineType m_typeDefinition;
        #endregion
    }
    #endregion

    #region MultiLevelAlarmStateMachineType Class
    /// <summary>
    /// Represents the MultiLevelAlarmStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class MultiLevelAlarmStateMachineType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public MultiLevelAlarmStateMachineType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.MultiLevelAlarmStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.MultiLevelAlarmStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.AlarmStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new MultiLevelAlarmStateMachineType FindSource(IServerInternal server)
        {
            MultiLevelAlarmStateMachineType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.MultiLevelAlarmStateMachineType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as MultiLevelAlarmStateMachineType;

                if (type != null)
                {
                    return type;
                }

                type = new MultiLevelAlarmStateMachineType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                MultiLevelAlarmStateMachineType clone = new MultiLevelAlarmStateMachineType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region ActiveSubState
        /// <summary>
        /// A description for the ActiveSubState Object.
        /// </summary>
        public MultiLevelAlarmActiveSubStateMachine ActiveSubState
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_activeSubState; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_activeSubState != null)
                    {
                        RemoveChild(m_activeSubState);
                    }

                    m_activeSubState = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceActiveSubState(MultiLevelAlarmActiveSubStateMachine replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ActiveSubState = replacement;

                ActiveSubState.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ActiveSubState, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.MultiLevelAlarmStateMachineType_ActiveSubState,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                MultiLevelAlarmStateMachineType type = source as MultiLevelAlarmStateMachineType;

                if (type != null && type.ActiveSubState != null)
                {
                    ActiveSubState = (MultiLevelAlarmActiveSubStateMachine)type.ActiveSubState.Clone(this);
                    ActiveSubState.Initialize(type.ActiveSubState);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_activeSubState = MultiLevelAlarmActiveSubStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.MultiLevelAlarmStateMachineType_ActiveSubState, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.ActiveSubState, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.MultiLevelAlarmStateMachineType_ActiveSubState);
        }
        #endregion

        #region Private Fields
        MultiLevelAlarmActiveSubStateMachine m_activeSubState;
        #endregion
    }
    #endregion

    #region MultiLevelAlarmStateMachine Class
    /// <summary>
    /// Represents an instance of the MultiLevelAlarmStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class MultiLevelAlarmStateMachine : AlarmStateMachine
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected MultiLevelAlarmStateMachine(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = MultiLevelAlarmStateMachineType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new MultiLevelAlarmStateMachine Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            MultiLevelAlarmStateMachine instance = new MultiLevelAlarmStateMachine(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new MultiLevelAlarmStateMachine Construct(IServerInternal server)
        {
            MultiLevelAlarmStateMachine instance = new MultiLevelAlarmStateMachine(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                MultiLevelAlarmStateMachine clone = new MultiLevelAlarmStateMachine(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #region ActiveSubState
        /// <summary>
        /// A description for the ActiveSubState Object.
        /// </summary>
        public MultiLevelAlarmActiveSubStateMachine ActiveSubState
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_activeSubState; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_activeSubState != null)
                    {
                        RemoveChild(m_activeSubState);
                    }

                    m_activeSubState = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceActiveSubState(MultiLevelAlarmActiveSubStateMachine replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                ActiveSubState = replacement;

                ActiveSubState.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.ActiveSubState, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.MultiLevelAlarmStateMachineType_ActiveSubState,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                MultiLevelAlarmStateMachine instance = source as MultiLevelAlarmStateMachine;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                MultiLevelAlarmStateMachineType type = source as MultiLevelAlarmStateMachineType;

                if (type != null && type.ActiveSubState != null)
                {
                    ActiveSubState = (MultiLevelAlarmActiveSubStateMachine)type.ActiveSubState.Clone(this);
                    ActiveSubState.Initialize(type.ActiveSubState);
                }
                else if (instance != null && instance.ActiveSubState != null)
                {
                    ActiveSubState = (MultiLevelAlarmActiveSubStateMachine)instance.ActiveSubState.Clone(this);
                    ActiveSubState.Initialize(instance.ActiveSubState);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_activeSubState = MultiLevelAlarmActiveSubStateMachine.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                null, 
                new QualifiedName(Opc.Ua.BrowseNames.ActiveSubState, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.MultiLevelAlarmStateMachineType_ActiveSubState);
        }
        #endregion

        #region Private Fields
        private MultiLevelAlarmStateMachineType m_typeDefinition;
        MultiLevelAlarmActiveSubStateMachine m_activeSubState;
        #endregion
    }
    #endregion

    #region MultiLevelAlarmActiveSubStateMachineType Class
    /// <summary>
    /// Represents the MultiLevelAlarmActiveSubStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class MultiLevelAlarmActiveSubStateMachineType : ObjectTypeSource
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public MultiLevelAlarmActiveSubStateMachineType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.ObjectTypes.MultiLevelAlarmActiveSubStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.MultiLevelAlarmActiveSubStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.ObjectTypes.BaseConditionStateMachineType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new MultiLevelAlarmActiveSubStateMachineType FindSource(IServerInternal server)
        {
            MultiLevelAlarmActiveSubStateMachineType type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.ObjectTypes.MultiLevelAlarmActiveSubStateMachineType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as MultiLevelAlarmActiveSubStateMachineType;

                if (type != null)
                {
                    return type;
                }

                type = new MultiLevelAlarmActiveSubStateMachineType(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                MultiLevelAlarmActiveSubStateMachineType clone = new MultiLevelAlarmActiveSubStateMachineType(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #region HighHigh
        /// <summary>
        /// A description for the HighHigh Object.
        /// </summary>
        public StateMachineState HighHigh
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_highHigh; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_highHigh != null)
                    {
                        RemoveChild(m_highHigh);
                    }

                    m_highHigh = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceHighHigh(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                HighHigh = replacement;

                HighHigh.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.HighHigh, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.MultiLevelAlarmActiveSubStateMachineType_HighHigh,
                    null);
            }
        }
        #endregion

        #region High
        /// <summary>
        /// A description for the High Object.
        /// </summary>
        public StateMachineState High
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_high; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_high != null)
                    {
                        RemoveChild(m_high);
                    }

                    m_high = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceHigh(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                High = replacement;

                High.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.High, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.MultiLevelAlarmActiveSubStateMachineType_High,
                    null);
            }
        }
        #endregion

        #region Low
        /// <summary>
        /// A description for the Low Object.
        /// </summary>
        public StateMachineState Low
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_low; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_low != null)
                    {
                        RemoveChild(m_low);
                    }

                    m_low = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceLow(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                Low = replacement;

                Low.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.Low, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.MultiLevelAlarmActiveSubStateMachineType_Low,
                    null);
            }
        }
        #endregion

        #region LowLow
        /// <summary>
        /// A description for the LowLow Object.
        /// </summary>
        public StateMachineState LowLow
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_lowLow; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_lowLow != null)
                    {
                        RemoveChild(m_lowLow);
                    }

                    m_lowLow = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceLowLow(StateMachineState replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                LowLow = replacement;

                LowLow.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.LowLow, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.MultiLevelAlarmActiveSubStateMachineType_LowLow,
                    null);
            }
        }
        #endregion

        #region HighToHighHigh
        /// <summary>
        /// A description for the HighToHighHigh Object.
        /// </summary>
        public StateMachineTransition HighToHighHigh
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_highToHighHigh; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_highToHighHigh != null)
                    {
                        RemoveChild(m_highToHighHigh);
                    }

                    m_highToHighHigh = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceHighToHighHigh(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                HighToHighHigh = replacement;

                HighToHighHigh.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.HighToHighHigh, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.MultiLevelAlarmActiveSubStateMachineType_HighToHighHigh,
                    null);
            }
        }
        #endregion

        #region HighHighToHigh
        /// <summary>
        /// A description for the HighHighToHigh Object.
        /// </summary>
        public StateMachineTransition HighHighToHigh
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_highHighToHigh; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_highHighToHigh != null)
                    {
                        RemoveChild(m_highHighToHigh);
                    }

                    m_highHighToHigh = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceHighHighToHigh(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                HighHighToHigh = replacement;

                HighHighToHigh.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.HighHighToHigh, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.MultiLevelAlarmActiveSubStateMachineType_HighHighToHigh,
                    null);
            }
        }
        #endregion

        #region LowToLowLow
        /// <summary>
        /// A description for the LowToLowLow Object.
        /// </summary>
        public StateMachineTransition LowToLowLow
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_lowToLowLow; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_lowToLowLow != null)
                    {
                        RemoveChild(m_lowToLowLow);
                    }

                    m_lowToLowLow = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceLowToLowLow(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                LowToLowLow = replacement;

                LowToLowLow.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.LowToLowLow, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.MultiLevelAlarmActiveSubStateMachineType_LowToLowLow,
                    null);
            }
        }
        #endregion

        #region LowLowToLow
        /// <summary>
        /// A description for the LowLowToLow Object.
        /// </summary>
        public StateMachineTransition LowLowToLow
        {
        	get 
            {
                lock (DataLock)
                {      
                    return m_lowLowToLow; 
                }
            }

            protected set
            {
                lock (DataLock)
                {      
                    if (m_lowLowToLow != null)
                    {
                        RemoveChild(m_lowLowToLow);
                    }

                    m_lowLowToLow = value; 
                }
            }
        }
            
        /// <summary>
        /// Replaces the child with another node.
        /// </summary>
        public void ReplaceLowLowToLow(StateMachineTransition replacement)
        {
            if (replacement == null) throw new ArgumentNullException("replacement");
            
            CheckNodeManagerState();

            lock (DataLock)
            {
                LowLowToLow = replacement;

                LowLowToLow.Create(
                    this.NodeId,
                    new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                    null,
                    new QualifiedName(Opc.Ua.BrowseNames.LowLowToLow, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                    Opc.Ua.Objects.MultiLevelAlarmActiveSubStateMachineType_LowLowToLow,
                    null);
            }
        }
        #endregion
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                MultiLevelAlarmActiveSubStateMachineType type = source as MultiLevelAlarmActiveSubStateMachineType;

                if (type != null && type.HighHigh != null)
                {
                    HighHigh = (StateMachineState)type.HighHigh.Clone(this);
                    HighHigh.Initialize(type.HighHigh);
                }

                if (type != null && type.High != null)
                {
                    High = (StateMachineState)type.High.Clone(this);
                    High.Initialize(type.High);
                }

                if (type != null && type.Low != null)
                {
                    Low = (StateMachineState)type.Low.Clone(this);
                    Low.Initialize(type.Low);
                }

                if (type != null && type.LowLow != null)
                {
                    LowLow = (StateMachineState)type.LowLow.Clone(this);
                    LowLow.Initialize(type.LowLow);
                }

                if (type != null && type.HighToHighHigh != null)
                {
                    HighToHighHigh = (StateMachineTransition)type.HighToHighHigh.Clone(this);
                    HighToHighHigh.Initialize(type.HighToHighHigh);
                }

                if (type != null && type.HighHighToHigh != null)
                {
                    HighHighToHigh = (StateMachineTransition)type.HighHighToHigh.Clone(this);
                    HighHighToHigh.Initialize(type.HighHighToHigh);
                }

                if (type != null && type.LowToLowLow != null)
                {
                    LowToLowLow = (StateMachineTransition)type.LowToLowLow.Clone(this);
                    LowToLowLow.Initialize(type.LowToLowLow);
                }

                if (type != null && type.LowLowToLow != null)
                {
                    LowLowToLow = (StateMachineTransition)type.LowLowToLow.Clone(this);
                    LowLowToLow.Initialize(type.LowLowToLow);
                }
            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
            m_highHigh = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.MultiLevelAlarmActiveSubStateMachineType_HighHigh, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.HighHigh, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.MultiLevelAlarmActiveSubStateMachineType_HighHigh);

            m_high = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.MultiLevelAlarmActiveSubStateMachineType_High, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.High, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.MultiLevelAlarmActiveSubStateMachineType_High);

            m_low = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.MultiLevelAlarmActiveSubStateMachineType_Low, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.Low, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.MultiLevelAlarmActiveSubStateMachineType_Low);

            m_lowLow = StateMachineState.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.MultiLevelAlarmActiveSubStateMachineType_LowLow, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.LowLow, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.MultiLevelAlarmActiveSubStateMachineType_LowLow);

            m_highToHighHigh = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.MultiLevelAlarmActiveSubStateMachineType_HighToHighHigh, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.HighToHighHigh, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.MultiLevelAlarmActiveSubStateMachineType_HighToHighHigh);

            m_highHighToHigh = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.MultiLevelAlarmActiveSubStateMachineType_HighHighToHigh, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.HighHighToHigh, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.MultiLevelAlarmActiveSubStateMachineType_HighHighToHigh);

            m_lowToLowLow = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.MultiLevelAlarmActiveSubStateMachineType_LowToLowLow, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.LowToLowLow, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.MultiLevelAlarmActiveSubStateMachineType_LowToLowLow);

            m_lowLowToLow = StateMachineTransition.Construct(
                Server, 
                this, 
                new NodeId(Opc.Ua.ReferenceTypes.HasComponent, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new NodeId(Opc.Ua.Objects.MultiLevelAlarmActiveSubStateMachineType_LowLowToLow, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)), 
                new QualifiedName(Opc.Ua.BrowseNames.LowLowToLow, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                Opc.Ua.Objects.MultiLevelAlarmActiveSubStateMachineType_LowLowToLow);
        }
        #endregion

        #region Private Fields
        StateMachineState m_highHigh;
        StateMachineState m_high;
        StateMachineState m_low;
        StateMachineState m_lowLow;
        StateMachineTransition m_highToHighHigh;
        StateMachineTransition m_highHighToHigh;
        StateMachineTransition m_lowToLowLow;
        StateMachineTransition m_lowLowToLow;
        #endregion
    }
    #endregion

    #region MultiLevelAlarmActiveSubStateMachine Class
    /// <summary>
    /// Represents an instance of the MultiLevelAlarmActiveSubStateMachineType ObjectType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class MultiLevelAlarmActiveSubStateMachine : BaseConditionStateMachine
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected MultiLevelAlarmActiveSubStateMachine(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = MultiLevelAlarmActiveSubStateMachineType.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new MultiLevelAlarmActiveSubStateMachine Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            MultiLevelAlarmActiveSubStateMachine instance = new MultiLevelAlarmActiveSubStateMachine(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new MultiLevelAlarmActiveSubStateMachine Construct(IServerInternal server)
        {
            MultiLevelAlarmActiveSubStateMachine instance = new MultiLevelAlarmActiveSubStateMachine(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                MultiLevelAlarmActiveSubStateMachine clone = new MultiLevelAlarmActiveSubStateMachine(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                MultiLevelAlarmActiveSubStateMachine instance = source as MultiLevelAlarmActiveSubStateMachine;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                MultiLevelAlarmActiveSubStateMachineType type = source as MultiLevelAlarmActiveSubStateMachineType;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private MultiLevelAlarmActiveSubStateMachineType m_typeDefinition;
        #endregion
    }
    #endregion

    #region AlarmLimitType Class
    /// <summary>
    /// Represents the AlarmLimitType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AlarmLimitType<T> : VariableTypeSource<T>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        public AlarmLimitType(IServerInternal server) : base(server)
        {
            Initialize(
                new NodeId(Opc.Ua.VariableTypes.AlarmLimitType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new QualifiedName(Opc.Ua.BrowseNames.AlarmLimitType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)),
                new NodeId(Opc.Ua.VariableTypes.AnalogItemType, GetNamespaceIndex(Opc.Ua.Namespaces.OpcUa)));
                    
            server.TypeSources.SetTypeSource(this.NodeId, this);
        }

        /// <summary>
        /// Finds the source for the type definition (creates it if it does not exist).
        /// </summary>
        public static new AlarmLimitType<T> FindSource(IServerInternal server)
        {
            AlarmLimitType<T> type = null;
                    
            lock (server.TypeSources.SyncRoot)
            {
                NodeId typeId = new NodeId(Opc.Ua.VariableTypes.AlarmLimitType, server.NamespaceUris.GetIndexOrAppend(Opc.Ua.Namespaces.OpcUa));

                type = server.TypeSources.FindTypeSource(typeId) as AlarmLimitType<T>;

                if (type != null)
                {
                    return type;
                }

                type = new AlarmLimitType<T>(server);
            }

            return type;
        }
        #endregion
             
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AlarmLimitType<T> clone = new AlarmLimitType<T>(Server);
                clone.Initialize(this);
                return clone;
            }
        }
        #endregion
      
        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {
                base.Initialize(source);
                
                AlarmLimitType<T> type = source as AlarmLimitType<T>;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endregion

    #region AlarmLimit Class
    /// <summary>
    /// Represents an instance of the AlarmLimitType VariableType in the address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelDesigner", "1.0.0.0")]
    public partial class AlarmLimit<T> : AnalogItem<T>
    {
        #region Constructors
        /// <summary>
        /// Initializes the object with default values.
        /// </summary>
        protected AlarmLimit(IServerInternal server, NodeSource parent) 
        : 
            base(server, parent)
        {
            m_typeDefinition = AlarmLimitType<T>.FindSource(server);
        }

        /// <summary>
        /// Creates a new instance of the node.
        /// </summary>
        public static new AlarmLimit<T> Construct(
            IServerInternal server, 
            NodeSource      parent, 
            NodeId          referenceTypeId,
            NodeId          nodeId,
            QualifiedName   browseName,
            uint            numericId)
        {
            AlarmLimit<T> instance = new AlarmLimit<T>(server, parent);
            instance.Initialize(referenceTypeId, nodeId, browseName, numericId, instance.m_typeDefinition.NodeId);
            return instance;
        }

        /// <summary>
        /// Creates a new instance of the node without any parent.
        /// </summary>
        public static new AlarmLimit<T> Construct(IServerInternal server)
        {
            AlarmLimit<T> instance = new AlarmLimit<T>(server, (NodeSource)null);
            instance.Initialize(null, null, null, 0, instance.m_typeDefinition.NodeId);
            return instance;
        }
        #endregion
           
        #region ICloneable Members
        /// <summary cref="NodeSource.Clone(NodeSource)" />
        public override NodeSource Clone(NodeSource parent)
        {
            lock (DataLock)
            {
                AlarmLimit<T> clone = new AlarmLimit<T>(Server, parent);
                clone.Initialize(this);
                return clone;
            } 
        }
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary cref="NodeSource.Initialize(NodeSource)" />
        public override void Initialize(NodeSource source)
        {
            lock (DataLock)
            {            
                AlarmLimit<T> instance = source as AlarmLimit<T>;

                if (instance != null)
                {
                    base.Initialize(source);
                }

                AlarmLimitType<T> type = source as AlarmLimitType<T>;

            }
        }

        /// <summary cref="NodeSource.InitializeChildren" />
        protected override void InitializeChildren()
        {
            base.InitializeChildren();
                
        }
        #endregion

        #region Private Fields
        private AlarmLimitType<T> m_typeDefinition;
        #endregion
    }
    #endregion
}
